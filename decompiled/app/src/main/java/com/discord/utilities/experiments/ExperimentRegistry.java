package com.discord.utilities.experiments;

import com.discord.utilities.experiments.ExperimentRegistry2;
import d0.t.Collections2;
import java.util.LinkedHashMap;
import kotlin.Metadata;

/* compiled from: ExperimentRegistry.kt */
@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\bÆ\u0002\u0018\u00002\u00020\u0001B\t\b\u0002¢\u0006\u0004\b\n\u0010\u000bR5\u0010\u0006\u001a\u001e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00040\u0002j\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0004`\u00058\u0006@\u0006¢\u0006\f\n\u0004\b\u0006\u0010\u0007\u001a\u0004\b\b\u0010\t¨\u0006\f"}, d2 = {"Lcom/discord/utilities/experiments/ExperimentRegistry;", "", "Ljava/util/LinkedHashMap;", "", "Lcom/discord/utilities/experiments/RegisteredExperiment;", "Lkotlin/collections/LinkedHashMap;", "registeredExperiments", "Ljava/util/LinkedHashMap;", "getRegisteredExperiments", "()Ljava/util/LinkedHashMap;", "<init>", "()V", "app_productionGoogleRelease"}, k = 1, mv = {1, 4, 2})
/* loaded from: classes2.dex */
public final class ExperimentRegistry {
    public static final ExperimentRegistry INSTANCE = new ExperimentRegistry();
    private static final LinkedHashMap<String, ExperimentRegistry2> registeredExperiments;

    /* JADX WARN: Multi-variable type inference failed */
    static {
        LinkedHashMap<String, ExperimentRegistry2> linkedHashMap = new LinkedHashMap<>();
        registeredExperiments = linkedHashMap;
        ExperimentRegistry2.Type type = ExperimentRegistry2.Type.USER;
        ExperimentRegistry2.Type type2 = ExperimentRegistry2.Type.GUILD;
        for (Object obj : Collections2.listOf((Object[]) new ExperimentRegistry2[]{new ExperimentRegistry2("Compact Invite Widget", "2020-01_mobile_invite_suggestion_compact", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Use compact view"}), true), new ExperimentRegistry2("Guild Invite Sheet", "2020-12_android_guild_channel_invite_sheet", type, Collections2.listOf((Object[]) new String[]{"Control: Use the full-screen guild invite UI", "Treatment 1: Use the bottom sheet guild invite UI"}), true), new ExperimentRegistry2("Disable mentions in landscape", "2020-12_android_disable_landscape_mentions", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Hide mentions in landscape"}), true), new ExperimentRegistry2("Invite to GDM Sheet", "2020-12_invite_to_gdm", type, Collections2.listOf((Object[]) new String[]{"Control: Use the full-screen GDM invite UI", "Treatment 1: Use the bottom sheet GDM invite UI"}), true), new ExperimentRegistry2("Guild Delete Feedback", "2020-12_guild_delete_feedback", type, Collections2.listOf((Object[]) new String[]{"Control: Do not show the feedback modal", "Treatment 1: Show the feedback modal"}), true), new ExperimentRegistry2("View Threads", "2021-02_view_threads", type, Collections2.listOf((Object[]) new String[]{"Control: Do not display anything threads-related, except if receiving a notification", "Treatment 1: Show view-only threads features in channel list, in chat view, etc."}), true), new ExperimentRegistry2("Create Threads", "2020-09_threads", type2, Collections2.listOf((Object[]) new String[]{"Control: Do not show thread creation entrypoints, or Thread Browser", "Treatment 1: Show thread creation buttons, and show button to open Thread Browser"}), true), new ExperimentRegistry2("Disable Camera 2", "2021-02_android_webrtc_camera2", type, Collections2.listOf((Object[]) new String[]{"Control: Use Camera 2 API if supported", "Treatment 1: Force Camera 1 API"}), true), new ExperimentRegistry2("MediaSinkWants", "2021-03_android_media_sink_wants", type, Collections2.listOf((Object[]) new String[]{"Control: disabled", "Treatment 1: use MediaSinkWants"}), true), new ExperimentRegistry2("Default Invite Expiration", "2021-03_android_extend_invite_expiration", type2, Collections2.listOf((Object[]) new String[]{"Control: Default Invite Expiration is 1 day", "Treatment 1: Default Invite Expiration is 7 days"}), true), new ExperimentRegistry2("Emoji Autocomplete Upsell", "2021-03_nitro_emoji_autocomplete_upsell_android", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Show Emoji Autocomplete Upsell"}), true), new ExperimentRegistry2("Application Command Frecency", "2021-09_android_app_commands_frecency", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Show frecent application commands"}), true), new ExperimentRegistry2("Attachments Bottom Sheet", "2021-10_android_attachment_bottom_sheet", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Show attachments bottom sheet"}), true), new ExperimentRegistry2("Contact Sync: Base Experiment", "2021-04_contact_sync_android_main", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Enable core Contact Sync features"}), true), new ExperimentRegistry2("Stop Offscreen Video Streams", "2021-03_stop_offscreen_video_streams", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Stop offscreen video streams"}), true), new ExperimentRegistry2("Hub Multiple Domains", "2021-08_hub_multi_domain_mobile", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Enable multiple domains for hubs"}), true), new ExperimentRegistry2("Enabled Discord Hub Directories", "2021-06_desktop_school_hubs", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: See Discord Hub Directories"}), true), new ExperimentRegistry2("Enabled Discord Hub Emails", "2021-06_hub_email_connection", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: See Discord Hub Emails"}), true), new ExperimentRegistry2("Enabled Discord Hub Study Groups", "2021-10_study_group", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Hub Study Groups Enabled"}), true), new ExperimentRegistry2("Enabled Hub Guild Events", "2021-11_hub_events", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Enabled hub Guild events"}), true), new ExperimentRegistry2("Enable Impression Logging", "2021-08_impression_logging_enabled_android", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Enable Impression Logging"}), true), new ExperimentRegistry2("AudioManager V2 and OpenSL ES", "2021-05_opensl_default_enable_android", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Default enable OpenSL", "Treatment 2: Use StoreAudioManagerV2 for output routing"}), true), new ExperimentRegistry2("Phone Registration - Bailout to Email", "2021-06_reg_bailout_to_email_android", type, Collections2.listOf((Object[]) new String[]{"Control: Just the back button", "Treatment 1: Static button to bailout to the email tab"}), true), new ExperimentRegistry2("Enable Network Action Logging", "2021-07_network_action_logging_android", type, Collections2.listOf((Object[]) new String[]{"Off: No Action logging", "On: Enable Action Logging"}), true), new ExperimentRegistry2("Preview Promotions", "2021-06_preview_promotions", type, Collections2.listOf((Object[]) new String[]{"Off: Hit normal endpoint", "On: Hit preview endpoint"}), true), new ExperimentRegistry2("Route audio to speakerphone by default", "2021-08_android_speakerphone_default", type, Collections2.listOf((Object[]) new String[]{"Control", "Treatment 1: Always default to speakerphone"}), true), new ExperimentRegistry2("New Thread Perms", "2021-08_threads_permissions", type2, Collections2.listOf((Object[]) new String[]{"Control: Use old threads permissions.", "Treatment 1: Use new threads permissions."}), true), new ExperimentRegistry2("SMS Autofill", "2021-09_android_sms_autofill", type, Collections2.listOf((Object[]) new String[]{"Control: No SMS Autofill", "Treatment 1: SMS Code autofills"}), true), new ExperimentRegistry2("Guild Member Profiles v2", "2021-10_premium_guild_member_profiles", type, Collections2.listOf((Object[]) new String[]{"Control: No editing of guild member premium profiles.", "Treatment 1: Can edit guild member premium profiles"}), true), new ExperimentRegistry2("Guild Communication Disabled - Guilds Experiment", "2021-11_guild_communication_disabled_guilds", type2, Collections2.listOf((Object[]) new String[]{"Control: No timing out of malicious users.", "Treatment 1: Can grant the MODERATE_MEMBER permission for timing out malicious users"}), true), new ExperimentRegistry2("Guild Communication Disabled - Users Experiment", "2021-11_guild_communication_disabled_users", type, Collections2.listOf((Object[]) new String[]{"Control: No timing out of malicious users.", "Treatment 1: Can grant the MODERATE_MEMBER permission for timing out malicious users"}), true), new ExperimentRegistry2("Email Change Confirmation", "2022-01_email_change_confirmation", type, Collections2.listOf((Object[]) new String[]{"Control: No confirmation on email change", "Treatment 1: Require confirmation for email change"}), true), new ExperimentRegistry2("Playstation Connected Accounts", "2021-12_connected_accounts_playstation", type, Collections2.listOf((Object[]) new String[]{"Control: User can not link and see linked playstation accounts and can not be shown upsells", "Treatment 1: User can link and see linked playstation accounts and can be shown upsells", "Treatment 2: User can link and see linked playstation accounts but can not be shown upsells"}), true), new ExperimentRegistry2("Text In Voice", "2022-03_text_in_voice", type2, Collections2.listOf((Object[]) new String[]{"Control: No text-in-voice for the guild.", "Treatment 1: Display text-in-voice in the guild."}), true), new ExperimentRegistry2("Create Forum Channels", "2021-07_threads_only_channel", type2, Collections2.listOf((Object[]) new String[]{"Control: Cannot create forum channels.", "Treatment 1: Can create forum channels."}), true), new ExperimentRegistry2("Forum Channel Redesign", "2022-03_android_forum_channel_redesign", type2, Collections2.listOf((Object[]) new String[]{"Control: Threads-only view.", "Treatment 1: Forum view."}), true), new ExperimentRegistry2("Display highlights notification settings", "2022-03_highlights_settings", type, Collections2.listOf((Object[]) new String[]{"Control: Highlights settings not visible", "Treatment 1: Highlights settings visible"}), true)})) {
            linkedHashMap.put(((ExperimentRegistry2) obj).getName(), obj);
        }
    }

    private ExperimentRegistry() {
    }

    public final LinkedHashMap<String, ExperimentRegistry2> getRegisteredExperiments() {
        return registeredExperiments;
    }
}
