package com.discord.utilities.analytics;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;
import b.d.b.a.outline;
import co.discord.media_engine.DeviceDescription4;
import com.adjust.sdk.Adjust;
import com.adjust.sdk.AdjustAttribution;
import com.adjust.sdk.AdjustEvent;
import com.discord.analytics.generated.events.TrackAccountLinkStep;
import com.discord.analytics.generated.events.TrackAgeGateSubmitted;
import com.discord.analytics.generated.events.TrackConnectedAccountInitiated;
import com.discord.analytics.generated.events.TrackDismissibleContentDismissed;
import com.discord.analytics.generated.events.TrackForceUpdatePasswordSucceeded;
import com.discord.analytics.generated.events.TrackGuildAutomodFeedback;
import com.discord.analytics.generated.events.TrackRoleSubscriptionListingUpsellPageViewedV3;
import com.discord.analytics.generated.events.impression.TrackImpressionInviteAccept;
import com.discord.analytics.generated.traits.TrackBase;
import com.discord.analytics.generated.traits.TrackSourceMetadata;
import com.discord.api.activity.Activity;
import com.discord.api.activity.ActivityPlatform;
import com.discord.api.application.Application;
import com.discord.api.channel.Channel;
import com.discord.api.guild.Guild;
import com.discord.api.guildscheduledevent.GuildScheduledEvent;
import com.discord.api.permission.Permission;
import com.discord.api.role.GuildRole;
import com.discord.api.stageinstance.StageInstance;
import com.discord.api.sticker.Sticker;
import com.discord.api.thread.ThreadMemberFlags;
import com.discord.api.user.User;
import com.discord.api.voice.state.VoiceState;
import com.discord.app.AppLog;
import com.discord.models.domain.ModelApplicationStream;
import com.discord.models.domain.ModelAuditLogEntry;
import com.discord.models.domain.ModelGift;
import com.discord.models.domain.ModelGuildTemplate;
import com.discord.models.domain.ModelInvite;
import com.discord.models.domain.ModelMuteConfig;
import com.discord.models.domain.ModelNotificationSettings;
import com.discord.models.domain.ModelSku;
import com.discord.models.domain.ModelStoreListing;
import com.discord.models.domain.emoji.Emoji;
import com.discord.models.domain.emoji.ModelEmojiCustom;
import com.discord.models.domain.emoji.ModelEmojiUnicode;
import com.discord.models.member.GuildMember;
import com.discord.models.presence.Presence;
import com.discord.rtcconnection.RtcConnection;
import com.discord.rtcconnection.audio.DiscordAudioManager;
import com.discord.rtcconnection.mediaengine.MediaEngine;
import com.discord.stores.StoreGuildScheduledEvents;
import com.discord.stores.StoreMediaSettings;
import com.discord.stores.StoreMessages2;
import com.discord.stores.StoreStream;
import com.discord.utilities.analytics.AnalyticsUtils;
import com.discord.utilities.analytics.Traits;
import com.discord.utilities.collections.CollectionExtensions;
import com.discord.utilities.email.EmailUtils;
import com.discord.utilities.fcm.NotificationClient;
import com.discord.utilities.intent.RouteHandlers;
import com.discord.utilities.logging.Logger;
import com.discord.utilities.permissions.PermissionUtils;
import com.discord.utilities.persister.Persister;
import com.discord.utilities.phone.PhoneUtils;
import com.discord.utilities.platform.Platform;
import com.discord.utilities.presence.ActivityUtils;
import com.discord.utilities.presence.PresenceUtils;
import com.discord.utilities.rest.SendUtils2;
import com.discord.utilities.rx.ObservableExtensionsKt;
import com.discord.utilities.time.ClockFactory;
import com.discord.widgets.chat.input.MentionUtils;
import com.discord.widgets.guilds.create.StockGuildTemplate;
import com.discord.widgets.guilds.invite.GuildInvite;
import com.discord.widgets.stage.model.StageAnalyticsRequestToSpeakState;
import com.discord.widgets.user.WidgetUserSetCustomStatusViewModel;
import com.discord.widgets.user.search.WidgetGlobalSearchModel;
import com.discord.widgets.voice.feedback.FeedbackRating;
import com.google.firebase.analytics.FirebaseAnalytics;
import d0.LazyJVM;
import d0.Tuples;
import d0.g0.StringNumberConversions;
import d0.g0.Strings4;
import d0.g0.StringsJVM;
import d0.t.Collections2;
import d0.t.Iterables2;
import d0.t.Maps6;
import d0.t.MapsJVM;
import d0.t.MutableCollections;
import d0.t._Collections;
import d0.z.d.Intrinsics3;
import d0.z.d.Lambda;
import j0.k.Func1;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TimeZone;
import kotlin.Lazy;
import kotlin.Metadata;
import kotlin.NoWhenBranchMatchedException;
import kotlin.Tuples2;
import kotlin.Unit;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import rx.Observable;
import rx.functions.Func2;

/* compiled from: AnalyticsTracker.kt */
@Metadata(bv = {1, 0, 3}, d1 = {"\u0000®\u0004\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\u0002\n\u0002\b\t\n\u0002\u0010\u000b\n\u0002\b\u0007\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\t\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u000b\n\u0002\u0010 \n\u0002\b\t\n\u0002\u0010%\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b#\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\"\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0011\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0010\r\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u001c\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u001b\n\u0002\u0018\u0002\n\u0002\b\u000f\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0011\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\b\u0015\n\u0002\u0018\u0002\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0018\u0002\n\u0002\b\u0015\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0011\bÆ\u0002\u0018\u00002\u00020\u0001:\u0004à\u0004á\u0004B\n\b\u0002¢\u0006\u0005\bß\u0004\u0010LJ#\u0010\u0006\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002H\u0007¢\u0006\u0004\b\u0006\u0010\u0007J\u001f\u0010\n\u001a\u00020\u00052\u0006\u0010\b\u001a\u00020\u00032\u0006\u0010\t\u001a\u00020\u0003H\u0007¢\u0006\u0004\b\n\u0010\u000bJ\u0017\u0010\r\u001a\u00020\u00052\u0006\u0010\f\u001a\u00020\u0003H\u0002¢\u0006\u0004\b\r\u0010\u000eJ\u001f\u0010\u0011\u001a\u00020\u00052\u0006\u0010\f\u001a\u00020\u00032\u0006\u0010\u0010\u001a\u00020\u000fH\u0002¢\u0006\u0004\b\u0011\u0010\u0012J\u0017\u0010\u0014\u001a\u00020\u00052\u0006\u0010\u0013\u001a\u00020\u0003H\u0007¢\u0006\u0004\b\u0014\u0010\u000eJ7\u0010\u0019\u001a\u00020\u00052\u0006\u0010\u0013\u001a\u00020\u00032\u0006\u0010\u0015\u001a\u00020\u00032\n\b\u0002\u0010\u0016\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0018\u001a\u0004\u0018\u00010\u0017H\u0007¢\u0006\u0004\b\u0019\u0010\u001aJ!\u0010\u001e\u001a\u00020\u00052\b\u0010\u001c\u001a\u0004\u0018\u00010\u001b2\u0006\u0010\u001d\u001a\u00020\u0003H\u0007¢\u0006\u0004\b\u001e\u0010\u001fJY\u0010\u001e\u001a\u00020\u00052\u0006\u0010\u0013\u001a\u00020\u00032\u000e\u0010\"\u001a\n\u0018\u00010 j\u0004\u0018\u0001`!2\u000e\u0010$\u001a\n\u0018\u00010 j\u0004\u0018\u0001`#2\b\u0010%\u001a\u0004\u0018\u00010\u00172\u0006\u0010\u001d\u001a\u00020\u00032\u000e\u0010'\u001a\n\u0018\u00010 j\u0004\u0018\u0001`&H\u0002¢\u0006\u0004\b\u001e\u0010(J\u0019\u0010)\u001a\u00020\u00052\b\u0010\u001c\u001a\u0004\u0018\u00010\u001bH\u0007¢\u0006\u0004\b)\u0010*Ja\u0010)\u001a\u00020\u00052\u0006\u0010\u0013\u001a\u00020\u00032\u000e\u0010\"\u001a\n\u0018\u00010 j\u0004\u0018\u0001`!2\u000e\u0010$\u001a\n\u0018\u00010 j\u0004\u0018\u0001`#2\b\u0010%\u001a\u0004\u0018\u00010\u00172\u000e\u0010,\u001a\n\u0018\u00010 j\u0004\u0018\u0001`+2\u000e\u0010'\u001a\n\u0018\u00010 j\u0004\u0018\u0001`&H\u0002¢\u0006\u0004\b)\u0010-J\u0017\u0010/\u001a\u00020\u00052\u0006\u0010.\u001a\u00020\u0003H\u0007¢\u0006\u0004\b/\u0010\u000eJ)\u00104\u001a\u00020\u00052\u0006\u00101\u001a\u0002002\b\u00103\u001a\u0004\u0018\u0001022\u0006\u0010\u0015\u001a\u00020\u0003H\u0007¢\u0006\u0004\b4\u00105J\u001b\u00108\u001a\u00020\u00052\n\u00107\u001a\u00060 j\u0002`6H\u0007¢\u0006\u0004\b8\u00109J#\u0010:\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002H\u0007¢\u0006\u0004\b:\u0010\u0007J'\u0010=\u001a\u00020\u00052\u0006\u0010\u001d\u001a\u00020\u00032\u0006\u0010;\u001a\u00020\u00032\u0006\u0010<\u001a\u00020\u0017H\u0007¢\u0006\u0004\b=\u0010>JA\u0010D\u001a\u00020\u0005*\u0002022\n\u0010?\u001a\u00060 j\u0002`+2\u0006\u0010@\u001a\u00020\u00032\u0018\u0010C\u001a\u0014\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010 0Aj\u0002`BH\u0002¢\u0006\u0004\bD\u0010EJ\u001b\u0010G\u001a\u0004\u0018\u00010\u00032\b\u0010F\u001a\u0004\u0018\u00010\u0017H\u0002¢\u0006\u0004\bG\u0010HJ\u001b\u0010J\u001a\u00020\u00052\n\b\u0002\u0010I\u001a\u0004\u0018\u00010\u0003H\u0007¢\u0006\u0004\bJ\u0010\u000eJ\u000f\u0010K\u001a\u00020\u0005H\u0007¢\u0006\u0004\bK\u0010LJS\u0010S\u001a\u00020\u00052\u0006\u0010M\u001a\u00020\u00172\n\u0010\"\u001a\u00060 j\u0002`!2\f\u0010O\u001a\b\u0012\u0004\u0012\u00020\u00030N2\u0010\u0010P\u001a\f\u0012\b\u0012\u00060 j\u0002`#0N2\u0006\u0010Q\u001a\u00020\u00032\u0006\u0010R\u001a\u00020\u000fH\u0007¢\u0006\u0004\bS\u0010TJ1\u0010V\u001a\u00020\u00052\u0006\u0010U\u001a\u00020\u00032\u0006\u0010\u0015\u001a\u00020\u00032\u0010\b\u0002\u0010\"\u001a\n\u0018\u00010 j\u0004\u0018\u0001`!H\u0007¢\u0006\u0004\bV\u0010WJ7\u0010[\u001a\u00020\u00052\u0012\u0010Y\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X2\b\u00103\u001a\u0004\u0018\u0001022\b\u0010Z\u001a\u0004\u0018\u00010\u0003H\u0002¢\u0006\u0004\b[\u0010\\Jq\u0010c\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010X2\n\u0010?\u001a\u00060 j\u0002`+2\u0006\u00103\u001a\u0002022\n\b\u0002\u0010]\u001a\u0004\u0018\u00010 2\u001a\b\u0002\u0010_\u001a\u0014\u0012\b\u0012\u00060 j\u0002`+\u0012\u0004\u0012\u00020^\u0018\u00010\u00022\n\b\u0002\u0010a\u001a\u0004\u0018\u00010`2\n\b\u0002\u0010b\u001a\u0004\u0018\u00010\u0003H\u0002¢\u0006\u0004\bc\u0010dJ/\u0010i\u001a\u00020\u00052\u0006\u0010e\u001a\u00020\u00032\u0006\u0010f\u001a\u00020\u00172\u0006\u0010g\u001a\u00020\u00172\u0006\u0010h\u001a\u00020\u0017H\u0007¢\u0006\u0004\bi\u0010jJ3\u0010l\u001a\u00020\u00052\u0006\u0010k\u001a\u00020\u00032\u0006\u0010f\u001a\u00020\u00172\u0006\u0010h\u001a\u00020\u00172\n\u0010\"\u001a\u00060 j\u0002`!H\u0007¢\u0006\u0004\bl\u0010mJ\u0017\u0010o\u001a\u00020\u00052\u0006\u0010n\u001a\u00020\u000fH\u0007¢\u0006\u0004\bo\u0010pJ\u001b\u0010r\u001a\u0004\u0018\u00010\u00032\b\u0010q\u001a\u0004\u0018\u00010\u0017H\u0002¢\u0006\u0004\br\u0010HJ\u001b\u0010u\u001a\u00020\u0003*\u00020s2\u0006\u0010t\u001a\u00020\u0017H\u0002¢\u0006\u0004\bu\u0010vJ-\u0010x\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X0w2\n\u0010?\u001a\u00060 j\u0002`+H\u0002¢\u0006\u0004\bx\u0010yJ;\u0010|\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\u001e\u0010{\u001a\u001a\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X\u0012\u0004\u0012\u00020\u00050zH\u0002¢\u0006\u0004\b|\u0010}J\u001a\u0010\u007f\u001a\u0004\u0018\u00010 *\u00060\u0003j\u0002`~H\u0002¢\u0006\u0005\b\u007f\u0010\u0080\u0001J8\u0010\u0083\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X*\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X2\b\u0010\u0082\u0001\u001a\u00030\u0081\u0001H\u0002¢\u0006\u0006\b\u0083\u0001\u0010\u0084\u0001J8\u0010\u0085\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X*\u0004\u0018\u00010\u001b2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010XH\u0002¢\u0006\u0006\b\u0085\u0001\u0010\u0086\u0001J%\u0010\u0085\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X*\u0005\u0018\u00010\u0087\u0001H\u0002¢\u0006\u0006\b\u0085\u0001\u0010\u0088\u0001J7\u0010\u0085\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X*\u00030\u0089\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010XH\u0002¢\u0006\u0006\b\u0085\u0001\u0010\u008a\u0001J9\u0010\u0085\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X*\u0005\u0018\u00010\u008b\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010XH\u0002¢\u0006\u0006\b\u0085\u0001\u0010\u008c\u0001JA\u0010\u0090\u0001\u001a\u00020\u00052\u0012\b\u0002\u0010\u008e\u0001\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`\u008d\u00012\u0010\b\u0002\u0010\"\u001a\n\u0018\u00010 j\u0004\u0018\u0001`!2\u0007\u0010\u008f\u0001\u001a\u00020\u0003H\u0002¢\u0006\u0006\b\u0090\u0001\u0010\u0091\u0001J%\u0010\u0085\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002*\u0005\u0018\u00010\u0092\u0001H\u0002¢\u0006\u0006\b\u0085\u0001\u0010\u0093\u0001J>\u0010\u0096\u0001\u001a\u00020\u00052\u0007\u0010\u0094\u0001\u001a\u00020\u00032\n\u0010$\u001a\u00060 j\u0002`#2\u0015\b\u0002\u0010\u0095\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002H\u0002¢\u0006\u0006\b\u0096\u0001\u0010\u0097\u0001J,\u0010\u0098\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u00022\n\u0010$\u001a\u00060 j\u0002`#H\u0002¢\u0006\u0006\b\u0098\u0001\u0010\u0099\u0001J\u001e\u0010\u009c\u0001\u001a\u0004\u0018\u00010\u00032\b\u0010\u009b\u0001\u001a\u00030\u009a\u0001H\u0002¢\u0006\u0006\b\u009c\u0001\u0010\u009d\u0001J#\u0010\u009e\u0001\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002¢\u0006\u0005\b\u009e\u0001\u0010\u0007J\u001a\u0010¡\u0001\u001a\u00020\u00052\b\u0010 \u0001\u001a\u00030\u009f\u0001¢\u0006\u0006\b¡\u0001\u0010¢\u0001JS\u0010¦\u0001\u001a\u00020\u00052\u000e\u0010\b\u001a\n\u0018\u00010\u0003j\u0004\u0018\u0001`~2\t\u0010£\u0001\u001a\u0004\u0018\u00010\u00032\b\u0010\u0013\u001a\u0004\u0018\u00010\u00032\b\u0010.\u001a\u0004\u0018\u00010\u00032\t\u0010¤\u0001\u001a\u0004\u0018\u00010\u00032\u0007\u0010¥\u0001\u001a\u00020\u000f¢\u0006\u0006\b¦\u0001\u0010§\u0001J!\u0010¨\u0001\u001a\u00020\u00052\u0007\u0010\u009b\u0001\u001a\u00020\u00032\u0006\u0010]\u001a\u00020 ¢\u0006\u0006\b¨\u0001\u0010©\u0001J;\u0010¯\u0001\u001a\u00020\u00052\b\u0010«\u0001\u001a\u00030ª\u00012\b\u0010\u00ad\u0001\u001a\u00030¬\u00012\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0006\b¯\u0001\u0010°\u0001J\u0018\u0010²\u0001\u001a\u00020\u00052\u0007\u0010±\u0001\u001a\u00020\u000f¢\u0006\u0005\b²\u0001\u0010pJ\u0018\u0010³\u0001\u001a\u00020\u00052\u0007\u0010±\u0001\u001a\u00020\u000f¢\u0006\u0005\b³\u0001\u0010pJ\u0019\u0010´\u0001\u001a\u00020\u00052\b\u0010\u001c\u001a\u0004\u0018\u00010\u001b¢\u0006\u0005\b´\u0001\u0010*J\u0018\u0010¶\u0001\u001a\u00020\u00052\u0007\u0010µ\u0001\u001a\u00020\u000f¢\u0006\u0005\b¶\u0001\u0010pJC\u0010¼\u0001\u001a\u00020\u00052\u0007\u0010·\u0001\u001a\u00020\u00032\u0007\u0010¸\u0001\u001a\u00020\u00032\u0007\u0010¹\u0001\u001a\u00020\u00032\u000b\b\u0002\u0010º\u0001\u001a\u0004\u0018\u00010 2\t\b\u0002\u0010»\u0001\u001a\u00020\u000f¢\u0006\u0006\b¼\u0001\u0010½\u0001J\u000f\u0010¾\u0001\u001a\u00020\u0005¢\u0006\u0005\b¾\u0001\u0010LJ\u000f\u0010¿\u0001\u001a\u00020\u0005¢\u0006\u0005\b¿\u0001\u0010LJ\u0017\u0010À\u0001\u001a\u00020\u00052\u0006\u0010\u0010\u001a\u00020\u000f¢\u0006\u0005\bÀ\u0001\u0010pJ\u001a\u0010Á\u0001\u001a\u00020\u00052\b\u0010\u0082\u0001\u001a\u00030\u0081\u0001¢\u0006\u0006\bÁ\u0001\u0010Â\u0001J\u0018\u0010Ä\u0001\u001a\u00020\u00052\u0007\u0010Ã\u0001\u001a\u00020\u0003¢\u0006\u0005\bÄ\u0001\u0010\u000eJ\u001b\u0010Å\u0001\u001a\u00020\u00052\n\b\u0002\u0010\u001c\u001a\u0004\u0018\u00010\u001b¢\u0006\u0005\bÅ\u0001\u0010*JU\u0010Ë\u0001\u001a\u00020\u00052\u0007\u0010Æ\u0001\u001a\u00020\u00032\u0007\u0010Ç\u0001\u001a\u00020\u00032\t\u0010È\u0001\u001a\u0004\u0018\u00010\u00032\u000f\u0010É\u0001\u001a\n\u0012\u0004\u0012\u00020\u0003\u0018\u00010N2\u0015\u0010Ê\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u0002¢\u0006\u0006\bË\u0001\u0010Ì\u0001J\u0018\u0010Í\u0001\u001a\u00020\u00052\u0007\u0010µ\u0001\u001a\u00020\u000f¢\u0006\u0005\bÍ\u0001\u0010pJ\u0019\u0010Î\u0001\u001a\u00020\u00052\b\u0010\u0013\u001a\u0004\u0018\u00010\u0003¢\u0006\u0005\bÎ\u0001\u0010\u000eJ;\u0010Ò\u0001\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\r\u0010Ï\u0001\u001a\b\u0012\u0004\u0012\u0002020N2\u000e\u0010Ñ\u0001\u001a\t\u0012\u0005\u0012\u00030Ð\u00010N¢\u0006\u0006\bÒ\u0001\u0010Ó\u0001J!\u0010Ô\u0001\u001a\u00020\u00052\b\u0010\u001c\u001a\u0004\u0018\u00010\u001b2\u0006\u0010\u0015\u001a\u00020\u0003¢\u0006\u0005\bÔ\u0001\u0010\u001fJ\u0018\u0010Ö\u0001\u001a\u00020\u00052\u0007\u0010Õ\u0001\u001a\u00020\u0003¢\u0006\u0005\bÖ\u0001\u0010\u000eJ*\u0010\u001e\u001a\u00020\u00052\b\u0010Ø\u0001\u001a\u00030×\u00012\b\u00103\u001a\u0004\u0018\u0001022\u0006\u0010\u001d\u001a\u00020\u0003¢\u0006\u0005\b\u001e\u0010Ù\u0001J\"\u0010)\u001a\u00020\u00052\b\u0010Ø\u0001\u001a\u00030×\u00012\b\u00103\u001a\u0004\u0018\u000102¢\u0006\u0005\b)\u0010Ú\u0001J1\u0010Û\u0001\u001a\u00020\u00052\b\u0010\u001c\u001a\u0004\u0018\u00010\u001b2\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0006\bÛ\u0001\u0010Ü\u0001J=\u0010Û\u0001\u001a\u00020\u00052\n\u0010Ø\u0001\u001a\u0005\u0018\u00010×\u00012\b\u00103\u001a\u0004\u0018\u0001022\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0006\bÛ\u0001\u0010Ý\u0001J\u001a\u0010à\u0001\u001a\u00020\u00052\b\u0010ß\u0001\u001a\u00030Þ\u0001¢\u0006\u0006\bà\u0001\u0010á\u0001J\u0018\u0010â\u0001\u001a\u00020\u00052\u0006\u00101\u001a\u000200¢\u0006\u0006\bâ\u0001\u0010ã\u0001J\u0018\u0010å\u0001\u001a\u00020\u00052\u0007\u0010ä\u0001\u001a\u00020\u0003¢\u0006\u0005\bå\u0001\u0010\u000eJ.\u0010è\u0001\u001a\u00020\u00052\b\u0010ç\u0001\u001a\u00030æ\u00012\n\u0010ß\u0001\u001a\u0005\u0018\u00010Þ\u00012\u0006\u0010\u001d\u001a\u00020\u0003¢\u0006\u0006\bè\u0001\u0010é\u0001J\u000f\u0010ê\u0001\u001a\u00020\u0005¢\u0006\u0005\bê\u0001\u0010LJ\u001d\u0010í\u0001\u001a\u00020\u00052\f\u0010ì\u0001\u001a\u00070 j\u0003`ë\u0001¢\u0006\u0005\bí\u0001\u00109J\u000f\u0010î\u0001\u001a\u00020\u0005¢\u0006\u0005\bî\u0001\u0010LJ\u000f\u0010ï\u0001\u001a\u00020\u0005¢\u0006\u0005\bï\u0001\u0010LJ,\u0010ô\u0001\u001a\u00020\u00052\b\u0010ñ\u0001\u001a\u00030ð\u00012\b\u0010ó\u0001\u001a\u00030ò\u00012\u0006\u0010M\u001a\u00020\u0017¢\u0006\u0006\bô\u0001\u0010õ\u0001J<\u0010ø\u0001\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\u000e\u0010÷\u0001\u001a\t\u0012\u0004\u0012\u00020 0ö\u00012\u0006\u0010@\u001a\u00020\u00032\u0006\u00103\u001a\u000202¢\u0006\u0006\bø\u0001\u0010ù\u0001J<\u0010ú\u0001\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\u000e\u0010÷\u0001\u001a\t\u0012\u0004\u0012\u00020 0ö\u00012\u0006\u0010@\u001a\u00020\u00032\u0006\u00103\u001a\u000202¢\u0006\u0006\bú\u0001\u0010ù\u0001J;\u0010ý\u0001\u001a\u00020\u00052\u0007\u0010û\u0001\u001a\u00020\u00032\u0007\u0010ü\u0001\u001a\u00020\u00032\u0017\b\u0002\u0010\u0095\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u0002¢\u0006\u0006\bý\u0001\u0010þ\u0001J\u0018\u0010\u0080\u0002\u001a\u00020\u00052\u0007\u0010ÿ\u0001\u001a\u00020\u0003¢\u0006\u0005\b\u0080\u0002\u0010\u000eJz\u0010\u0083\u0002\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\u0006\u0010b\u001a\u00020\u00032\u0006\u00103\u001a\u0002022\u0016\u0010_\u001a\u0012\u0012\b\u0012\u00060 j\u0002`+\u0012\u0004\u0012\u00020^0\u00022\b\u0010a\u001a\u0004\u0018\u00010`2\b\u0010F\u001a\u0004\u0018\u00010\u00172\u0010\u0010\u0082\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`\u0081\u00022\u000e\u0010'\u001a\n\u0018\u00010 j\u0004\u0018\u0001`&¢\u0006\u0006\b\u0083\u0002\u0010\u0084\u0002J\u0090\u0001\u0010\u0087\u0002\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\u0006\u0010b\u001a\u00020\u00032\u0006\u00103\u001a\u0002022\u0016\u0010_\u001a\u0012\u0012\b\u0012\u00060 j\u0002`+\u0012\u0004\u0012\u00020^0\u00022\t\u0010\u0085\u0002\u001a\u0004\u0018\u00010\u00032\u0013\u0010\u0086\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\b\u0010]\u001a\u0004\u0018\u00010 2\u0010\u0010\u0082\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`\u0081\u00022\u000e\u0010'\u001a\n\u0018\u00010 j\u0004\u0018\u0001`&¢\u0006\u0006\b\u0087\u0002\u0010\u0088\u0002JB\u0010\u008a\u0002\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\b\u0010\u0089\u0002\u001a\u00030\u008b\u00012\b\u00103\u001a\u0004\u0018\u0001022\b\u0010Z\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b\u008a\u0002\u0010\u008b\u0002J7\u0010\u008c\u0002\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\b\u00103\u001a\u0004\u0018\u0001022\b\u0010Z\u001a\u0004\u0018\u00010\u0003¢\u0006\u0005\b\u008c\u0002\u0010\\JB\u0010\u008e\u0002\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\b\u0010\u008d\u0002\u001a\u00030\u0092\u00012\b\u00103\u001a\u0004\u0018\u0001022\b\u0010Z\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b\u008e\u0002\u0010\u008f\u0002J.\u0010\u0090\u0002\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\b\u00103\u001a\u0004\u0018\u000102¢\u0006\u0006\b\u0090\u0002\u0010\u0091\u0002Jc\u0010\u0094\u0002\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\b\u00103\u001a\u0004\u0018\u0001022\u0016\u0010_\u001a\u0012\u0012\b\u0012\u00060 j\u0002`+\u0012\u0004\u0012\u00020^0\u00022\b\u0010a\u001a\u0004\u0018\u00010`2\u0007\u0010\u0092\u0002\u001a\u00020\u000f2\u0010\u0010\u0085\u0002\u001a\u000b\u0018\u00010\u0003j\u0005\u0018\u0001`\u0093\u0002¢\u0006\u0006\b\u0094\u0002\u0010\u0095\u0002J/\u0010\u0097\u0002\u001a\u00020\u00052\u0007\u0010\u0096\u0002\u001a\u00020\u00032\n\u0010?\u001a\u00060 j\u0002`+2\b\u00103\u001a\u0004\u0018\u000102¢\u0006\u0006\b\u0097\u0002\u0010\u0098\u0002JJ\u0010\u009d\u0002\u001a\u00020\u00052\u000b\b\u0002\u0010\u0099\u0002\u001a\u0004\u0018\u00010\u00032\u000b\b\u0002\u0010\u009a\u0002\u001a\u0004\u0018\u00010\u00032\u0012\b\u0002\u0010\u009c\u0002\u001a\u000b\u0018\u00010\u0003j\u0005\u0018\u0001`\u009b\u00022\n\b\u0002\u0010I\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b\u009d\u0002\u0010\u009e\u0002JO\u0010¡\u0002\u001a\u00020\u00052\n\b\u0002\u0010\u0016\u001a\u0004\u0018\u00010\u00032\u000b\b\u0002\u0010\u009f\u0002\u001a\u0004\u0018\u00010\u00172\u000b\b\u0002\u0010 \u0002\u001a\u0004\u0018\u00010\u00032\u000b\b\u0002\u0010\u009a\u0002\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010I\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b¡\u0002\u0010¢\u0002J\u000f\u0010£\u0002\u001a\u00020\u0005¢\u0006\u0005\b£\u0002\u0010LJ\u0018\u0010¤\u0002\u001a\u00020\u00052\u0007\u0010\u009b\u0001\u001a\u00020\u0003¢\u0006\u0005\b¤\u0002\u0010\u000eJ;\u0010©\u0002\u001a\u00020\u00052\b\u0010¦\u0002\u001a\u00030¥\u00022\u0007\u0010§\u0002\u001a\u00020\u00032\t\u0010¨\u0002\u001a\u0004\u0018\u00010\u00172\u000b\b\u0002\u0010ÿ\u0001\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b©\u0002\u0010ª\u0002JB\u0010±\u0002\u001a\u00020\u00052\u0007\u0010«\u0002\u001a\u00020\u000f2\u000b\b\u0002\u0010¬\u0002\u001a\u0004\u0018\u00010\u00032\f\b\u0002\u0010®\u0002\u001a\u0005\u0018\u00010\u00ad\u00022\f\b\u0002\u0010°\u0002\u001a\u0005\u0018\u00010¯\u0002¢\u0006\u0006\b±\u0002\u0010²\u0002J1\u0010´\u0002\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\n\u0010$\u001a\u00060 j\u0002`#2\u0007\u0010³\u0002\u001a\u00020\u0017¢\u0006\u0006\b´\u0002\u0010µ\u0002J\u001b\u0010¶\u0002\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!¢\u0006\u0005\b¶\u0002\u00109J \u0010V\u001a\u00020\u00052\u0006\u0010U\u001a\u00020\u00032\b\u0010¸\u0002\u001a\u00030·\u0002¢\u0006\u0005\bV\u0010¹\u0002J \u0010V\u001a\u00020\u00052\u0006\u0010U\u001a\u00020\u00032\b\u0010»\u0002\u001a\u00030º\u0002¢\u0006\u0005\bV\u0010¼\u0002J \u0010¾\u0002\u001a\u00020\u00052\u0007\u0010½\u0002\u001a\u00020\u00032\u0006\u0010\u0015\u001a\u00020\u0003¢\u0006\u0005\b¾\u0002\u0010\u000bJ#\u0010¾\u0002\u001a\u00020\u00052\u0007\u0010½\u0002\u001a\u00020\u00032\b\u0010»\u0002\u001a\u00030º\u0002¢\u0006\u0006\b¾\u0002\u0010¼\u0002J;\u0010À\u0002\u001a\u00020\u00052\u0006\u0010U\u001a\u00020\u00032\u0006\u0010\u0015\u001a\u00020\u00032\u0007\u0010¿\u0002\u001a\u00020\u00032\u0010\b\u0002\u0010\"\u001a\n\u0018\u00010 j\u0004\u0018\u0001`!¢\u0006\u0006\bÀ\u0002\u0010Á\u0002J\u000f\u0010Â\u0002\u001a\u00020\u0005¢\u0006\u0005\bÂ\u0002\u0010LJ\u000f\u0010Ã\u0002\u001a\u00020\u0005¢\u0006\u0005\bÃ\u0002\u0010LJ\u000f\u0010Ä\u0002\u001a\u00020\u0005¢\u0006\u0005\bÄ\u0002\u0010LJ\u0018\u0010Æ\u0002\u001a\u00020\u00052\u0007\u0010Å\u0002\u001a\u00020\u0003¢\u0006\u0005\bÆ\u0002\u0010\u000eJ!\u0010È\u0002\u001a\u00020\u00052\u0007\u0010Å\u0002\u001a\u00020\u00032\u0007\u0010Ç\u0002\u001a\u00020\u000f¢\u0006\u0005\bÈ\u0002\u0010\u0012J!\u0010Ë\u0002\u001a\u00020\u00052\u0007\u0010É\u0002\u001a\u00020\u00032\u0007\u0010Ê\u0002\u001a\u00020\u000f¢\u0006\u0005\bË\u0002\u0010\u0012J\u0018\u0010Ì\u0002\u001a\u00020\u00052\u0007\u0010¬\u0002\u001a\u00020\u0003¢\u0006\u0005\bÌ\u0002\u0010\u000eJ\u001a\u0010Í\u0002\u001a\u00020\u00052\b\u0010»\u0002\u001a\u00030º\u0002¢\u0006\u0006\bÍ\u0002\u0010Î\u0002J8\u0010Ï\u0002\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\b\u0010»\u0002\u001a\u00030º\u00022\u0010\b\u0002\u0010$\u001a\n\u0018\u00010 j\u0004\u0018\u0001`#¢\u0006\u0006\bÏ\u0002\u0010Ð\u0002J8\u0010Ñ\u0002\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\b\u0010»\u0002\u001a\u00030º\u00022\u0010\b\u0002\u0010$\u001a\n\u0018\u00010 j\u0004\u0018\u0001`#¢\u0006\u0006\bÑ\u0002\u0010Ð\u0002J\u001a\u0010Ò\u0002\u001a\u00020\u00052\b\u0010»\u0002\u001a\u00030º\u0002¢\u0006\u0006\bÒ\u0002\u0010Î\u0002J&\u0010Õ\u0002\u001a\u00020\u00052\u000b\u0010Ó\u0002\u001a\u00060 j\u0002`62\u0007\u0010Ô\u0002\u001a\u00020\u0003¢\u0006\u0006\bÕ\u0002\u0010Ö\u0002J6\u0010Ù\u0002\u001a\u00020\u00052\u0006\u00103\u001a\u0002022\u001c\u0010Ø\u0002\u001a\u0017\u0012\u0012\u0012\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00020×\u0002¢\u0006\u0006\bÙ\u0002\u0010Ú\u0002JD\u0010á\u0002\u001a\u00020\u00052\b\u0010»\u0002\u001a\u00030º\u00022\f\b\u0002\u0010Ü\u0002\u001a\u0005\u0018\u00010Û\u00022\f\b\u0002\u0010Þ\u0002\u001a\u0005\u0018\u00010Ý\u00022\f\b\u0002\u0010à\u0002\u001a\u0005\u0018\u00010ß\u0002¢\u0006\u0006\bá\u0002\u0010â\u0002JV\u0010ã\u0002\u001a\u00020\u00052\b\u0010»\u0002\u001a\u00030º\u00022\f\b\u0002\u0010Ü\u0002\u001a\u0005\u0018\u00010Û\u00022\u0007\u0010¹\u0001\u001a\u00020\u00032\u0007\u0010¸\u0001\u001a\u00020\u00032\f\b\u0002\u0010Þ\u0002\u001a\u0005\u0018\u00010Ý\u00022\f\b\u0002\u0010à\u0002\u001a\u0005\u0018\u00010ß\u0002¢\u0006\u0006\bã\u0002\u0010ä\u0002JF\u0010å\u0002\u001a\u00020\u00052\n\u0010»\u0002\u001a\u0005\u0018\u00010º\u00022\f\b\u0002\u0010Ü\u0002\u001a\u0005\u0018\u00010Û\u00022\f\b\u0002\u0010Þ\u0002\u001a\u0005\u0018\u00010Ý\u00022\f\b\u0002\u0010à\u0002\u001a\u0005\u0018\u00010ß\u0002¢\u0006\u0006\bå\u0002\u0010â\u0002JÍ\u0001\u0010ò\u0002\u001a\u00020\u00052\u0007\u0010æ\u0002\u001a\u00020\u00032\u0010\u0010è\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010é\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010ê\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010ë\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010ì\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010í\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010î\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010ï\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010ð\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u00022\u0010\u0010ñ\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`ç\u0002¢\u0006\u0006\bò\u0002\u0010ó\u0002JS\u0010õ\u0002\u001a\u00020\u00052\n\u0010»\u0002\u001a\u0005\u0018\u00010º\u00022\f\b\u0002\u0010Ü\u0002\u001a\u0005\u0018\u00010Û\u00022\f\b\u0002\u0010à\u0002\u001a\u0005\u0018\u00010ß\u00022\f\b\u0002\u0010Þ\u0002\u001a\u0005\u0018\u00010Ý\u00022\u000b\b\u0002\u0010ô\u0002\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\bõ\u0002\u0010ö\u0002Ja\u0010ù\u0002\u001a\u00020\u00052\u0007\u0010\u009b\u0001\u001a\u00020\u00032\u0007\u0010¸\u0001\u001a\u00020\u00032\u0007\u0010¹\u0001\u001a\u00020\u00032\u0007\u0010÷\u0002\u001a\u00020\u00172\t\b\u0002\u0010»\u0001\u001a\u00020\u000f2\t\b\u0002\u0010ø\u0002\u001a\u00020\u000f2\u0015\u0010Ê\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0001\u0018\u00010\u0002¢\u0006\u0006\bù\u0002\u0010ú\u0002J\"\u0010ý\u0002\u001a\u00020\u00052\u0007\u0010û\u0002\u001a\u00020\u00172\u0007\u0010ü\u0002\u001a\u00020\u0017¢\u0006\u0006\bý\u0002\u0010þ\u0002J+\u0010\u0081\u0003\u001a\u00020\u00052\u0007\u0010±\u0001\u001a\u00020\u000f2\u0007\u0010ÿ\u0002\u001a\u00020\u000f2\u0007\u0010\u0080\u0003\u001a\u00020\u000f¢\u0006\u0006\b\u0081\u0003\u0010\u0082\u0003J\u001d\u0010\u0085\u0003\u001a\u00020\u00052\f\u0010\u0084\u0003\u001a\u00070\u0003j\u0003`\u0083\u0003¢\u0006\u0005\b\u0085\u0003\u0010\u000eJ#\u0010\u0086\u0003\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002¢\u0006\u0005\b\u0086\u0003\u0010\u0007J#\u0010\u0087\u0003\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002¢\u0006\u0005\b\u0087\u0003\u0010\u0007J8\u0010\u0089\u0003\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\u001a\u0010\u0088\u0003\u001a\u0015\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00020×\u0002¢\u0006\u0006\b\u0089\u0003\u0010\u008a\u0003J:\u0010\u008b\u0003\u001a\u00020\u00052\n\u0010$\u001a\u00060 j\u0002`#2\u001c\u0010\u0088\u0003\u001a\u0017\u0012\u0012\u0012\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00020×\u0002¢\u0006\u0006\b\u008b\u0003\u0010\u008a\u0003J:\u0010\u008c\u0003\u001a\u00020\u00052\n\u0010$\u001a\u00060 j\u0002`#2\u001c\u0010\u0088\u0003\u001a\u0017\u0012\u0012\u0012\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00020×\u0002¢\u0006\u0006\b\u008c\u0003\u0010\u008a\u0003J#\u0010\u008e\u0003\u001a\u00020\u00052\b\u0010»\u0002\u001a\u00030º\u00022\u0007\u0010\u008d\u0003\u001a\u00020\u000f¢\u0006\u0006\b\u008e\u0003\u0010\u008f\u0003J$\u0010\u0091\u0003\u001a\u00020\u00052\b\u0010\u0090\u0003\u001a\u00030\u0089\u00012\b\u0010»\u0002\u001a\u00030º\u0002¢\u0006\u0006\b\u0091\u0003\u0010\u0092\u0003J$\u0010\u0097\u0003\u001a\u00020\u00052\b\u0010\u0094\u0003\u001a\u00030\u0093\u00032\b\u0010\u0096\u0003\u001a\u00030\u0095\u0003¢\u0006\u0006\b\u0097\u0003\u0010\u0098\u0003J$\u0010\u009b\u0003\u001a\u00020\u00052\b\u0010\u009a\u0003\u001a\u00030\u0099\u00032\b\u00103\u001a\u0004\u0018\u000102¢\u0006\u0006\b\u009b\u0003\u0010\u009c\u0003JS\u0010¢\u0003\u001a\u00020\u00052\u0015\u0010\u009d\u0003\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00022\u0007\u0010\u009e\u0003\u001a\u00020\u000f2\u0007\u0010\u009f\u0003\u001a\u00020\u000f2\u0007\u0010 \u0003\u001a\u00020\u00172\u0007\u0010¡\u0003\u001a\u00020\u00172\u0006\u0010t\u001a\u00020\u0017¢\u0006\u0006\b¢\u0003\u0010£\u0003J2\u0010¤\u0003\u001a\u00020\u00052\n\u0010$\u001a\u00060 j\u0002`#2\n\u0010\"\u001a\u00060 j\u0002`!2\b\u0010\u0015\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b¤\u0003\u0010¥\u0003Jµ\u0001\u0010¯\u0003\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\u000f\u0010b\u001a\u000b\u0018\u00010\u0003j\u0005\u0018\u0001`¦\u00032\u0006\u00103\u001a\u0002022\u0016\u0010_\u001a\u0012\u0012\b\u0012\u00060 j\u0002`+\u0012\u0004\u0012\u00020^0\u00022\n\b\u0002\u0010]\u001a\u0004\u0018\u00010 2\u0010\u0010\u0085\u0002\u001a\u000b\u0018\u00010\u0003j\u0005\u0018\u0001`\u0093\u00022\b\u0010¨\u0003\u001a\u00030§\u00032\t\u0010©\u0003\u001a\u0004\u0018\u00010\u00172\t\u0010ª\u0003\u001a\u0004\u0018\u00010\u00032\b\u0010\u008d\u0002\u001a\u00030\u0092\u00012\b\u0010¬\u0003\u001a\u00030«\u00032\u0007\u0010\u00ad\u0003\u001a\u00020\u000f2\u000b\b\u0002\u0010®\u0003\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b¯\u0003\u0010°\u0003JI\u0010´\u0003\u001a\u00020\u00052\b\u0010²\u0003\u001a\u00030±\u00032\n\u0010³\u0003\u001a\u0005\u0018\u00010§\u00032\t\u0010ÿ\u0001\u001a\u0004\u0018\u00010\u00032\t\u0010\u0085\u0002\u001a\u0004\u0018\u00010\u00032\u000b\b\u0002\u0010®\u0003\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\b´\u0003\u0010µ\u0003JF\u0010¹\u0003\u001a\u00020\u00052\u0007\u0010ÿ\u0001\u001a\u00020\u00172\n\u0010$\u001a\u00060 j\u0002`#2\f\u0010·\u0003\u001a\u00070 j\u0003`¶\u00032\u0011\u0010¸\u0003\u001a\f\u0012\b\u0012\u00060 j\u0002`!0N¢\u0006\u0006\b¹\u0003\u0010º\u0003J#\u0010»\u0003\u001a\u00020\u00052\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002¢\u0006\u0005\b»\u0003\u0010\u0007JE\u0010Á\u0003\u001a\u00020\u00052\u0007\u0010¼\u0003\u001a\u00020\u000f2\t\u0010½\u0003\u001a\u0004\u0018\u00010\u00032\t\u0010¾\u0003\u001a\u0004\u0018\u00010\u00032\t\u0010¿\u0003\u001a\u0004\u0018\u00010\u00032\t\u0010À\u0003\u001a\u0004\u0018\u00010\u0003¢\u0006\u0006\bÁ\u0003\u0010Â\u0003J;\u0010Ä\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X2\t\u0010Ã\u0003\u001a\u0004\u0018\u00010\u001b2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010X¢\u0006\u0006\bÄ\u0003\u0010\u0086\u0001J@\u0010Æ\u0003\u001a\u00020\u00052\u0007\u0010\u0094\u0001\u001a\u00020\u00032\u0007\u0010Å\u0003\u001a\u00020\u00032\u0006\u0010f\u001a\u00020\u00032\u0014\b\u0002\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002¢\u0006\u0006\bÆ\u0003\u0010Ç\u0003JG\u0010Ë\u0003\u001a\u00020\u00052\b\u0010É\u0003\u001a\u00030È\u00032\n\u0010»\u0002\u001a\u0005\u0018\u00010º\u00022\u0014\u0010\u0004\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00022\t\b\u0002\u0010Ê\u0003\u001a\u00020\u000f¢\u0006\u0006\bË\u0003\u0010Ì\u0003JE\u0010Í\u0003\u001a\u00020\u00052\b\u0010É\u0003\u001a\u00030È\u00032\n\u0010»\u0002\u001a\u0005\u0018\u00010º\u00022\u0014\u0010\u0004\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00022\u0007\u0010Ê\u0003\u001a\u00020\u000f¢\u0006\u0006\bÍ\u0003\u0010Ì\u0003JY\u0010Ð\u0003\u001a\u00020\u00052\b\u0010É\u0003\u001a\u00030È\u00032\u0007\u0010Î\u0003\u001a\u00020\u00172\t\u0010Ï\u0003\u001a\u0004\u0018\u00010\u00172\n\u0010»\u0002\u001a\u0005\u0018\u00010º\u00022\u0014\u0010\u0004\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00022\u0007\u0010Ê\u0003\u001a\u00020\u000f¢\u0006\u0006\bÐ\u0003\u0010Ñ\u0003JQ\u0010Ò\u0003\u001a\u00020\u00052\b\u0010É\u0003\u001a\u00030È\u00032\n\u0010»\u0002\u001a\u0005\u0018\u00010º\u00022\n\u0010¸\u0002\u001a\u0005\u0018\u00010·\u00022\u0007\u0010Î\u0003\u001a\u00020\u00172\u0014\u0010\u0004\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0006\bÒ\u0003\u0010Ó\u0003J\u0018\u0010Ô\u0003\u001a\u00020\u00052\u0007\u0010\u009b\u0001\u001a\u00020\u0003¢\u0006\u0005\bÔ\u0003\u0010\u000eJg\u0010Ý\u0003\u001a\u00020\u00052\b\u0010Ö\u0003\u001a\u00030Õ\u00032\u0007\u0010×\u0003\u001a\u00020\u00172\u0007\u0010Ø\u0003\u001a\u00020\u00172\u0007\u0010Ù\u0003\u001a\u00020\u00172\u0007\u0010Ú\u0003\u001a\u00020\u000f2\u0007\u0010Û\u0003\u001a\u00020\u000f2\u0007\u0010Ü\u0003\u001a\u00020\u000f2\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0006\bÝ\u0003\u0010Þ\u0003Jt\u0010ã\u0003\u001a\u00020\u00052\u0007\u0010×\u0003\u001a\u00020\u00172\u0007\u0010Ø\u0003\u001a\u00020\u00172\u0007\u0010Ù\u0003\u001a\u00020\u00172\u0007\u0010Ú\u0003\u001a\u00020\u000f2\u0007\u0010Û\u0003\u001a\u00020\u000f2\b\u0010à\u0003\u001a\u00030ß\u00032\u000b\u0010á\u0003\u001a\u00060 j\u0002`62\u0007\u0010â\u0003\u001a\u00020\u00172\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0006\bã\u0003\u0010ä\u0003J\u001b\u0010å\u0003\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!¢\u0006\u0005\bå\u0003\u00109J\u001d\u0010æ\u0003\u001a\u00020\u00052\f\u0010\u008e\u0001\u001a\u00070 j\u0003`\u008d\u0001¢\u0006\u0005\bæ\u0003\u00109J\u001b\u0010ç\u0003\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!¢\u0006\u0005\bç\u0003\u00109J$\u0010è\u0003\u001a\u00020\u00052\u0007\u0010±\u0001\u001a\u00020\u000f2\t\u0010\u0015\u001a\u0005\u0018\u00010º\u0002¢\u0006\u0006\bè\u0003\u0010é\u0003J!\u0010ë\u0003\u001a\u00020\u00052\u0007\u0010\u008f\u0001\u001a\u00020\u00032\u0007\u0010ê\u0003\u001a\u00020\u000f¢\u0006\u0005\bë\u0003\u0010\u0012J!\u0010ì\u0003\u001a\u00020\u00052\u0007\u0010\u008f\u0001\u001a\u00020\u00032\u0007\u0010ê\u0003\u001a\u00020\u000f¢\u0006\u0005\bì\u0003\u0010\u0012J\u0018\u0010í\u0003\u001a\u00020\u00052\u0007\u0010ê\u0003\u001a\u00020\u000f¢\u0006\u0005\bí\u0003\u0010pJ7\u0010ð\u0003\u001a\u00020\u00052\b\u0010ï\u0003\u001a\u00030î\u00032\u0007\u0010\u009b\u0001\u001a\u00020\u00032\b\u0010\u0015\u001a\u0004\u0018\u00010\u00032\b\u0010»\u0002\u001a\u00030º\u0002¢\u0006\u0006\bð\u0003\u0010ñ\u0003J0\u0010ò\u0003\u001a\u00020\u00052\f\u0010\u008e\u0001\u001a\u00070 j\u0003`\u008d\u00012\u0006\u0010\u0015\u001a\u00020\u00032\b\u0010»\u0002\u001a\u00030º\u0002¢\u0006\u0006\bò\u0003\u0010ó\u0003J&\u0010ô\u0003\u001a\u00020\u00052\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0005\bô\u0003\u0010\u0007J9\u0010ö\u0003\u001a\u00020\u00052\u0007\u0010ì\u0001\u001a\u00020 2\u0007\u0010õ\u0003\u001a\u00020 2\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u0002¢\u0006\u0006\bö\u0003\u0010÷\u0003J4\u0010ú\u0003\u001a\u00020\u00052\u0007\u0010ì\u0001\u001a\u00020 2\u0007\u0010õ\u0003\u001a\u00020 2\u0007\u0010ø\u0003\u001a\u00020\u00032\u0007\u0010ù\u0003\u001a\u00020\u000f¢\u0006\u0006\bú\u0003\u0010û\u0003J\u000f\u0010ü\u0003\u001a\u00020\u0005¢\u0006\u0005\bü\u0003\u0010LJ\u0018\u0010þ\u0003\u001a\u00020\u00052\u0007\u0010ý\u0003\u001a\u00020 ¢\u0006\u0005\bþ\u0003\u00109J\u000f\u0010ÿ\u0003\u001a\u00020\u0005¢\u0006\u0005\bÿ\u0003\u0010LJ\u000f\u0010\u0080\u0004\u001a\u00020\u0005¢\u0006\u0005\b\u0080\u0004\u0010LJ\u000f\u0010\u0081\u0004\u001a\u00020\u0005¢\u0006\u0005\b\u0081\u0004\u0010LJ\u0018\u0010\u0083\u0004\u001a\u00020\u00052\u0007\u0010\u0082\u0004\u001a\u00020\u0003¢\u0006\u0005\b\u0083\u0004\u0010\u000eJ'\u0010\u0086\u0004\u001a\u00020\u00052\f\u0010\u0085\u0004\u001a\u00070 j\u0003`\u0084\u00042\u0007\u0010\u0082\u0004\u001a\u00020\u0003¢\u0006\u0006\b\u0086\u0004\u0010Ö\u0002J@\u0010\u008a\u0004\u001a\u00020\u00052\u0013\u0010®\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\u0007\u0010\u0087\u0004\u001a\u00020\u00032\u0007\u0010\u0088\u0004\u001a\u00020\u00172\u0007\u0010\u0089\u0004\u001a\u00020\u0017¢\u0006\u0006\b\u008a\u0004\u0010\u008b\u0004Jh\u0010\u008e\u0004\u001a\u00020\u00052\u0013\u0010®\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\u0007\u0010\u0087\u0004\u001a\u00020\u00032\u0007\u0010\u0088\u0004\u001a\u00020\u00172\u0007\u0010\u0089\u0004\u001a\u00020\u00172\t\u0010\u008c\u0004\u001a\u0004\u0018\u00010\u00032\t\u0010\u008d\u0004\u001a\u0004\u0018\u00010\u00032\u0010\u0010\u0085\u0004\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`\u0084\u0004¢\u0006\u0006\b\u008e\u0004\u0010\u008f\u0004JD\u0010\u0093\u0004\u001a\u00020\u00052\u0007\u0010\u0090\u0004\u001a\u00020\u00032\n\u0010\"\u001a\u00060 j\u0002`!2\t\u0010ÿ\u0001\u001a\u0004\u0018\u00010\u00032\t\u0010\u0091\u0004\u001a\u0004\u0018\u00010\u00032\u0007\u0010\u0092\u0004\u001a\u00020\u000f¢\u0006\u0006\b\u0093\u0004\u0010\u0094\u0004J\u001b\u0010\u0096\u0004\u001a\u00020\u00052\t\u0010\u0095\u0004\u001a\u0004\u0018\u00010\u000f¢\u0006\u0006\b\u0096\u0004\u0010\u0097\u0004JL\u0010\u0099\u0004\u001a\u00020\u00052\b\u0010\u009b\u0001\u001a\u00030\u0098\u00042\f\b\u0002\u0010»\u0002\u001a\u0005\u0018\u00010º\u00022\u0014\b\u0002\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u00022\f\b\u0002\u0010¸\u0002\u001a\u0005\u0018\u00010·\u0002¢\u0006\u0006\b\u0099\u0004\u0010\u009a\u0004JZ\u0010 \u0004\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\f\u0010\u009c\u0004\u001a\u00070 j\u0003`\u009b\u00042\u0007\u0010Ü\u0003\u001a\u00020\u000f2\u0007\u0010\u009d\u0004\u001a\u00020\u000f2\u0007\u0010\u009e\u0004\u001a\u00020\u000f2\u0013\u0010\u009f\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002¢\u0006\u0006\b \u0004\u0010¡\u0004J-\u0010¢\u0004\u001a\u00020\u00052\u0006\u0010\"\u001a\u00020 2\u0013\u0010\u009f\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u00010\u0002¢\u0006\u0006\b¢\u0004\u0010£\u0004J\u001b\u0010¤\u0004\u001a\u00020\u00052\n\u0010$\u001a\u00060 j\u0002`#¢\u0006\u0005\b¤\u0004\u00109J\u001b\u0010¥\u0004\u001a\u00020\u00052\n\u0010$\u001a\u00060 j\u0002`#¢\u0006\u0005\b¥\u0004\u00109J0\u0010¦\u0004\u001a\u00020\u00052\u0015\u0010®\u0001\u001a\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00022\u0007\u0010\u009b\u0001\u001a\u00020\u0003¢\u0006\u0006\b¦\u0004\u0010§\u0004J;\u0010©\u0004\u001a\u00020\u00052\u0007\u0010¨\u0004\u001a\u00020\u000f2\u0010\u0010\u0082\u0002\u001a\u000b\u0018\u00010 j\u0005\u0018\u0001`\u0081\u00022\u000e\u0010\"\u001a\n\u0018\u00010 j\u0004\u0018\u0001`!¢\u0006\u0006\b©\u0004\u0010ª\u0004J\u000f\u0010«\u0004\u001a\u00020\u0005¢\u0006\u0005\b«\u0004\u0010LJ%\u0010\u00ad\u0004\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\u0007\u0010¬\u0004\u001a\u00020\u0017¢\u0006\u0006\b\u00ad\u0004\u0010®\u0004J[\u0010±\u0004\u001a\u00020\u00052\n\u0010?\u001a\u00060 j\u0002`+2\u000f\u0010b\u001a\u000b\u0018\u00010\u0003j\u0005\u0018\u0001`¦\u00032\u0010\u0010\u0085\u0002\u001a\u000b\u0018\u00010\u0003j\u0005\u0018\u0001`\u0093\u00022\u0006\u00103\u001a\u0002022\b\u0010¯\u0004\u001a\u00030\u009a\u00012\b\u0010°\u0004\u001a\u00030\u009a\u0001¢\u0006\u0006\b±\u0004\u0010²\u0004J\u001a\u0010µ\u0004\u001a\u00020\u00052\b\u0010´\u0004\u001a\u00030³\u0004¢\u0006\u0006\bµ\u0004\u0010¶\u0004J=\u0010º\u0004\u001a\u00020\u00052\u0007\u0010·\u0004\u001a\u00020 2\u0011\b\u0002\u0010¸\u0004\u001a\n\u0012\u0004\u0012\u00020 \u0018\u00010N2\u0007\u0010¹\u0004\u001a\u00020\u000f2\u0006\u0010\u0015\u001a\u00020\u0003¢\u0006\u0006\bº\u0004\u0010»\u0004J)\u0010½\u0004\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\u000b\u0010¼\u0004\u001a\u00060 j\u0002`+¢\u0006\u0006\b½\u0004\u0010¾\u0004J)\u0010¿\u0004\u001a\u00020\u00052\n\u0010\"\u001a\u00060 j\u0002`!2\u000b\u0010¼\u0004\u001a\u00060 j\u0002`+¢\u0006\u0006\b¿\u0004\u0010¾\u0004J\u001f\u0010À\u0004\u001a\u00020\u00052\u0006\u0010I\u001a\u00020\u00032\u0006\u0010\u0015\u001a\u00020\u0003¢\u0006\u0005\bÀ\u0004\u0010\u000bJ \u0010Á\u0004\u001a\u00020\u00052\u0006\u0010I\u001a\u00020\u00032\u0007\u0010\u0099\u0002\u001a\u00020\u0003¢\u0006\u0005\bÁ\u0004\u0010\u000bJ\u0018\u0010Â\u0004\u001a\u00020\u00052\u0007\u0010\u009b\u0001\u001a\u00020\u0003¢\u0006\u0005\bÂ\u0004\u0010\u000eJ:\u0010Æ\u0004\u001a\u00020\u00052\u0007\u0010Ã\u0004\u001a\u00020\u00032\f\u0010·\u0003\u001a\u00070 j\u0003`¶\u00032\b\u0010Ä\u0004\u001a\u00030¥\u00022\u0007\u0010Å\u0004\u001a\u00020\u0003¢\u0006\u0006\bÆ\u0004\u0010Ç\u0004J\u000f\u0010È\u0004\u001a\u00020\u0005¢\u0006\u0005\bÈ\u0004\u0010LR#\u0010Î\u0004\u001a\u00030É\u00048B@\u0002X\u0082\u0084\u0002¢\u0006\u0010\n\u0006\bÊ\u0004\u0010Ë\u0004\u001a\u0006\bÌ\u0004\u0010Í\u0004R\u0019\u0010Ï\u0004\u001a\u00020\u00038\u0006@\u0006X\u0086T¢\u0006\b\n\u0006\bÏ\u0004\u0010Ð\u0004R\u001f\u0010Ò\u0004\u001a\u00030Ñ\u00048\u0006@\u0006¢\u0006\u0010\n\u0006\bÒ\u0004\u0010Ó\u0004\u001a\u0006\bÔ\u0004\u0010Õ\u0004R\u0019\u0010Ö\u0004\u001a\u00020\u00178\u0002@\u0002X\u0082T¢\u0006\b\n\u0006\bÖ\u0004\u0010×\u0004R \u0010Ø\u0004\u001a\u00020 8\u0006@\u0006X\u0086T¢\u0006\u000f\n\u0006\bØ\u0004\u0010Ù\u0004\u0012\u0005\bÚ\u0004\u0010LR\u0019\u0010Û\u0004\u001a\u00020\u00038\u0006@\u0006X\u0086T¢\u0006\b\n\u0006\bÛ\u0004\u0010Ð\u0004R\u0019\u0010Ü\u0004\u001a\u00020\u00038\u0006@\u0006X\u0086T¢\u0006\b\n\u0006\bÜ\u0004\u0010Ð\u0004R\u0019\u0010Ý\u0004\u001a\u00020 8\u0006@\u0006X\u0086T¢\u0006\b\n\u0006\bÝ\u0004\u0010Ù\u0004R\u0019\u0010Þ\u0004\u001a\u00020 8\u0006@\u0006X\u0086T¢\u0006\b\n\u0006\bÞ\u0004\u0010Ù\u0004¨\u0006â\u0004"}, d2 = {"Lcom/discord/utilities/analytics/AnalyticsTracker;", "", "", "", "properties", "", "appNotificationClicked", "(Ljava/util/Map;)V", "fingerprint", "droppedFingerprint", "externalFingerprintDropped", "(Ljava/lang/String;Ljava/lang/String;)V", "tutorial", "showTutorial", "(Ljava/lang/String;)V", "", "acknowledged", "closeTutorial", "(Ljava/lang/String;Z)V", "inviteCode", "inviteOpened", ModelAuditLogEntry.CHANGE_KEY_LOCATION, "errorMessage", "", "errorCode", "inviteResolveFailed", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;)V", "Lcom/discord/models/domain/ModelInvite;", "invite", "source", "inviteCopied", "(Lcom/discord/models/domain/ModelInvite;Ljava/lang/String;)V", "", "Lcom/discord/primitives/GuildId;", "guildId", "Lcom/discord/primitives/ChannelId;", "channelId", "inviteChannelType", "Lcom/discord/primitives/GuildScheduledEventId;", "guildScheduledEventId", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Long;)V", "inviteShareClicked", "(Lcom/discord/models/domain/ModelInvite;)V", "Lcom/discord/primitives/UserId;", "inviterId", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Long;)V", "guildTemplateCode", "guildTemplateResolveFailed", "Lcom/discord/models/domain/ModelGift;", "gift", "Lcom/discord/api/channel/Channel;", "channel", "openGiftModal", "(Lcom/discord/models/domain/ModelGift;Lcom/discord/api/channel/Channel;Ljava/lang/String;)V", "Lcom/discord/primitives/Timestamp;", "lastLogoutTs", "appLandingViewed", "(J)V", "readyPayloadReceived", "mimeType", "totalAttachments", "addAttachment", "(Ljava/lang/String;Ljava/lang/String;I)V", "meId", "inputMode", "Lkotlin/Pair;", "Lcom/discord/utilities/analytics/ThrottleKey;", "throttleKey", "trackUserVoiceEvent", "(Lcom/discord/api/channel/Channel;JLjava/lang/String;Lkotlin/Pair;)V", "networkType", "getNetworkTypeAnalyticsValue", "(Ljava/lang/Integer;)Ljava/lang/String;", "platformType", "connectedAccountViewed", "nearbyConnected", "()V", "index", "", "optionDescriptions", "channelIds", ModelAuditLogEntry.CHANGE_KEY_DESCRIPTION, "hasCustomEmojis", "welcomeScreenChannelSelected", "(IJLjava/util/List;Ljava/util/List;Ljava/lang/String;Z)V", "modalName", "openModal", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)V", "", "mutableProperties", "cloudflareBestRegion", "addVoiceConnectionProperties", "(Ljava/util/Map;Lcom/discord/api/channel/Channel;Ljava/lang/String;)V", "durationMs", "Lcom/discord/api/voice/state/VoiceState;", "guildVoiceStates", "Lco/discord/media_engine/VideoInputDeviceDescription;", "videoInputDevice", "rtcConnectionId", "getVoiceChannelProperties", "(JLcom/discord/api/channel/Channel;Ljava/lang/Long;Ljava/util/Map;Lco/discord/media_engine/VideoInputDeviceDescription;Ljava/lang/String;)Ljava/util/Map;", "experimentName", "revision", "population", "bucket", "userExperimentTriggered", "(Ljava/lang/String;III)V", ModelAuditLogEntry.CHANGE_KEY_NAME, "guildExperimentTriggered", "(Ljava/lang/String;IIJ)V", "isEnabled", "overlayToggled", "(Z)V", "messageNotifications", "getAnalyticsValueForNotificationFrequency", "Lcom/discord/api/thread/ThreadMemberFlags;", "flags", "getAnalyticsValueForThreadNotificationFrequency", "(Lcom/discord/api/thread/ThreadMemberFlags;I)Ljava/lang/String;", "Lrx/Observable;", "getGameProperties", "(J)Lrx/Observable;", "Lkotlin/Function1;", "onGameProps", "withGameProperties", "(JLkotlin/jvm/functions/Function1;)V", "Lcom/discord/primitives/FingerPrint;", "toFingerprintNumber", "(Ljava/lang/String;)Ljava/lang/Long;", "Landroid/net/Uri;", NotificationCompat.MessagingStyle.Message.KEY_DATA_URI, "insertUriProperties", "(Ljava/util/Map;Landroid/net/Uri;)Ljava/util/Map;", "toProperties", "(Lcom/discord/models/domain/ModelInvite;Ljava/util/Map;)Ljava/util/Map;", "Lcom/discord/models/domain/ModelSku;", "(Lcom/discord/models/domain/ModelSku;)Ljava/util/Map;", "Lcom/discord/widgets/user/WidgetUserSetCustomStatusViewModel$FormState;", "(Lcom/discord/widgets/user/WidgetUserSetCustomStatusViewModel$FormState;Ljava/util/Map;)Ljava/util/Map;", "Lcom/discord/rtcconnection/mediaengine/MediaEngine$AudioInfo;", "(Lcom/discord/rtcconnection/mediaengine/MediaEngine$AudioInfo;Ljava/util/Map;)Ljava/util/Map;", "Lcom/discord/primitives/StickerPackId;", "stickerPackId", "tab", "expressionPickerCategorySelected", "(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/String;)V", "Lcom/discord/stores/StoreMediaSettings$VoiceConfiguration;", "(Lcom/discord/stores/StoreMediaSettings$VoiceConfiguration;)Ljava/util/Map;", "event", "extraProperties", "trackStageChannelEvent", "(Ljava/lang/String;JLjava/util/Map;)V", "getStageChannelMetadata", "(J)Ljava/util/Map;", "Lcom/discord/rtcconnection/audio/DiscordAudioManager$DeviceTypes;", "type", "audioOutputDeviceTypeToString", "(Lcom/discord/rtcconnection/audio/DiscordAudioManager$DeviceTypes;)Ljava/lang/String;", "appNotificationDropped", "Lcom/adjust/sdk/AdjustAttribution;", "attribution", "attributionChange", "(Lcom/adjust/sdk/AdjustAttribution;)V", "attemptId", "authToken", "isBackgrounded", "externalDynamicLinkReceived", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V", "externalViewClosed", "(Ljava/lang/String;J)V", "Landroid/content/Intent;", "intent", "Lcom/discord/utilities/intent/RouteHandlers$AnalyticsMetadata;", "metadata", "snapshotProperties", "deepLinkReceived", "(Landroid/content/Intent;Lcom/discord/utilities/intent/RouteHandlers$AnalyticsMetadata;Ljava/util/Map;)V", "enabled", "updateNotifications", "updateNotificationsInApp", "loginViewed", "isSuccessful", "loginAttempt", "flowType", "fromStep", "toStep", "fromStepStartTime", "skip", "newUserOnboarding", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)V", "appCrashed", "showFirstServerTipTutorial", "closeFirstServerTipTutorial", "externalShare", "(Landroid/net/Uri;)V", "url", "unhandledUrl", "registerViewed", "step", "actionType", "identityType", "details", "additionalProps", "registerTransition", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/Map;)V", "registered", "impressionInviteAccept", "channelSuggestions", "Lcom/discord/models/user/User;", "userSuggestions", "inviteSuggestionOpened", "(JLjava/util/List;Ljava/util/List;)V", "inviteResolved", "stacktrace", "appExceptionThrown", "Lcom/discord/widgets/guilds/invite/GuildInvite;", "guildInvite", "(Lcom/discord/widgets/guilds/invite/GuildInvite;Lcom/discord/api/channel/Channel;Ljava/lang/String;)V", "(Lcom/discord/widgets/guilds/invite/GuildInvite;Lcom/discord/api/channel/Channel;)V", "inviteSent", "(Lcom/discord/models/domain/ModelInvite;Ljava/util/Map;)V", "(Lcom/discord/widgets/guilds/invite/GuildInvite;Lcom/discord/api/channel/Channel;Ljava/util/Map;)V", "Lcom/discord/models/domain/ModelGuildTemplate;", "guildTemplate", "guildTemplateResolved", "(Lcom/discord/models/domain/ModelGuildTemplate;)V", "giftResolved", "(Lcom/discord/models/domain/ModelGift;)V", "giftCode", "giftResolvedFailed", "Lcom/discord/widgets/guilds/create/StockGuildTemplate;", "stockGuildTemplate", "createGuildViewed", "(Lcom/discord/widgets/guilds/create/StockGuildTemplate;Lcom/discord/models/domain/ModelGuildTemplate;Ljava/lang/String;)V", "joinGuildViewed", "Lcom/discord/primitives/ApplicationId;", "applicationId", "oauth2AuthorizedViewed", "quickSwitcherOpen", "appFirstLogin", "Lcom/discord/widgets/user/search/WidgetGlobalSearchModel;", "model", "Lcom/discord/widgets/user/search/WidgetGlobalSearchModel$ItemDataPayload;", "selected", "quickSwitcherSelect", "(Lcom/discord/widgets/user/search/WidgetGlobalSearchModel;Lcom/discord/widgets/user/search/WidgetGlobalSearchModel$ItemDataPayload;I)V", "", "speakingList", "userSpeaking", "(JLjava/util/Set;Ljava/lang/String;Lcom/discord/api/channel/Channel;)V", "userListening", "settingsType", "pane", "settingsPaneViewed", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V", ModelAuditLogEntry.CHANGE_KEY_REASON, "captchaFailed", "Lcom/discord/primitives/StageInstanceId;", "stageInstanceId", "voiceChannelJoin", "(JLjava/lang/String;Lcom/discord/api/channel/Channel;Ljava/util/Map;Lco/discord/media_engine/VideoInputDeviceDescription;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Long;)V", "mediaSessionId", "voiceProps", "voiceChannelLeave", "(JLjava/lang/String;Lcom/discord/api/channel/Channel;Ljava/util/Map;Ljava/lang/String;Ljava/util/Map;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;)V", "audioInfo", "voiceConnectionSuccess", "(Ljava/util/Map;Lcom/discord/rtcconnection/mediaengine/MediaEngine$AudioInfo;Lcom/discord/api/channel/Channel;Ljava/lang/String;)V", "voiceConnectionFailure", "voiceConfig", "voiceDisconnect", "(Ljava/util/Map;Lcom/discord/stores/StoreMediaSettings$VoiceConfiguration;Lcom/discord/api/channel/Channel;Ljava/lang/String;)V", "mediaSessionJoined", "(Ljava/util/Map;Lcom/discord/api/channel/Channel;)V", "isScreenSharing", "Lcom/discord/primitives/MediaSessionId;", "videoInputsUpdate", "(JLcom/discord/api/channel/Channel;Ljava/util/Map;Lco/discord/media_engine/VideoInputDeviceDescription;ZLjava/lang/String;)V", "videoLayout", "videoLayoutToggled", "(Ljava/lang/String;JLcom/discord/api/channel/Channel;)V", "previousStep", "currentStep", "Lcom/discord/primitives/SessionId;", "sessionId", "accountLinkStep", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "statusCode", "linkMethod", "accountLinkFailed", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "friendsListViewed", "friendAddViewed", "", "query", "username", "discriminator", "friendRequestFailed", "(Ljava/lang/CharSequence;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;)V", "profileHasPremiumCustomization", "gameName", "Lcom/discord/api/activity/ActivityPlatform;", "gamePlatform", "Lcom/discord/models/member/GuildMember;", "guildMember", "openUserSheet", "(ZLjava/lang/String;Lcom/discord/api/activity/ActivityPlatform;Lcom/discord/models/member/GuildMember;)V", "channelType", "openCallFeedbackSheet", "(JJI)V", "openGuildProfileSheet", "Lcom/discord/utilities/analytics/Traits$Source;", "sourceTrait", "(Ljava/lang/String;Lcom/discord/utilities/analytics/Traits$Source;)V", "Lcom/discord/utilities/analytics/Traits$Location;", "locationTrait", "(Ljava/lang/String;Lcom/discord/utilities/analytics/Traits$Location;)V", "popoutName", "openPopout", "dismissType", "dismissModal", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)V", "reviewRequestTriggered", "reviewRequestAccepted", "reviewRequestDismissed", "permissionType", "permissionsRequested", "granted", "permissionsAcked", "trackId", "hasImages", "activityUpdatedSpotify", "launchGame", "premiumSettingsOpened", "(Lcom/discord/utilities/analytics/Traits$Location;)V", "guildBoostPromotionOpened", "(JLcom/discord/utilities/analytics/Traits$Location;Ljava/lang/Long;)V", "guildBoostPromotionClosed", "upgradePremiumYearlyClosed", "dob", "sourcePage", "ageGateSubmitted", "(JLjava/lang/String;)V", "Lkotlin/Function0;", "propertyProvider", "ackMessage", "(Lcom/discord/api/channel/Channel;Lkotlin/jvm/functions/Function0;)V", "Lcom/discord/utilities/analytics/Traits$Subscription;", "subscriptionTrait", "Lcom/discord/utilities/analytics/Traits$StoreSku;", "storeSkuTrait", "Lcom/discord/utilities/analytics/Traits$Payment;", "paymentTrait", "paymentFlowStarted", "(Lcom/discord/utilities/analytics/Traits$Location;Lcom/discord/utilities/analytics/Traits$Subscription;Lcom/discord/utilities/analytics/Traits$StoreSku;Lcom/discord/utilities/analytics/Traits$Payment;)V", "paymentFlowStep", "(Lcom/discord/utilities/analytics/Traits$Location;Lcom/discord/utilities/analytics/Traits$Subscription;Ljava/lang/String;Ljava/lang/String;Lcom/discord/utilities/analytics/Traits$StoreSku;Lcom/discord/utilities/analytics/Traits$Payment;)V", "paymentFlowFailed", "eventType", "Lcom/discord/utilities/time/ClockMilliseconds;", "gatewayConnection", "gatewayHello", "voiceConnection", "streamRequested", "streamConnection", "streamFirstFrame", "videoFirstFrame", "mediaEngineConnection", "connectionVideoFirstFrame", "connectionStreamFirstFrame", "videoEventTimes", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;)V", "paymentType", "paymentFlowCompleted", "(Lcom/discord/utilities/analytics/Traits$Location;Lcom/discord/utilities/analytics/Traits$Subscription;Lcom/discord/utilities/analytics/Traits$Payment;Lcom/discord/utilities/analytics/Traits$StoreSku;Ljava/lang/String;)V", "secondsOnFromStep", "back", "relationshipSyncFlow", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZZLjava/util/Map;)V", "numWords", "numChars", "nameSubmitted", "(II)V", "phoneDiscoverable", "emailDiscoverable", "contactSyncToggled", "(ZZZ)V", "Lcom/discord/primitives/SurveyId;", "surveyId", "surveyViewed", "overlayVoiceOpened", "overlayVoiceClosed", "lazyPropertyProvider", "guildViewed", "(JLkotlin/jvm/functions/Function0;)V", "channelOpened", "textInVoiceOpened", "hasCustomStatus", "openUserStatusSheet", "(Lcom/discord/utilities/analytics/Traits$Location;Z)V", "formState", "customStatusUpdated", "(Lcom/discord/widgets/user/WidgetUserSetCustomStatusViewModel$FormState;Lcom/discord/utilities/analytics/Traits$Location;)V", "Landroid/content/Context;", "context", "Lcom/discord/utilities/fcm/NotificationClient$SettingsV2;", "notificationSettings", "notificationPermissionStatus", "(Landroid/content/Context;Lcom/discord/utilities/fcm/NotificationClient$SettingsV2;)V", "Lcom/discord/models/domain/ModelNotificationSettings;", "userGuildSettings", "notificationSettingsUpdated", "(Lcom/discord/models/domain/ModelNotificationSettings;Lcom/discord/api/channel/Channel;)V", "threadProperties", "hasInteractedWith", "parentIsMuted", "parentNotificationSetting", "oldFlags", "threadNotificationSettingsUpdated", "(Ljava/util/Map;ZZIII)V", "threadCreationStarted", "(JJLjava/lang/String;)V", "Lcom/discord/primitives/RtcConnectionId;", "Lcom/discord/widgets/voice/feedback/FeedbackRating;", "feedbackRating", "reasonCode", "reasonDescription", "Lcom/discord/rtcconnection/audio/DiscordAudioManager$AudioDevice;", "audioOutputDevice", "videoHardwareScalingEnabled", "issueDetails", "callReportProblem", "(JLjava/lang/String;Lcom/discord/api/channel/Channel;Ljava/util/Map;Ljava/lang/Long;Ljava/lang/String;Lcom/discord/widgets/voice/feedback/FeedbackRating;Ljava/lang/Integer;Ljava/lang/String;Lcom/discord/stores/StoreMediaSettings$VoiceConfiguration;Lcom/discord/rtcconnection/audio/DiscordAudioManager$AudioDevice;ZLjava/lang/String;)V", "Lcom/discord/models/domain/ModelApplicationStream;", "stream", "rating", "reportStreamProblem", "(Lcom/discord/models/domain/ModelApplicationStream;Lcom/discord/widgets/voice/feedback/FeedbackRating;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "Lcom/discord/primitives/MessageId;", "messageId", "mutualGuildIds", "reportTosViolation", "(IJJLjava/util/List;)V", "videoStreamEnded", "didCrash", "exitReason", "exitDescription", "tombstoneGroupHash", "tombstoneCause", "appNativeCrash", "(ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "modelInvite", "modelInviteToProperties", "version", "changeLogEvent", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V", "Lcom/discord/utilities/analytics/SearchType;", "searchType", "throttle", "searchStart", "(Lcom/discord/utilities/analytics/SearchType;Lcom/discord/utilities/analytics/Traits$Location;Ljava/util/Map;Z)V", "searchResultsEmpty", "totalResultsCount", "lockedResultsCount", "searchResultViewed", "(Lcom/discord/utilities/analytics/SearchType;ILjava/lang/Integer;Lcom/discord/utilities/analytics/Traits$Location;Ljava/util/Map;Z)V", "searchResultSelected", "(Lcom/discord/utilities/analytics/SearchType;Lcom/discord/utilities/analytics/Traits$Location;Lcom/discord/utilities/analytics/Traits$Source;ILjava/util/Map;)V", "chatInputComponentViewed", "Lcom/discord/utilities/rest/FileUploadAlertType;", "alertType", "numAttachments", "maxAttachmentSize", "totalAttachmentSize", "hasImage", "hasVideo", "isPremium", "fileUploadAlertViewed", "(Lcom/discord/utilities/rest/FileUploadAlertType;IIIZZZLjava/util/Map;)V", "Lcom/discord/stores/FailedMessageResolutionType;", "resolutionType", "initialAttemptTimestamp", "numRetries", "failedMessageResolved", "(IIIZZLcom/discord/stores/FailedMessageResolutionType;JILjava/util/Map;)V", "emojiCategorySelected", "stickerPackCategorySelected", "guildCategorySelected", "stickerSuggestionsEnabledToggled", "(ZLcom/discord/utilities/analytics/Traits$Location;)V", "badged", "expressionPickerOpened", "expressionPickerTabClicked", "expressionPickerStickerShopViewed", "Lcom/discord/api/sticker/Sticker;", "sticker", "stickerPackViewAllViewed", "(Lcom/discord/api/sticker/Sticker;Ljava/lang/String;Ljava/lang/String;Lcom/discord/utilities/analytics/Traits$Location;)V", "stickerPopoutOpened", "(JLjava/lang/String;Lcom/discord/utilities/analytics/Traits$Location;)V", "applicationCommandBrowserOpened", "commandId", "applicationCommandSelected", "(JJLjava/util/Map;)V", "argumentType", "isRequired", "applicationCommandValidationFailure", "(JJLjava/lang/String;Z)V", "applicationCommandBrowserScrolled", "targetApplicationId", "applicationCommandBrowserJump", "smartLockAutoLogin", "smartLockLogin", "smartLockLoginCredentialsFailed", "suggestionTrigger", "expressionSuggestionsDisplayed", "Lcom/discord/primitives/StickerId;", "stickerId", "expressionSuggestionsSelected", "autocompleteType", "numEmojiResults", "numStickerResults", "autocompleteOpen", "(Ljava/util/Map;Ljava/lang/String;II)V", "selectionType", "selection", "autocompleteSelect", "(Ljava/util/Map;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/Long;)V", "reportName", "feedback", "skipped", "userReportSubmitted", "(Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Z)V", "isCommunity", "guildCreationIntentSelected", "(Ljava/lang/Boolean;)V", "Lcom/discord/utilities/analytics/AnalyticsTracker$PremiumUpsellType;", "premiumUpsellViewed", "(Lcom/discord/utilities/analytics/AnalyticsTracker$PremiumUpsellType;Lcom/discord/utilities/analytics/Traits$Location;Ljava/util/Map;Lcom/discord/utilities/analytics/Traits$Source;)V", "Lcom/discord/primitives/EmojiId;", "emojiId", "joinedSourceGuild", "sourceGuildPrivate", "channelProperties", "openCustomEmojiPopout", "(JJZZZLjava/util/Map;)V", "openUnicodeEmojiPopout", "(JLjava/util/Map;)V", "promotedToSpeaker", "requestToSpeakInitiated", "threadBrowserTabChanged", "(Ljava/util/Map;Ljava/lang/String;)V", "canStartPublicStage", "trackStartStageOpened", "(ZLjava/lang/Long;Ljava/lang/Long;)V", "trackGuildIdentityMarketingSheet", "numEvents", "openGuildScheduledEventSheet", "(JI)V", "fromAudioOutputMode", "toAudioOutputMode", "voiceAudioOutputModeSelected", "(JLjava/lang/String;Ljava/lang/String;Lcom/discord/api/channel/Channel;Lcom/discord/rtcconnection/audio/DiscordAudioManager$DeviceTypes;Lcom/discord/rtcconnection/audio/DiscordAudioManager$DeviceTypes;)V", "Lcom/discord/rtcconnection/mediaengine/MediaEngine$EchoCancellationInfo;", "info", "echoCancellationConfigured", "(Lcom/discord/rtcconnection/mediaengine/MediaEngine$EchoCancellationInfo;)V", "guildRoleSubscriptionGroupListingId", "guildRoleSubscriptionTierListingIds", "hasUserActiveSubscriptions", "guildRoleSubscriptionUpsellOpened", "(JLjava/util/List;ZLjava/lang/String;)V", "targetUserId", "viewedDisableCommunicationModal", "(JJ)V", "viewedEnableCommunicationModal", "trackConnectedAccountInitiated", "trackAccountLinkStep", "trackDismissibleContentDismissed", "decisionId", "feedbackType", "content", "trackReportIssueWithAutoMod", "(Ljava/lang/String;JLjava/lang/CharSequence;Ljava/lang/String;)V", "trackForceUpdatePasswordSucceeded", "Lcom/google/firebase/analytics/FirebaseAnalytics;", "firebaseAnalytics$delegate", "Lkotlin/Lazy;", "getFirebaseAnalytics", "()Lcom/google/firebase/analytics/FirebaseAnalytics;", "firebaseAnalytics", "ATTACHMENT_SOURCE_PICKER", "Ljava/lang/String;", "Lcom/discord/utilities/analytics/AnalyticsUtils$Tracker;", "tracker", "Lcom/discord/utilities/analytics/AnalyticsUtils$Tracker;", "getTracker", "()Lcom/discord/utilities/analytics/AnalyticsUtils$Tracker;", "ATTACHMENT_ADD", "I", "THROTTLE_SHORT", "J", "getTHROTTLE_SHORT$annotations", "ATTACHMENT_SOURCE_KEYBOARD", "ATTACHMENT_SOURCE_SHARE", "THROTTLE_MEDIUM", "THROTTLE_LONG", "<init>", "AdjustEventTracker", "PremiumUpsellType", "app_productionGoogleRelease"}, k = 1, mv = {1, 4, 2})
/* loaded from: classes2.dex */
public final class AnalyticsTracker {
    private static final int ATTACHMENT_ADD = 0;
    public static final String ATTACHMENT_SOURCE_KEYBOARD = "keyboard";
    public static final String ATTACHMENT_SOURCE_PICKER = "media_picker";
    public static final String ATTACHMENT_SOURCE_SHARE = "share";
    public static final long THROTTLE_LONG = 900000;
    public static final long THROTTLE_MEDIUM = 300000;
    public static final long THROTTLE_SHORT = 60000;
    public static final AnalyticsTracker INSTANCE = new AnalyticsTracker();
    private static final AnalyticsUtils.Tracker tracker = AnalyticsUtils.Tracker.INSTANCE.getInstance();

    /* renamed from: firebaseAnalytics$delegate, reason: from kotlin metadata */
    private static final Lazy firebaseAnalytics = LazyJVM.lazy(AnalyticsTracker2.INSTANCE);

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0018\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010\u000e\n\u0002\b\u0005\bÂ\u0002\u0018\u00002\u00020\u0001B\t\b\u0002¢\u0006\u0004\b\n\u0010\u0004J\r\u0010\u0003\u001a\u00020\u0002¢\u0006\u0004\b\u0003\u0010\u0004J\r\u0010\u0005\u001a\u00020\u0002¢\u0006\u0004\b\u0005\u0010\u0004R\u0016\u0010\u0007\u001a\u00020\u00068\u0002@\u0002X\u0082T¢\u0006\u0006\n\u0004\b\u0007\u0010\bR\u0016\u0010\t\u001a\u00020\u00068\u0002@\u0002X\u0082T¢\u0006\u0006\n\u0004\b\t\u0010\b¨\u0006\u000b"}, d2 = {"Lcom/discord/utilities/analytics/AnalyticsTracker$AdjustEventTracker;", "", "", "trackRegister", "()V", "trackLogin", "", "EVENT_TOKEN_REGISTER", "Ljava/lang/String;", "EVENT_TOKEN_LOGIN", "<init>", "app_productionGoogleRelease"}, k = 1, mv = {1, 4, 2})
    public static final class AdjustEventTracker {
        private static final String EVENT_TOKEN_LOGIN = "ctt5aq";
        private static final String EVENT_TOKEN_REGISTER = "ebn8ke";
        public static final AdjustEventTracker INSTANCE = new AdjustEventTracker();

        private AdjustEventTracker() {
        }

        public final void trackLogin() {
            Adjust.trackEvent(new AdjustEvent(EVENT_TOKEN_LOGIN));
        }

        public final void trackRegister() {
            Adjust.trackEvent(new AdjustEvent(EVENT_TOKEN_REGISTER));
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\u0010\u000e\n\u0002\b\u0012\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0011\b\u0002\u0012\u0006\u0010\u0003\u001a\u00020\u0002¢\u0006\u0004\b\u0007\u0010\bR\u0019\u0010\u0003\u001a\u00020\u00028\u0006@\u0006¢\u0006\f\n\u0004\b\u0003\u0010\u0004\u001a\u0004\b\u0005\u0010\u0006j\u0002\b\tj\u0002\b\nj\u0002\b\u000bj\u0002\b\fj\u0002\b\rj\u0002\b\u000ej\u0002\b\u000fj\u0002\b\u0010j\u0002\b\u0011j\u0002\b\u0012j\u0002\b\u0013¨\u0006\u0014"}, d2 = {"Lcom/discord/utilities/analytics/AnalyticsTracker$PremiumUpsellType;", "", "", "analyticsName", "Ljava/lang/String;", "getAnalyticsName", "()Ljava/lang/String;", "<init>", "(Ljava/lang/String;ILjava/lang/String;)V", "EmojiPickerHeaderViewed", "EmojiPickerLockedItemClicked", "StreamQualityIndicator", "EmojiAutocompleteInline", "EmojiAutocompleteModal", "CustomProfileUpsellModal", "CustomProfileBannerUpsell", "StickerPickerUpsell", "EmptyStickerPickerUpsell", "PerGuildIdentityUpsellModal", "PerGuildIdentityInline", "app_productionGoogleRelease"}, k = 1, mv = {1, 4, 2})
    public enum PremiumUpsellType {
        EmojiPickerHeaderViewed("emoji_picker_search"),
        EmojiPickerLockedItemClicked("emoji_picker_emoji_clicked"),
        StreamQualityIndicator("stream_quality_indicator"),
        EmojiAutocompleteInline("emoji_autocomplete_inline"),
        EmojiAutocompleteModal("emoji_autocomplete_modal"),
        CustomProfileUpsellModal("custom profiles upsell modal"),
        CustomProfileBannerUpsell("custom profiles settings banner upsell"),
        StickerPickerUpsell("sticker_picker_upsell"),
        EmptyStickerPickerUpsell("empty_sticker_picker_upsell"),
        PerGuildIdentityUpsellModal("per server identity upsell modal"),
        PerGuildIdentityInline("per server identity upsell inline");

        private final String analyticsName;

        PremiumUpsellType(String str) {
            this.analyticsName = str;
        }

        public final String getAnalyticsName() {
            return this.analyticsName;
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {}, d2 = {}, k = 3, mv = {1, 4, 2})
    public final /* synthetic */ class WhenMappings {
        public static final /* synthetic */ int[] $EnumSwitchMapping$0;
        public static final /* synthetic */ int[] $EnumSwitchMapping$1;

        static {
            WidgetUserSetCustomStatusViewModel.FormState.Expiration.values();
            int[] iArr = new int[5];
            $EnumSwitchMapping$0 = iArr;
            iArr[WidgetUserSetCustomStatusViewModel.FormState.Expiration.NEVER.ordinal()] = 1;
            iArr[WidgetUserSetCustomStatusViewModel.FormState.Expiration.IN_30_MINUTES.ordinal()] = 2;
            iArr[WidgetUserSetCustomStatusViewModel.FormState.Expiration.IN_1_HOUR.ordinal()] = 3;
            iArr[WidgetUserSetCustomStatusViewModel.FormState.Expiration.IN_4_HOURS.ordinal()] = 4;
            iArr[WidgetUserSetCustomStatusViewModel.FormState.Expiration.TOMORROW.ordinal()] = 5;
            DiscordAudioManager.DeviceTypes.values();
            int[] iArr2 = new int[6];
            $EnumSwitchMapping$1 = iArr2;
            iArr2[DiscordAudioManager.DeviceTypes.SPEAKERPHONE.ordinal()] = 1;
            iArr2[DiscordAudioManager.DeviceTypes.BLUETOOTH_HEADSET.ordinal()] = 2;
            iArr2[DiscordAudioManager.DeviceTypes.WIRED_HEADSET.ordinal()] = 3;
            iArr2[DiscordAudioManager.DeviceTypes.EARPIECE.ordinal()] = 4;
            iArr2[DiscordAudioManager.DeviceTypes.INVALID.ordinal()] = 5;
            iArr2[DiscordAudioManager.DeviceTypes.DEFAULT.ordinal()] = 6;
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0010\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0003\u0010\u0004"}, d2 = {"", "", "", "invoke", "()Ljava/util/Map;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$ackMessage$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function0<Map<String, ? extends Object>> {
        public final /* synthetic */ Function0 $propertyProvider;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Function0 function0) {
            super(0);
            this.$propertyProvider = function0;
        }

        @Override // kotlin.jvm.functions.Function0
        public /* bridge */ /* synthetic */ Map<String, ? extends Object> invoke() {
            return invoke2();
        }

        @Override // kotlin.jvm.functions.Function0
        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Map<String, ? extends Object> invoke2() {
            return CollectionExtensions.filterNonNullValues((Map) this.$propertyProvider.invoke());
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0018\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\b\u001a\"\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0005 \u0001*\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u0005\u0018\u00010\u00030\u00032\u000e\u0010\u0002\u001a\n \u0001*\u0004\u0018\u00010\u00000\u0000H\n¢\u0006\u0004\b\u0006\u0010\u0007"}, d2 = {"Lcom/discord/api/channel/Channel;", "kotlin.jvm.PlatformType", "it", "", "", "", NotificationCompat.CATEGORY_CALL, "(Lcom/discord/api/channel/Channel;)Ljava/util/Map;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$addAttachment$1, reason: invalid class name */
    public static final class AnonymousClass1<T, R> implements Func1<Channel, Map<String, ? extends Object>> {
        public final /* synthetic */ String $mimeType;
        public final /* synthetic */ String $source;
        public final /* synthetic */ int $totalAttachments;

        public AnonymousClass1(String str, String str2, int i) {
            this.$source = str;
            this.$mimeType = str2;
            this.$totalAttachments = i;
        }

        @Override // j0.k.Func1
        public /* bridge */ /* synthetic */ Map<String, ? extends Object> call(Channel channel) {
            return call2(channel);
        }

        /* renamed from: call, reason: avoid collision after fix types in other method */
        public final Map<String, Object> call2(Channel channel) {
            Map mapMapOf = Maps6.mapOf(Tuples.to("source", this.$source), Tuples.to("action_type", 0), Tuples.to("mime_type", this.$mimeType), Tuples.to("total_attachments", Integer.valueOf(this.$totalAttachments)), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(channel.getGuildId())));
            AnalyticsUtils analyticsUtils = AnalyticsUtils.INSTANCE;
            Intrinsics3.checkNotNullExpressionValue(channel, "it");
            return Maps6.plus(mapMapOf, analyticsUtils.getProperties$app_productionGoogleRelease(channel));
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0018\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\u0010\b\u001a\u00020\u00052&\u0010\u0004\u001a\"\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u0002 \u0003*\u0010\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u0002\u0018\u00010\u00000\u0000H\n¢\u0006\u0004\b\u0006\u0010\u0007"}, d2 = {"", "", "", "kotlin.jvm.PlatformType", "it", "", "invoke", "(Ljava/util/Map;)V", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$addAttachment$2, reason: invalid class name */
    public static final class AnonymousClass2 extends Lambda implements Function1<Map<String, ? extends Object>, Unit> {
        public static final AnonymousClass2 INSTANCE = new AnonymousClass2();

        public AnonymousClass2() {
            super(1);
        }

        @Override // kotlin.jvm.functions.Function1
        public /* bridge */ /* synthetic */ Unit invoke(Map<String, ? extends Object> map) {
            invoke2(map);
            return Unit.a;
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final void invoke2(Map<String, ? extends Object> map) {
            AnalyticsTracker.INSTANCE.getTracker().track("message_attachment_updated", map);
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0010\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0003\u0010\u0004"}, d2 = {"", "", "", "invoke", "()Ljava/util/Map;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$channelOpened$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function0<Map<String, ? extends Object>> {
        public final /* synthetic */ Function0 $lazyPropertyProvider;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Function0 function0) {
            super(0);
            this.$lazyPropertyProvider = function0;
        }

        @Override // kotlin.jvm.functions.Function0
        public /* bridge */ /* synthetic */ Map<String, ? extends Object> invoke() {
            return invoke2();
        }

        @Override // kotlin.jvm.functions.Function0
        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Map<String, ? extends Object> invoke2() {
            return CollectionExtensions.filterNonNullValues((Map) this.$lazyPropertyProvider.invoke());
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\u0010\b\u001a\u0004\u0018\u00010\u00052\u0018\u0010\u0003\u001a\u0014 \u0002*\n\u0018\u00010\u0000j\u0004\u0018\u0001`\u00010\u0000j\u0002`\u00012\u0018\u0010\u0004\u001a\u0014 \u0002*\n\u0018\u00010\u0000j\u0004\u0018\u0001`\u00010\u0000j\u0002`\u0001H\n¢\u0006\u0004\b\u0006\u0010\u0007"}, d2 = {"Lcom/discord/models/presence/Presence;", "Lcom/discord/stores/AppPresence;", "kotlin.jvm.PlatformType", "localPresence", "externalPresence", "Lcom/discord/api/activity/Activity;", "invoke", "(Lcom/discord/models/presence/Presence;Lcom/discord/models/presence/Presence;)Lcom/discord/api/activity/Activity;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$getGameProperties$1, reason: invalid class name */
    public static final class AnonymousClass1<T1, T2, R> implements Func2<Presence, Presence, Activity> {
        public static final AnonymousClass1 INSTANCE = new AnonymousClass1();

        @Override // rx.functions.Func2
        public /* bridge */ /* synthetic */ Activity call(Presence presence, Presence presence2) {
            return invoke(presence, presence2);
        }

        public final Activity invoke(Presence presence, Presence presence2) {
            PresenceUtils presenceUtils = PresenceUtils.INSTANCE;
            Intrinsics3.checkNotNullExpressionValue(presence, "localPresence");
            Activity playingActivity = presenceUtils.getPlayingActivity(presence);
            if (playingActivity != null) {
                return playingActivity;
            }
            Intrinsics3.checkNotNullExpressionValue(presence2, "externalPresence");
            return presenceUtils.getPlayingActivity(presence2);
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0016\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010%\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0004\u0010\b\u001a\"\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0004 \u0005*\u0010\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u00020\u0004\u0018\u00010\u00020\u00022\b\u0010\u0001\u001a\u0004\u0018\u00010\u0000H\n¢\u0006\u0004\b\u0006\u0010\u0007"}, d2 = {"Lcom/discord/api/activity/Activity;", "gameActivity", "", "", "", "kotlin.jvm.PlatformType", NotificationCompat.CATEGORY_CALL, "(Lcom/discord/api/activity/Activity;)Ljava/util/Map;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$getGameProperties$2, reason: invalid class name */
    public static final class AnonymousClass2<T, R> implements Func1<Activity, Map<String, Object>> {
        public static final AnonymousClass2 INSTANCE = new AnonymousClass2();

        @Override // j0.k.Func1
        public /* bridge */ /* synthetic */ Map<String, Object> call(Activity activity) {
            return call2(activity);
        }

        /* renamed from: call, reason: avoid collision after fix types in other method */
        public final Map<String, Object> call2(Activity activity) {
            Tuples2[] tuples2Arr = new Tuples2[3];
            tuples2Arr[0] = Tuples.to("game_platform", activity != null ? ActivityUtils.getGamePlatform(activity) : null);
            tuples2Arr[1] = Tuples.to("game_name", activity != null ? activity.getName() : null);
            tuples2Arr[2] = Tuples.to("game_id", activity != null ? activity.getApplicationId() : null);
            return CollectionExtensions.filterNonNullValues(Maps6.mapOf(tuples2Arr));
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0010\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0003\u0010\u0004"}, d2 = {"", "", "", "invoke", "()Ljava/util/Map;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$guildViewed$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function0<Map<String, ? extends Object>> {
        public final /* synthetic */ Function0 $lazyPropertyProvider;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Function0 function0) {
            super(0);
            this.$lazyPropertyProvider = function0;
        }

        @Override // kotlin.jvm.functions.Function0
        public /* bridge */ /* synthetic */ Map<String, ? extends Object> invoke() {
            return invoke2();
        }

        @Override // kotlin.jvm.functions.Function0
        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Map<String, ? extends Object> invoke2() {
            return (Map) this.$lazyPropertyProvider.invoke();
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000 \n\u0002\u0010$\n\u0002\u0010\t\n\u0002\u0018\u0002\n\u0002\u0010\b\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\"\n\u0002\b\u0003\u0010\n\u001a\u001e\u0012\b\u0012\u00060\u0001j\u0002`\u0002 \u0005*\u000e\u0012\b\u0012\u00060\u0001j\u0002`\u0002\u0018\u00010\u00070\u000726\u0010\u0006\u001a2\u0012\b\u0012\u00060\u0001j\u0002`\u0002\u0012\b\u0012\u00060\u0003j\u0002`\u0004 \u0005*\u0018\u0012\b\u0012\u00060\u0001j\u0002`\u0002\u0012\b\u0012\u00060\u0003j\u0002`\u0004\u0018\u00010\u00000\u0000H\n¢\u0006\u0004\b\b\u0010\t"}, d2 = {"", "", "Lcom/discord/primitives/UserId;", "", "Lcom/discord/primitives/RelationshipType;", "kotlin.jvm.PlatformType", "userRelationships", "", NotificationCompat.CATEGORY_CALL, "(Ljava/util/Map;)Ljava/util/Set;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$inviteSuggestionOpened$1, reason: invalid class name */
    public static final class AnonymousClass1<T, R> implements Func1<Map<Long, ? extends Integer>, Set<? extends Long>> {
        public static final AnonymousClass1 INSTANCE = new AnonymousClass1();

        @Override // j0.k.Func1
        public /* bridge */ /* synthetic */ Set<? extends Long> call(Map<Long, ? extends Integer> map) {
            return call2((Map<Long, Integer>) map);
        }

        /* renamed from: call, reason: avoid collision after fix types in other method */
        public final Set<Long> call2(Map<Long, Integer> map) {
            Intrinsics3.checkNotNullExpressionValue(map, "userRelationships");
            LinkedHashMap linkedHashMap = new LinkedHashMap();
            for (Map.Entry<Long, Integer> entry : map.entrySet()) {
                if (entry.getValue().intValue() == 1) {
                    linkedHashMap.put(entry.getKey(), entry.getValue());
                }
            }
            return linkedHashMap.keySet();
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0018\n\u0002\u0010\"\n\u0002\u0010\t\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\u0010\b\u001a\u00020\u00052\"\u0010\u0004\u001a\u001e\u0012\b\u0012\u00060\u0001j\u0002`\u0002 \u0003*\u000e\u0012\b\u0012\u00060\u0001j\u0002`\u0002\u0018\u00010\u00000\u0000H\n¢\u0006\u0004\b\u0006\u0010\u0007"}, d2 = {"", "", "Lcom/discord/primitives/UserId;", "kotlin.jvm.PlatformType", "friendUserIds", "", "invoke", "(Ljava/util/Set;)V", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$inviteSuggestionOpened$2, reason: invalid class name */
    public static final class AnonymousClass2 extends Lambda implements Function1<Set<? extends Long>, Unit> {
        public final /* synthetic */ List $channelSuggestions;
        public final /* synthetic */ long $guildId;
        public final /* synthetic */ List $userSuggestions;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass2(List list, List list2, long j) {
            super(1);
            this.$channelSuggestions = list;
            this.$userSuggestions = list2;
            this.$guildId = j;
        }

        @Override // kotlin.jvm.functions.Function1
        public /* bridge */ /* synthetic */ Unit invoke(Set<? extends Long> set) {
            invoke2((Set<Long>) set);
            return Unit.a;
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final void invoke2(Set<Long> set) {
            List list = this.$channelSuggestions;
            LinkedHashMap linkedHashMap = new LinkedHashMap();
            for (Object obj : list) {
                Integer numValueOf = Integer.valueOf(((Channel) obj).getType());
                Object arrayList = linkedHashMap.get(numValueOf);
                if (arrayList == null) {
                    arrayList = new ArrayList();
                    linkedHashMap.put(numValueOf, arrayList);
                }
                ((List) arrayList).add(obj);
            }
            List list2 = (List) linkedHashMap.get(1);
            int size = list2 != null ? list2.size() : 0;
            List list3 = (List) linkedHashMap.get(3);
            AnalyticsTracker.INSTANCE.getTracker().track("invite_suggestion_opened", Maps6.mapOf(Tuples.to("num_suggestions", Integer.valueOf(this.$userSuggestions.size() + this.$channelSuggestions.size())), Tuples.to("num_friends", Integer.valueOf(set.size())), Tuples.to("num_dms", Integer.valueOf(this.$userSuggestions.size() + size)), Tuples.to("num_group_dms", Integer.valueOf(list3 != null ? list3.size() : 0)), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(this.$guildId))));
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0010\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0003\u0010\u0004"}, d2 = {"", "", "", "invoke", "()Ljava/util/Map;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$textInVoiceOpened$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function0<Map<String, ? extends Object>> {
        public final /* synthetic */ Function0 $lazyPropertyProvider;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Function0 function0) {
            super(0);
            this.$lazyPropertyProvider = function0;
        }

        @Override // kotlin.jvm.functions.Function0
        public /* bridge */ /* synthetic */ Map<String, ? extends Object> invoke() {
            return invoke2();
        }

        @Override // kotlin.jvm.functions.Function0
        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Map<String, ? extends Object> invoke2() {
            return CollectionExtensions.filterNonNullValues((Map) this.$lazyPropertyProvider.invoke());
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0016\n\u0002\u0010%\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\u0010\u0007\u001a\u00020\u00042\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0005\u0010\u0006"}, d2 = {"", "", "", "gameProperties", "", "invoke", "(Ljava/util/Map;)V", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$trackUserVoiceEvent$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function1<Map<String, Object>, Unit> {
        public final /* synthetic */ String $inputMode;
        public final /* synthetic */ Channel $this_trackUserVoiceEvent;
        public final /* synthetic */ Tuples2 $throttleKey;

        /* compiled from: AnalyticsTracker.kt */
        @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0010\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0003\u0010\u0004"}, d2 = {"", "", "", "invoke", "()Ljava/util/Map;", "<anonymous>"}, k = 3, mv = {1, 4, 2})
        /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$trackUserVoiceEvent$1$1, reason: invalid class name and collision with other inner class name */
        public static final class C02071 extends Lambda implements Function0<Map<String, ? extends Object>> {
            public final /* synthetic */ Map $gameProperties;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            public C02071(Map map) {
                super(0);
                this.$gameProperties = map;
            }

            @Override // kotlin.jvm.functions.Function0
            public /* bridge */ /* synthetic */ Map<String, ? extends Object> invoke() {
                return invoke2();
            }

            @Override // kotlin.jvm.functions.Function0
            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final Map<String, ? extends Object> invoke2() {
                this.$gameProperties.put("mode", AnonymousClass1.this.$inputMode);
                this.$gameProperties.put("channel", Long.valueOf(AnonymousClass1.this.$this_trackUserVoiceEvent.getId()));
                this.$gameProperties.put("channel_type", Integer.valueOf(AnonymousClass1.this.$this_trackUserVoiceEvent.getType()));
                this.$gameProperties.put("server", Long.valueOf(AnonymousClass1.this.$this_trackUserVoiceEvent.getGuildId()));
                return this.$gameProperties;
            }
        }

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Channel channel, Tuples2 tuples2, String str) {
            super(1);
            this.$this_trackUserVoiceEvent = channel;
            this.$throttleKey = tuples2;
            this.$inputMode = str;
        }

        @Override // kotlin.jvm.functions.Function1
        public /* bridge */ /* synthetic */ Unit invoke(Map<String, Object> map) {
            invoke2(map);
            return Unit.a;
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final void invoke2(Map<String, Object> map) {
            Intrinsics3.checkNotNullParameter(map, "gameProperties");
            AnalyticsTracker.INSTANCE.getTracker().track(this.$throttleKey, 900000L, new C02071(map));
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0016\n\u0002\u0010%\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\u0010\u0007\u001a\u00020\u00042\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0005\u0010\u0006"}, d2 = {"", "", "", "gameProperties", "", "invoke", "(Ljava/util/Map;)V", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$videoInputsUpdate$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function1<Map<String, Object>, Unit> {
        public final /* synthetic */ Map $voiceProperties;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Map map) {
            super(1);
            this.$voiceProperties = map;
        }

        @Override // kotlin.jvm.functions.Function1
        public /* bridge */ /* synthetic */ Unit invoke(Map<String, Object> map) {
            invoke2(map);
            return Unit.a;
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final void invoke2(Map<String, Object> map) {
            Intrinsics3.checkNotNullParameter(map, "gameProperties");
            AnalyticsUtils.Tracker tracker = AnalyticsTracker.INSTANCE.getTracker();
            Map map2 = this.$voiceProperties;
            map2.putAll(map);
            tracker.track("video_input_toggled", CollectionExtensions.filterNonNullValues(map2));
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0016\n\u0002\u0010%\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\u0010\u0007\u001a\u00020\u00042\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0005\u0010\u0006"}, d2 = {"", "", "", "gameProperties", "", "invoke", "(Ljava/util/Map;)V", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$voiceChannelJoin$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function1<Map<String, Object>, Unit> {
        public final /* synthetic */ Map $voiceProperties;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Map map) {
            super(1);
            this.$voiceProperties = map;
        }

        @Override // kotlin.jvm.functions.Function1
        public /* bridge */ /* synthetic */ Unit invoke(Map<String, Object> map) {
            invoke2(map);
            return Unit.a;
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final void invoke2(Map<String, Object> map) {
            Intrinsics3.checkNotNullParameter(map, "gameProperties");
            this.$voiceProperties.putAll(map);
            AnalyticsTracker.INSTANCE.getTracker().track("join_voice_channel", CollectionExtensions.filterNonNullValues(this.$voiceProperties));
        }
    }

    /* compiled from: AnalyticsTracker.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0016\n\u0002\u0010%\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\u0010\u0007\u001a\u00020\u00042\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00020\u0000H\n¢\u0006\u0004\b\u0005\u0010\u0006"}, d2 = {"", "", "", "gameProperties", "", "invoke", "(Ljava/util/Map;)V", "<anonymous>"}, k = 3, mv = {1, 4, 2})
    /* renamed from: com.discord.utilities.analytics.AnalyticsTracker$voiceChannelLeave$1, reason: invalid class name */
    public static final class AnonymousClass1 extends Lambda implements Function1<Map<String, Object>, Unit> {
        public final /* synthetic */ Map $voiceProperties;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass1(Map map) {
            super(1);
            this.$voiceProperties = map;
        }

        @Override // kotlin.jvm.functions.Function1
        public /* bridge */ /* synthetic */ Unit invoke(Map<String, Object> map) {
            invoke2(map);
            return Unit.a;
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final void invoke2(Map<String, Object> map) {
            Intrinsics3.checkNotNullParameter(map, "gameProperties");
            AnalyticsUtils.Tracker tracker = AnalyticsTracker.INSTANCE.getTracker();
            Map map2 = this.$voiceProperties;
            map2.putAll(map);
            tracker.track("leave_voice_channel", CollectionExtensions.filterNonNullValues(map2));
        }
    }

    private AnalyticsTracker() {
    }

    public static /* synthetic */ void accountLinkFailed$default(AnalyticsTracker analyticsTracker, String str, Integer num, String str2, String str3, String str4, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        if ((i & 2) != 0) {
            num = null;
        }
        if ((i & 4) != 0) {
            str2 = null;
        }
        if ((i & 8) != 0) {
            str3 = null;
        }
        if ((i & 16) != 0) {
            str4 = null;
        }
        analyticsTracker.accountLinkFailed(str, num, str2, str3, str4);
    }

    public static /* synthetic */ void accountLinkStep$default(AnalyticsTracker analyticsTracker, String str, String str2, String str3, String str4, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        if ((i & 2) != 0) {
            str2 = null;
        }
        if ((i & 4) != 0) {
            str3 = null;
        }
        if ((i & 8) != 0) {
            str4 = null;
        }
        analyticsTracker.accountLinkStep(str, str2, str3, str4);
    }

    public static final void addAttachment(String source, String mimeType, int totalAttachments) {
        Intrinsics3.checkNotNullParameter(source, "source");
        Intrinsics3.checkNotNullParameter(mimeType, "mimeType");
        Observable<Channel> observableZ = StoreStream.INSTANCE.getChannelsSelected().observeSelectedChannel().Z(1);
        Intrinsics3.checkNotNullExpressionValue(observableZ, "StoreStream\n        .get…hannel()\n        .take(1)");
        Observable<R> observableG = observableZ.y(ObservableExtensionsKt.AnonymousClass1.INSTANCE).G(ObservableExtensionsKt.AnonymousClass2.INSTANCE);
        Intrinsics3.checkNotNullExpressionValue(observableG, "filter { it != null }.map { it!! }");
        Observable observableG2 = observableG.G(new AnonymousClass1(source, mimeType, totalAttachments));
        Intrinsics3.checkNotNullExpressionValue(observableG2, "StoreStream\n        .get…+ it.properties\n        }");
        ObservableExtensionsKt.appSubscribe$default(ObservableExtensionsKt.computationBuffered(observableG2), INSTANCE.getClass(), (Context) null, (Function1) null, (Function1) null, (Function0) null, (Function0) null, AnonymousClass2.INSTANCE, 62, (Object) null);
    }

    private final void addVoiceConnectionProperties(Map<String, Object> mutableProperties, Channel channel, String cloudflareBestRegion) {
        if (channel != null) {
            mutableProperties.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(Long.valueOf(channel.getId()).longValue()));
        }
        Long lValueOf = channel != null ? Long.valueOf(channel.getGuildId()) : null;
        if (lValueOf != null && lValueOf.longValue() > 0) {
            mutableProperties.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, lValueOf);
        }
        if (cloudflareBestRegion != null) {
            mutableProperties.put("cloudflare_best_region", cloudflareBestRegion);
        }
    }

    public static final void appLandingViewed(long lastLogoutTs) {
        Long lValueOf = Long.valueOf(lastLogoutTs);
        if (!(lValueOf.longValue() != 0)) {
            lValueOf = null;
        }
        tracker.track("app_landing_viewed", lValueOf != null ? MapsJVM.mapOf(Tuples.to("last_logout_ts", Long.valueOf(lValueOf.longValue()))) : null);
    }

    public static final void appNotificationClicked(Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        if (!properties.isEmpty()) {
            tracker.track("notification_clicked", properties);
        }
    }

    private final String audioOutputDeviceTypeToString(DiscordAudioManager.DeviceTypes type) {
        int iOrdinal = type.ordinal();
        if (iOrdinal == 0) {
            return "default";
        }
        if (iOrdinal == 1) {
            return "invalid";
        }
        if (iOrdinal == 2) {
            return "speaker";
        }
        if (iOrdinal == 3) {
            return "wired_headset";
        }
        if (iOrdinal == 4) {
            return "earpiece";
        }
        if (iOrdinal != 5) {
            return null;
        }
        return "bluetooth_headset";
    }

    public static /* synthetic */ void callReportProblem$default(AnalyticsTracker analyticsTracker, long j, String str, Channel channel, Map map, Long l, String str2, FeedbackRating feedbackRating, Integer num, String str3, StoreMediaSettings.VoiceConfiguration voiceConfiguration, DiscordAudioManager.AudioDevice audioDevice, boolean z2, String str4, int i, Object obj) {
        analyticsTracker.callReportProblem(j, str, channel, map, (i & 16) != 0 ? null : l, str2, feedbackRating, num, str3, voiceConfiguration, audioDevice, z2, (i & 4096) != 0 ? null : str4);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static /* synthetic */ void changeLogEvent$default(AnalyticsTracker analyticsTracker, String str, String str2, String str3, Map map, int i, Object obj) {
        if ((i & 8) != 0) {
            map = new HashMap();
        }
        analyticsTracker.changeLogEvent(str, str2, str3, map);
    }

    private final void closeTutorial(String tutorial, boolean acknowledged) {
        tracker.track("close_tutorial", Maps6.mapOf(Tuples.to("tutorial", tutorial), Tuples.to("acknowledged", Boolean.valueOf(acknowledged))));
    }

    public static final void connectedAccountViewed(String platformType) {
        HashMap map = new HashMap();
        if (platformType != null) {
            map.put("platform_type", platformType);
        }
        tracker.track("connected_account_viewed", map);
    }

    public static /* synthetic */ void connectedAccountViewed$default(String str, int i, Object obj) {
        if ((i & 1) != 0) {
            str = null;
        }
        connectedAccountViewed(str);
    }

    public static /* synthetic */ void dismissModal$default(AnalyticsTracker analyticsTracker, String str, String str2, String str3, Long l, int i, Object obj) {
        if ((i & 8) != 0) {
            l = null;
        }
        analyticsTracker.dismissModal(str, str2, str3, l);
    }

    private final void expressionPickerCategorySelected(Long stickerPackId, Long guildId, String tab) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put("tab", tab);
        if (guildId != null) {
            guildId.longValue();
            linkedHashMap.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, guildId);
        }
        if (stickerPackId != null) {
            stickerPackId.longValue();
            linkedHashMap.put("sticker_pack_id", stickerPackId);
        }
        tracker.track("expression_picker_category_selected", linkedHashMap);
    }

    public static /* synthetic */ void expressionPickerCategorySelected$default(AnalyticsTracker analyticsTracker, Long l, Long l2, String str, int i, Object obj) {
        if ((i & 1) != 0) {
            l = null;
        }
        if ((i & 2) != 0) {
            l2 = null;
        }
        analyticsTracker.expressionPickerCategorySelected(l, l2, str);
    }

    public static final void externalFingerprintDropped(String fingerprint, String droppedFingerprint) {
        Intrinsics3.checkNotNullParameter(fingerprint, "fingerprint");
        Intrinsics3.checkNotNullParameter(droppedFingerprint, "droppedFingerprint");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        AnalyticsTracker analyticsTracker = INSTANCE;
        Long fingerprintNumber = analyticsTracker.toFingerprintNumber(fingerprint);
        if (fingerprintNumber != null) {
            linkedHashMap.put("fingerprint", Long.valueOf(fingerprintNumber.longValue()));
        }
        Long fingerprintNumber2 = analyticsTracker.toFingerprintNumber(droppedFingerprint);
        if (fingerprintNumber2 != null) {
            linkedHashMap.put("dropped_fingerprint", Long.valueOf(fingerprintNumber2.longValue()));
        }
        tracker.track("external_fingerprint_dropped", linkedHashMap);
    }

    public static /* synthetic */ void friendRequestFailed$default(AnalyticsTracker analyticsTracker, CharSequence charSequence, String str, Integer num, String str2, int i, Object obj) {
        if ((i & 8) != 0) {
            str2 = null;
        }
        analyticsTracker.friendRequestFailed(charSequence, str, num, str2);
    }

    private final String getAnalyticsValueForNotificationFrequency(Integer messageNotifications) {
        int i = ModelNotificationSettings.FREQUENCY_ALL;
        if (messageNotifications != null && messageNotifications.intValue() == i) {
            return "All";
        }
        int i2 = ModelNotificationSettings.FREQUENCY_MENTIONS;
        if (messageNotifications != null && messageNotifications.intValue() == i2) {
            return "Mentions";
        }
        int i3 = ModelNotificationSettings.FREQUENCY_NOTHING;
        if (messageNotifications != null && messageNotifications.intValue() == i3) {
            return "Nothing";
        }
        int i4 = ModelNotificationSettings.FREQUENCY_UNSET;
        if (messageNotifications != null && messageNotifications.intValue() == i4) {
            return "Unset";
        }
        return null;
    }

    private final String getAnalyticsValueForThreadNotificationFrequency(ThreadMemberFlags threadMemberFlags, int i) {
        return i == (i & 2) ? "All" : i == (i & 4) ? "Mentions" : i == (i & 8) ? "Nothing" : "Unset";
    }

    private final FirebaseAnalytics getFirebaseAnalytics() {
        return (FirebaseAnalytics) firebaseAnalytics.getValue();
    }

    private final Observable<Map<String, Object>> getGameProperties(long meId) {
        StoreStream.Companion companion = StoreStream.INSTANCE;
        Observable<Presence> observableObserveLocalPresence = companion.getPresences().observeLocalPresence();
        Observable<R> observableG = companion.getPresences().observePresenceForUser(meId).y(ObservableExtensionsKt.AnonymousClass1.INSTANCE).G(ObservableExtensionsKt.AnonymousClass2.INSTANCE);
        Intrinsics3.checkNotNullExpressionValue(observableG, "filter { it != null }.map { it!! }");
        Observable observableJ = Observable.j(observableObserveLocalPresence, observableG, AnonymousClass1.INSTANCE);
        Intrinsics3.checkNotNullExpressionValue(observableJ, "Observable\n        .comb…\n            })\n        )");
        Observable<Map<String, Object>> observableG2 = ObservableExtensionsKt.takeSingleUntilTimeout$default(observableJ, 0L, false, 3, null).G(AnonymousClass2.INSTANCE);
        Intrinsics3.checkNotNullExpressionValue(observableG2, "Observable\n        .comb…NonNullValues()\n        }");
        return observableG2;
    }

    private final String getNetworkTypeAnalyticsValue(Integer networkType) {
        if (networkType == null) {
            return null;
        }
        return networkType.intValue() == 1 ? "wifi" : networkType.intValue() == 0 ? "cellular" : networkType.intValue() == 9 ? "ethernet" : networkType.intValue() == 7 ? "bluetooth" : networkType.intValue() == 6 ? "wimax" : networkType.intValue() == 17 ? "vpn" : "other";
    }

    private final Map<String, Object> getStageChannelMetadata(long channelId) {
        String topic;
        String str;
        StoreStream.Companion companion = StoreStream.INSTANCE;
        Channel channel = companion.getChannels().getChannel(channelId);
        if (channel == null) {
            return null;
        }
        PermissionUtils permissionUtils = PermissionUtils.INSTANCE;
        Map<Long, GuildRole> mapEmptyMap = (Map) outline.c(channel, companion.getGuilds().getRoles());
        if (mapEmptyMap == null) {
            mapEmptyMap = Maps6.emptyMap();
        }
        boolean zCanEveryoneRole = permissionUtils.canEveryoneRole(Permission.REQUEST_TO_SPEAK, channel, mapEmptyMap);
        StageInstance stageInstanceForChannel = companion.getStageInstances().getStageInstanceForChannel(channelId);
        Tuples2[] tuples2Arr = new Tuples2[5];
        tuples2Arr[0] = Tuples.to(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channelId));
        tuples2Arr[1] = Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(channel.getGuildId()));
        if (stageInstanceForChannel == null || (topic = stageInstanceForChannel.getTopic()) == null) {
            topic = "";
        }
        tuples2Arr[2] = Tuples.to(ModelAuditLogEntry.CHANGE_KEY_TOPIC, topic);
        tuples2Arr[3] = Tuples.to("stage_instance_id", stageInstanceForChannel != null ? Long.valueOf(stageInstanceForChannel.getId()) : null);
        tuples2Arr[4] = Tuples.to("request_to_speak_state", Integer.valueOf(zCanEveryoneRole ? StageAnalyticsRequestToSpeakState.REQUEST_TO_SPEAK_EVERYONE.getIntegerValue() : StageAnalyticsRequestToSpeakState.REQUEST_TO_SPEAK_NO_ONE.getIntegerValue()));
        Map mapMutableMapOf = Maps6.mutableMapOf(tuples2Arr);
        RtcConnection.Metadata rtcConnectionMetadata = companion.getRtcConnection().getRtcConnectionMetadata();
        if (rtcConnectionMetadata != null && (str = rtcConnectionMetadata.mediaSessionId) != null) {
            mapMutableMapOf.put("media_session_id", str);
        }
        return CollectionExtensions.filterNonNullValues(mapMutableMapOf);
    }

    public static /* synthetic */ void getTHROTTLE_SHORT$annotations() {
    }

    private final Map<String, Object> getVoiceChannelProperties(long meId, Channel channel, Long durationMs, Map<Long, VoiceState> guildVoiceStates, DeviceDescription4 videoInputDevice, String rtcConnectionId) {
        int i;
        int i2;
        Collection<VoiceState> collectionValues;
        if (guildVoiceStates == null || (collectionValues = guildVoiceStates.values()) == null) {
            i = 0;
            i2 = 0;
        } else {
            i = 0;
            i2 = 0;
            for (VoiceState voiceState : collectionValues) {
                Long channelId = voiceState.getChannelId();
                long id2 = channel.getId();
                if (channelId != null && channelId.longValue() == id2 && voiceState.getUserId() != meId) {
                    i++;
                    if (voiceState.getSelfVideo()) {
                        i2++;
                    }
                }
            }
        }
        Map<String, Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channel.getId())), Tuples.to("channel_type", Integer.valueOf(channel.getType())), Tuples.to("voice_state_count", Integer.valueOf(i)), Tuples.to("video_stream_count", Integer.valueOf(i2)));
        long guildId = channel.getGuildId();
        if (guildId > 0) {
            mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
        }
        mapMutableMapOf.put("video_enabled", Boolean.valueOf(videoInputDevice != null));
        if (durationMs != null) {
            mapMutableMapOf.put("duration", Long.valueOf(durationMs.longValue()));
        }
        if (rtcConnectionId != null) {
            mapMutableMapOf.put("rtc_connection_id", rtcConnectionId);
        }
        return mapMutableMapOf;
    }

    public static /* synthetic */ Map getVoiceChannelProperties$default(AnalyticsTracker analyticsTracker, long j, Channel channel, Long l, Map map, DeviceDescription4 deviceDescription4, String str, int i, Object obj) {
        return analyticsTracker.getVoiceChannelProperties(j, channel, (i & 4) != 0 ? null : l, (i & 8) != 0 ? null : map, (i & 16) != 0 ? null : deviceDescription4, (i & 32) != 0 ? null : str);
    }

    public static /* synthetic */ void guildBoostPromotionClosed$default(AnalyticsTracker analyticsTracker, long j, Traits.Location location, Long l, int i, Object obj) {
        if ((i & 4) != 0) {
            l = null;
        }
        analyticsTracker.guildBoostPromotionClosed(j, location, l);
    }

    public static /* synthetic */ void guildBoostPromotionOpened$default(AnalyticsTracker analyticsTracker, long j, Traits.Location location, Long l, int i, Object obj) {
        if ((i & 4) != 0) {
            l = null;
        }
        analyticsTracker.guildBoostPromotionOpened(j, location, l);
    }

    public static final void guildExperimentTriggered(String name, int revision, int bucket, long guildId) {
        Intrinsics3.checkNotNullParameter(name, ModelAuditLogEntry.CHANGE_KEY_NAME);
        tracker.track("experiment_guild_triggered", Maps6.mutableMapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_NAME, name), Tuples.to("revision", Integer.valueOf(revision)), Tuples.to("bucket", Integer.valueOf(bucket)), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId))));
    }

    public static /* synthetic */ void guildRoleSubscriptionUpsellOpened$default(AnalyticsTracker analyticsTracker, long j, List list, boolean z2, String str, int i, Object obj) {
        if ((i & 2) != 0) {
            list = Collections2.emptyList();
        }
        analyticsTracker.guildRoleSubscriptionUpsellOpened(j, list, z2, str);
    }

    public static final void guildTemplateResolveFailed(String guildTemplateCode) {
        Intrinsics3.checkNotNullParameter(guildTemplateCode, "guildTemplateCode");
        tracker.track("guild_template_resolved", Maps6.mapOf(Tuples.to("resolved", Boolean.FALSE), Tuples.to("guild_template_code", guildTemplateCode)));
    }

    private final Map<String, Object> insertUriProperties(Map<String, Object> map, Uri uri) {
        String host = uri.getHost();
        if (host != null) {
            Intrinsics3.checkNotNullExpressionValue(host, "it");
            map.put("uri_host", host);
        }
        String scheme = uri.getScheme();
        if (scheme != null) {
            Intrinsics3.checkNotNullExpressionValue(scheme, "it");
            map.put("uri_scheme", scheme);
        }
        String path = uri.getPath();
        if (!(path == null || path.length() == 0)) {
            if (path.length() > 100) {
                path = path.substring(0, 99);
                Intrinsics3.checkNotNullExpressionValue(path, "(this as java.lang.Strin…ing(startIndex, endIndex)");
            }
            map.put("uri_path", path);
        }
        return map;
    }

    public static final void inviteCopied(ModelInvite invite, String source) {
        Intrinsics3.checkNotNullParameter(source, "source");
        if (invite == null) {
            return;
        }
        AnalyticsTracker analyticsTracker = INSTANCE;
        String str = invite.code;
        Intrinsics3.checkNotNullExpressionValue(str, "invite.code");
        Guild guild = invite.guild;
        Long lValueOf = guild != null ? Long.valueOf(guild.getId()) : null;
        Channel channel = invite.getChannel();
        Long lValueOf2 = channel != null ? Long.valueOf(channel.getId()) : null;
        Channel channel2 = invite.getChannel();
        Integer numValueOf = channel2 != null ? Integer.valueOf(channel2.getType()) : null;
        GuildScheduledEvent guildScheduledEvent = invite.getGuildScheduledEvent();
        analyticsTracker.inviteCopied(str, lValueOf, lValueOf2, numValueOf, source, guildScheduledEvent != null ? Long.valueOf(guildScheduledEvent.getId()) : null);
    }

    public static final void inviteOpened(String inviteCode) {
        Intrinsics3.checkNotNullParameter(inviteCode, "inviteCode");
        tracker.track("invite_opened", MapsJVM.mapOf(Tuples.to("invite_code", inviteCode)));
    }

    public static final void inviteResolveFailed(String inviteCode, String location, String errorMessage, Integer errorCode) {
        Intrinsics3.checkNotNullParameter(inviteCode, "inviteCode");
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        AnalyticsUtils.Tracker tracker2 = tracker;
        tracker2.track("resolve_invite", CollectionExtensions.filterNonNullValues(Maps6.mapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_CODE, inviteCode), Tuples.to("resolved", Boolean.FALSE), Tuples.to("authenticated", Boolean.valueOf(tracker2.isAuthed$app_productionGoogleRelease())), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_LOCATION, location), Tuples.to("error_message", errorMessage), Tuples.to("error_code", errorCode))));
    }

    public static /* synthetic */ void inviteResolveFailed$default(String str, String str2, String str3, Integer num, int i, Object obj) {
        if ((i & 4) != 0) {
            str3 = null;
        }
        if ((i & 8) != 0) {
            num = null;
        }
        inviteResolveFailed(str, str2, str3, num);
    }

    public static final void inviteShareClicked(ModelInvite invite) {
        if (invite == null) {
            return;
        }
        AnalyticsTracker analyticsTracker = INSTANCE;
        String str = invite.code;
        Intrinsics3.checkNotNullExpressionValue(str, "invite.code");
        Guild guild = invite.guild;
        Long lValueOf = guild != null ? Long.valueOf(guild.getId()) : null;
        Channel channel = invite.getChannel();
        Long lValueOf2 = channel != null ? Long.valueOf(channel.getId()) : null;
        Channel channel2 = invite.getChannel();
        Integer numValueOf = channel2 != null ? Integer.valueOf(channel2.getType()) : null;
        User inviter = invite.getInviter();
        Long lValueOf3 = inviter != null ? Long.valueOf(inviter.getId()) : null;
        GuildScheduledEvent guildScheduledEvent = invite.getGuildScheduledEvent();
        analyticsTracker.inviteShareClicked(str, lValueOf, lValueOf2, numValueOf, lValueOf3, guildScheduledEvent != null ? Long.valueOf(guildScheduledEvent.getId()) : null);
    }

    public static final void nearbyConnected() {
        AnalyticsUtils.Tracker.track$default(tracker, "friend_add_nearby_connected", null, 2, null);
    }

    public static /* synthetic */ void newUserOnboarding$default(AnalyticsTracker analyticsTracker, String str, String str2, String str3, Long l, boolean z2, int i, Object obj) {
        if ((i & 8) != 0) {
            l = null;
        }
        analyticsTracker.newUserOnboarding(str, str2, str3, l, (i & 16) != 0 ? false : z2);
    }

    public static final void openGiftModal(ModelGift gift, Channel channel, String location) {
        Map<String, Object> mapEmptyMap;
        Intrinsics3.checkNotNullParameter(gift, "gift");
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        AnalyticsTracker analyticsTracker = INSTANCE;
        ModelStoreListing storeListing = gift.getStoreListing();
        Map<String, Object> properties = analyticsTracker.toProperties(storeListing != null ? storeListing.getSku() : null);
        if (channel == null || (mapEmptyMap = AnalyticsUtils.INSTANCE.getProperties$app_productionGoogleRelease(channel)) == null) {
            mapEmptyMap = Maps6.emptyMap();
        }
        tracker.track("open_modal", Maps6.plus(Maps6.plus(Maps6.mapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_LOCATION, location), Tuples.to("type", "gift")), mapEmptyMap), properties));
    }

    public static final void openModal(String modalName, String location, Long guildId) {
        Intrinsics3.checkNotNullParameter(modalName, "modalName");
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("location_section", location), Tuples.to("type", modalName));
        if (guildId != null) {
            guildId.longValue();
            mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, String.valueOf(guildId.longValue()));
        }
        tracker.track("open_modal", mapMutableMapOf);
    }

    public static /* synthetic */ void openModal$default(String str, String str2, Long l, int i, Object obj) {
        if ((i & 4) != 0) {
            l = null;
        }
        openModal(str, str2, l);
    }

    public static /* synthetic */ void openUserSheet$default(AnalyticsTracker analyticsTracker, boolean z2, String str, ActivityPlatform activityPlatform, GuildMember guildMember, int i, Object obj) {
        if ((i & 2) != 0) {
            str = null;
        }
        if ((i & 4) != 0) {
            activityPlatform = null;
        }
        if ((i & 8) != 0) {
            guildMember = null;
        }
        analyticsTracker.openUserSheet(z2, str, activityPlatform, guildMember);
    }

    public static final void overlayToggled(boolean isEnabled) {
        tracker.track("mobile_overlay_toggled", MapsJVM.mapOf(Tuples.to("enabled", Boolean.valueOf(isEnabled))));
    }

    public static /* synthetic */ void paymentFlowCompleted$default(AnalyticsTracker analyticsTracker, Traits.Location location, Traits.Subscription subscription, Traits.Payment payment, Traits.StoreSku storeSku, String str, int i, Object obj) {
        analyticsTracker.paymentFlowCompleted(location, (i & 2) != 0 ? null : subscription, (i & 4) != 0 ? null : payment, (i & 8) != 0 ? null : storeSku, (i & 16) != 0 ? null : str);
    }

    public static /* synthetic */ void paymentFlowFailed$default(AnalyticsTracker analyticsTracker, Traits.Location location, Traits.Subscription subscription, Traits.StoreSku storeSku, Traits.Payment payment, int i, Object obj) {
        if ((i & 2) != 0) {
            subscription = null;
        }
        if ((i & 4) != 0) {
            storeSku = null;
        }
        if ((i & 8) != 0) {
            payment = null;
        }
        analyticsTracker.paymentFlowFailed(location, subscription, storeSku, payment);
    }

    public static /* synthetic */ void paymentFlowStarted$default(AnalyticsTracker analyticsTracker, Traits.Location location, Traits.Subscription subscription, Traits.StoreSku storeSku, Traits.Payment payment, int i, Object obj) {
        if ((i & 2) != 0) {
            subscription = null;
        }
        if ((i & 4) != 0) {
            storeSku = null;
        }
        if ((i & 8) != 0) {
            payment = null;
        }
        analyticsTracker.paymentFlowStarted(location, subscription, storeSku, payment);
    }

    public static /* synthetic */ void paymentFlowStep$default(AnalyticsTracker analyticsTracker, Traits.Location location, Traits.Subscription subscription, String str, String str2, Traits.StoreSku storeSku, Traits.Payment payment, int i, Object obj) {
        analyticsTracker.paymentFlowStep(location, (i & 2) != 0 ? null : subscription, str, str2, (i & 16) != 0 ? null : storeSku, (i & 32) != 0 ? null : payment);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static /* synthetic */ void premiumUpsellViewed$default(AnalyticsTracker analyticsTracker, PremiumUpsellType premiumUpsellType, Traits.Location location, Map map, Traits.Source source, int i, Object obj) {
        if ((i & 2) != 0) {
            location = null;
        }
        if ((i & 4) != 0) {
            map = Maps6.emptyMap();
        }
        if ((i & 8) != 0) {
            source = null;
        }
        analyticsTracker.premiumUpsellViewed(premiumUpsellType, location, map, source);
    }

    public static final void readyPayloadReceived(Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        tracker.track("ready_payload_received", properties);
    }

    public static /* synthetic */ void registerViewed$default(AnalyticsTracker analyticsTracker, ModelInvite modelInvite, int i, Object obj) {
        if ((i & 1) != 0) {
            modelInvite = null;
        }
        analyticsTracker.registerViewed(modelInvite);
    }

    public static /* synthetic */ void relationshipSyncFlow$default(AnalyticsTracker analyticsTracker, String str, String str2, String str3, int i, boolean z2, boolean z3, Map map, int i2, Object obj) {
        analyticsTracker.relationshipSyncFlow(str, str2, str3, i, (i2 & 16) != 0 ? false : z2, (i2 & 32) != 0 ? false : z3, map);
    }

    public static /* synthetic */ void reportStreamProblem$default(AnalyticsTracker analyticsTracker, ModelApplicationStream modelApplicationStream, FeedbackRating feedbackRating, String str, String str2, String str3, int i, Object obj) {
        if ((i & 16) != 0) {
            str3 = null;
        }
        analyticsTracker.reportStreamProblem(modelApplicationStream, feedbackRating, str, str2, str3);
    }

    public static /* synthetic */ void searchStart$default(AnalyticsTracker analyticsTracker, SearchType searchType, Traits.Location location, Map map, boolean z2, int i, Object obj) {
        if ((i & 8) != 0) {
            z2 = false;
        }
        analyticsTracker.searchStart(searchType, location, map, z2);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static /* synthetic */ void settingsPaneViewed$default(AnalyticsTracker analyticsTracker, String str, String str2, Map map, int i, Object obj) {
        if ((i & 4) != 0) {
            map = null;
        }
        analyticsTracker.settingsPaneViewed(str, str2, map);
    }

    private final void showTutorial(String tutorial) {
        tracker.track("show_tutorial", MapsJVM.mapOf(Tuples.to("tutorial", tutorial)));
    }

    private final Long toFingerprintNumber(String str) {
        String strSubstringBefore = Strings4.substringBefore(str, '.', "");
        if (!(strSubstringBefore.length() > 0)) {
            strSubstringBefore = null;
        }
        if (strSubstringBefore != null) {
            return StringNumberConversions.toLongOrNull(strSubstringBefore);
        }
        return null;
    }

    private final Map<String, Object> toProperties(MediaEngine.AudioInfo audioInfo, Map<String, Object> map) {
        if (audioInfo == null) {
            return map;
        }
        map.put("audio_subsystem", audioInfo.audioSubsystem);
        map.put("audio_layer", audioInfo.audioLayer);
        return map;
    }

    private final void trackStageChannelEvent(String event, long channelId, Map<String, ? extends Object> extraProperties) {
        Map<String, Object> stageChannelMetadata = getStageChannelMetadata(channelId);
        if (stageChannelMetadata != null) {
            tracker.track(event, Maps6.plus(stageChannelMetadata, extraProperties));
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static /* synthetic */ void trackStageChannelEvent$default(AnalyticsTracker analyticsTracker, String str, long j, Map map, int i, Object obj) {
        if ((i & 4) != 0) {
            map = Maps6.emptyMap();
        }
        analyticsTracker.trackStageChannelEvent(str, j, map);
    }

    private final void trackUserVoiceEvent(Channel channel, long j, String str, Tuples2<String, Long> tuples2) {
        withGameProperties(j, new AnonymousClass1(channel, tuples2, str));
    }

    public static final void userExperimentTriggered(String experimentName, int revision, int population, int bucket) {
        Intrinsics3.checkNotNullParameter(experimentName, "experimentName");
        tracker.track("experiment_user_triggered", Maps6.mutableMapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_NAME, experimentName), Tuples.to("revision", Integer.valueOf(revision)), Tuples.to("population", Integer.valueOf(population)), Tuples.to("bucket", Integer.valueOf(bucket))));
    }

    public static final void welcomeScreenChannelSelected(int index, long guildId, List<String> optionDescriptions, List<Long> channelIds, String description, boolean hasCustomEmojis) {
        Intrinsics3.checkNotNullParameter(optionDescriptions, "optionDescriptions");
        Intrinsics3.checkNotNullParameter(channelIds, "channelIds");
        Intrinsics3.checkNotNullParameter(description, ModelAuditLogEntry.CHANGE_KEY_DESCRIPTION);
        HashMap map = new HashMap();
        map.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
        map.put("index", Integer.valueOf(index));
        map.put("options", optionDescriptions);
        map.put("options_channel_ids", channelIds);
        map.put("guild_description", description);
        map.put("has_custom_emojis", Boolean.valueOf(hasCustomEmojis));
        tracker.track("guild_welcome_screen_option_selected", map);
    }

    private final void withGameProperties(long meId, Function1<? super Map<String, Object>, Unit> onGameProps) {
        ObservableExtensionsKt.appSubscribe$default(getGameProperties(meId), AnalyticsTracker.class, (Context) null, (Function1) null, (Function1) null, (Function0) null, (Function0) null, onGameProps, 62, (Object) null);
    }

    public final void accountLinkFailed(String errorMessage, Integer statusCode, String linkMethod, String currentStep, String platformType) {
        HashMap map = new HashMap();
        if (errorMessage != null) {
            map.put("error_message", errorMessage);
        }
        if (statusCode != null) {
            map.put("status_code", Integer.valueOf(statusCode.intValue()));
        }
        if (linkMethod != null) {
            map.put("link_method", linkMethod);
        }
        if (currentStep != null) {
            map.put("current_step", currentStep);
        }
        if (platformType != null) {
            map.put("platform_type", platformType);
        }
        tracker.track("account_link_failed", map);
    }

    public final void accountLinkStep(String previousStep, String currentStep, String sessionId, String platformType) {
        HashMap map = new HashMap();
        if (previousStep != null) {
            map.put("previous_step", previousStep);
        }
        if (currentStep != null) {
            map.put("current_step", currentStep);
        }
        if (sessionId != null) {
            map.put("session_id", sessionId);
        }
        if (platformType != null) {
            map.put("platform_type", platformType);
        }
        tracker.track("account_link_step", map);
    }

    public final void ackMessage(Channel channel, Function0<? extends Map<String, ? extends Object>> propertyProvider) {
        Intrinsics3.checkNotNullParameter(channel, "channel");
        Intrinsics3.checkNotNullParameter(propertyProvider, "propertyProvider");
        tracker.track(Tuples.to("ack_messages", Long.valueOf(channel.getGuildId())), 900000L, new AnonymousClass1(propertyProvider));
    }

    public final void activityUpdatedSpotify(String trackId, boolean hasImages) {
        Intrinsics3.checkNotNullParameter(trackId, "trackId");
        HashMap map = new HashMap();
        map.put("track_id", trackId);
        map.put("party_platform", Platform.SPOTIFY.getProperName());
        map.put("has_images", Boolean.valueOf(hasImages));
        tracker.track("activity_updated", map);
    }

    public final void ageGateSubmitted(long dob, String sourcePage) {
        Intrinsics3.checkNotNullParameter(sourcePage, "sourcePage");
        AnalyticsUtils.Tracker tracker2 = tracker;
        Long lValueOf = Long.valueOf(dob);
        Locale locale = Locale.ROOT;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd", locale);
        simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        String str = simpleDateFormat.format(new Date(dob));
        Intrinsics3.checkNotNullExpressionValue(str, "formatter.format(Date(this))");
        Long lValueOf2 = Long.valueOf(Long.parseLong(str));
        SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("MM", locale);
        simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
        String str2 = simpleDateFormat2.format(new Date(dob));
        Intrinsics3.checkNotNullExpressionValue(str2, "formatter.format(Date(this))");
        Long lValueOf3 = Long.valueOf(Long.parseLong(str2));
        SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("yyyy", locale);
        simpleDateFormat3.setTimeZone(TimeZone.getTimeZone("UTC"));
        String str3 = simpleDateFormat3.format(new Date(dob));
        Intrinsics3.checkNotNullExpressionValue(str3, "formatter.format(Date(this))");
        TrackAgeGateSubmitted trackAgeGateSubmitted = new TrackAgeGateSubmitted(lValueOf, lValueOf2, lValueOf3, Long.valueOf(Long.parseLong(str3)));
        trackAgeGateSubmitted.e(new TrackSourceMetadata(sourcePage, null, null, null, null, 30));
        tracker2.track(trackAgeGateSubmitted);
    }

    public final void appCrashed() {
        AnalyticsUtils.Tracker.track$default(tracker, "app_crashed", null, 2, null);
    }

    public final void appExceptionThrown(String stacktrace) {
        Intrinsics3.checkNotNullParameter(stacktrace, "stacktrace");
        tracker.track("app_exception_thrown", MapsJVM.mapOf(Tuples.to("stacktrace", stacktrace)));
    }

    public final void appFirstLogin() {
        Persister persister = new Persister("app_first_login", Boolean.TRUE);
        if (((Boolean) persister.get()).booleanValue()) {
            tracker.track("app_first_login", MapsJVM.mapOf(Tuples.to("platform", "Android")));
            persister.set(Boolean.FALSE, true);
        }
    }

    public final void appNativeCrash(boolean didCrash, String exitReason, String exitDescription, String tombstoneGroupHash, String tombstoneCause) {
        tracker.track("app_native_crash", CollectionExtensions.filterNonNullValues(Maps6.mapOf(Tuples.to("did_crash", Boolean.valueOf(didCrash)), Tuples.to("exit_reason", exitReason), Tuples.to("exit_description", exitDescription), Tuples.to("tombstone_hash", tombstoneGroupHash), Tuples.to("tombstone_cause", tombstoneCause))));
    }

    public final void appNotificationDropped(Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        tracker.track("notification_dropped", properties);
    }

    public final void applicationCommandBrowserJump(long targetApplicationId) {
        tracker.track("application_command_browser_jumped", MapsJVM.mapOf(Tuples.to("target_application_id", Long.valueOf(targetApplicationId))));
    }

    public final void applicationCommandBrowserOpened(Map<String, ? extends Object> snapshotProperties) {
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        tracker.track("application_command_browser_opened", CollectionExtensions.filterNonNullValues(snapshotProperties));
    }

    public final void applicationCommandBrowserScrolled() {
        AnalyticsUtils.Tracker.track$default(tracker, "application_command_browser_scrolled", null, 2, null);
    }

    public final void applicationCommandSelected(long applicationId, long commandId, Map<String, ? extends Object> snapshotProperties) {
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        tracker.track("application_command_selected", Maps6.plus(Maps6.mapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_APPLICATION_ID, Long.valueOf(applicationId)), Tuples.to("command_id", Long.valueOf(commandId))), CollectionExtensions.filterNonNullValues(snapshotProperties)));
    }

    public final void applicationCommandValidationFailure(long applicationId, long commandId, String argumentType, boolean isRequired) {
        Intrinsics3.checkNotNullParameter(argumentType, "argumentType");
        tracker.track("application_command_validation_failed", Maps6.mapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_APPLICATION_ID, Long.valueOf(applicationId)), Tuples.to("command_id", Long.valueOf(commandId)), Tuples.to("argument_type", argumentType), Tuples.to("is_required", Boolean.valueOf(isRequired))));
    }

    public final void attributionChange(AdjustAttribution attribution) {
        Intrinsics3.checkNotNullParameter(attribution, "attribution");
        tracker.track("user_attribution_received", Maps6.mapOf(Tuples.to("adjust_tracker_token", attribution.trackerToken), Tuples.to("adjust_tracker_name", attribution.trackerName), Tuples.to("adjust_adid", attribution.adid), Tuples.to("attribution_network", attribution.network), Tuples.to("attribution_campaign", attribution.campaign), Tuples.to("attribution_adgroup", attribution.adgroup), Tuples.to("attribution_creative", attribution.creative)));
    }

    public final void autocompleteOpen(Map<String, ? extends Object> snapshotProperties, String autocompleteType, int numEmojiResults, int numStickerResults) {
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        Intrinsics3.checkNotNullParameter(autocompleteType, "autocompleteType");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.putAll(snapshotProperties);
        linkedHashMap.put("autocomplete_type", autocompleteType);
        linkedHashMap.put("num_emoji_results", Integer.valueOf(numEmojiResults));
        linkedHashMap.put("num_sticker_results", Integer.valueOf(numStickerResults));
        tracker.track("channel_autocomplete_open", Maps6.toMap(linkedHashMap));
    }

    public final void autocompleteSelect(Map<String, ? extends Object> snapshotProperties, String autocompleteType, int numEmojiResults, int numStickerResults, String selectionType, String selection, Long stickerId) {
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        Intrinsics3.checkNotNullParameter(autocompleteType, "autocompleteType");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.putAll(snapshotProperties);
        linkedHashMap.put("autocomplete_type", autocompleteType);
        linkedHashMap.put("num_emoji_results", Integer.valueOf(numEmojiResults));
        linkedHashMap.put("num_sticker_results", Integer.valueOf(numStickerResults));
        if (selectionType != null) {
            linkedHashMap.put("selection_type", selectionType);
        }
        if (selection != null) {
            linkedHashMap.put("selection", selection);
        }
        if (stickerId != null) {
            linkedHashMap.put("sticker_id", Long.valueOf(stickerId.longValue()));
        }
        tracker.track("channel_autocomplete_selected", Maps6.toMap(linkedHashMap));
    }

    public final void callReportProblem(long meId, String rtcConnectionId, Channel channel, Map<Long, VoiceState> guildVoiceStates, Long durationMs, String mediaSessionId, FeedbackRating feedbackRating, Integer reasonCode, String reasonDescription, StoreMediaSettings.VoiceConfiguration voiceConfig, DiscordAudioManager.AudioDevice audioOutputDevice, boolean videoHardwareScalingEnabled, String issueDetails) {
        Intrinsics3.checkNotNullParameter(channel, "channel");
        Intrinsics3.checkNotNullParameter(guildVoiceStates, "guildVoiceStates");
        Intrinsics3.checkNotNullParameter(feedbackRating, "feedbackRating");
        Intrinsics3.checkNotNullParameter(voiceConfig, "voiceConfig");
        Intrinsics3.checkNotNullParameter(audioOutputDevice, "audioOutputDevice");
        HashMap map = new HashMap(Maps6.plus(getVoiceChannelProperties$default(this, meId, channel, durationMs, guildVoiceStates, null, rtcConnectionId, 16, null), toProperties(voiceConfig)));
        map.put("media_session_id", mediaSessionId);
        map.put("audio_output_mode", audioOutputDeviceTypeToString(audioOutputDevice.type));
        String str = audioOutputDevice.com.discord.models.domain.ModelAuditLogEntry.CHANGE_KEY_NAME java.lang.String;
        if (str != null) {
            map.put("output_device_name", str);
        }
        map.put("rating", feedbackRating.getAnalyticsValue());
        map.put("reason_code", reasonCode);
        map.put("reason_description", reasonDescription);
        map.put("feedback", issueDetails);
        map.put("video_hardware_scaling_enabled", Boolean.valueOf(videoHardwareScalingEnabled));
        if (reasonCode != null) {
            AppLog appLog = AppLog.g;
            String strValueOf = String.valueOf(reasonCode);
            LinkedHashMap linkedHashMap = new LinkedHashMap(MapsJVM.mapCapacity(map.size()));
            for (Map.Entry entry : map.entrySet()) {
                linkedHashMap.put(entry.getKey(), String.valueOf(entry.getValue()));
            }
            appLog.e("call_report_problem", strValueOf, null, linkedHashMap);
        }
        tracker.track("call_report_problem", CollectionExtensions.filterNonNullValues(map));
    }

    public final void captchaFailed(String reason) {
        Intrinsics3.checkNotNullParameter(reason, ModelAuditLogEntry.CHANGE_KEY_REASON);
        tracker.track("captcha_failed", MapsJVM.mapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_REASON, reason)));
    }

    public final void changeLogEvent(String event, String version, String revision, Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(event, "event");
        Intrinsics3.checkNotNullParameter(version, "version");
        Intrinsics3.checkNotNullParameter(revision, "revision");
        Intrinsics3.checkNotNullParameter(properties, "properties");
        HashMap map = new HashMap();
        map.put("change_log_id", version + MentionUtils.EMOJIS_AND_STICKERS_CHAR + revision);
        tracker.track(event, Maps6.plus(map, properties));
    }

    public final void channelOpened(long channelId, Function0<? extends Map<String, ? extends Object>> lazyPropertyProvider) {
        Intrinsics3.checkNotNullParameter(lazyPropertyProvider, "lazyPropertyProvider");
        tracker.track(Tuples.to("channel_opened", Long.valueOf(channelId)), 900000L, new AnonymousClass1(lazyPropertyProvider));
    }

    public final void chatInputComponentViewed(String type) {
        Intrinsics3.checkNotNullParameter(type, "type");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put("type", type);
        tracker.track("chat_input_component_viewed", linkedHashMap);
    }

    public final void closeFirstServerTipTutorial(boolean acknowledged) {
        closeTutorial("create-first-server-tip", acknowledged);
    }

    public final void contactSyncToggled(boolean enabled, boolean phoneDiscoverable, boolean emailDiscoverable) {
        tracker.track("contact_sync_toggled", Maps6.mapOf(Tuples.to("is_enabled", Boolean.valueOf(enabled)), Tuples.to("am_discoverable_phone", Boolean.valueOf(phoneDiscoverable)), Tuples.to("am_discoverable_email", Boolean.valueOf(emailDiscoverable))));
    }

    public final void createGuildViewed(StockGuildTemplate stockGuildTemplate, ModelGuildTemplate guildTemplate, String source) {
        Map mapMapOf;
        Intrinsics3.checkNotNullParameter(stockGuildTemplate, "stockGuildTemplate");
        Intrinsics3.checkNotNullParameter(source, "source");
        if (guildTemplate == null || (mapMapOf = Maps6.mapOf(Tuples.to("guild_template_code", guildTemplate.getCode()), Tuples.to("guild_template_name", guildTemplate.getName()), Tuples.to("guild_template_description", guildTemplate.getDescription()), Tuples.to("guild_template_guild_id", Long.valueOf(guildTemplate.getSourceGuildId())))) == null) {
            mapMapOf = MapsJVM.mapOf(Tuples.to("guild_template_name", stockGuildTemplate.name()));
        }
        tracker.track("create_guild_viewed", Maps6.plus(mapMapOf, MapsJVM.mapOf(Tuples.to("location_section", source))));
    }

    public final void customStatusUpdated(WidgetUserSetCustomStatusViewModel.FormState formState, Traits.Location locationTrait) {
        Intrinsics3.checkNotNullParameter(formState, "formState");
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        locationTrait.serializeTo(map);
        toProperties(formState, map);
        tracker.track("custom_status_updated", map);
    }

    public final void deepLinkReceived(Intent intent, RouteHandlers.AnalyticsMetadata metadata, Map<String, ? extends Object> snapshotProperties) {
        Intrinsics3.checkNotNullParameter(intent, "intent");
        Intrinsics3.checkNotNullParameter(metadata, "metadata");
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        tracker.track("deep_link_received", Maps6.plus(CollectionExtensions.filterNonNullValues(Maps6.mapOf(Tuples.to("type", metadata.getType()), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, metadata.getGuildId()), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, metadata.getChannelId()), Tuples.to("voice_action", Boolean.valueOf(intent.getStringExtra("actions.fulfillment.extra.ACTION_TOKEN") != null)), Tuples.to("source", intent.getStringExtra("com.discord.intent.extra.EXTRA_SOURCE")))), CollectionExtensions.filterNonNullValues(snapshotProperties)));
    }

    public final void dismissModal(String modalName, String location, String dismissType, Long guildId) {
        outline.q0(modalName, "modalName", location, ModelAuditLogEntry.CHANGE_KEY_LOCATION, dismissType, "dismissType");
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("location_section", location), Tuples.to("type", modalName), Tuples.to("dismiss_type", dismissType));
        if (guildId != null) {
            guildId.longValue();
            mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, String.valueOf(guildId.longValue()));
        }
        tracker.track("modal_dismissed", mapMutableMapOf);
    }

    public final void echoCancellationConfigured(MediaEngine.EchoCancellationInfo info) {
        Intrinsics3.checkNotNullParameter(info, "info");
        tracker.track("native_echo_cancellation_configured", Maps6.mapOf(Tuples.to("builtin_aec_supported_java", Boolean.valueOf(info.builtinAecSupportedJava)), Tuples.to("builtin_aec_supported_native", Boolean.valueOf(info.builtinAecSupportedNative)), Tuples.to("builtin_aec_requested", Boolean.valueOf(info.builtinAecRequested)), Tuples.to("builtin_aec_enabled", Boolean.valueOf(info.builtinAecEnabled)), Tuples.to("aec_enabled_in_settings", Boolean.valueOf(info.aecEnabledInSettings)), Tuples.to("aec_enabled_in_native_config", Boolean.valueOf(info.aecEnabledInNativeConfig)), Tuples.to("aec_mobile_mode", Boolean.valueOf(info.aecMobileMode)), Tuples.to("aec_enabled_by_default", Boolean.valueOf(info.aecEnabledByDefault)), Tuples.to("aec_mobile_mode_by_default", Boolean.valueOf(info.aecMobileModeByDefault))));
    }

    public final void emojiCategorySelected(long guildId) {
        expressionPickerCategorySelected$default(this, null, Long.valueOf(guildId), "emoji", 1, null);
    }

    public final void expressionPickerOpened(String tab, boolean badged) {
        Intrinsics3.checkNotNullParameter(tab, "tab");
        tracker.track("expression_picker_opened", Maps6.mutableMapOf(Tuples.to("badged", Boolean.valueOf(badged)), Tuples.to("tab", tab)));
    }

    public final void expressionPickerStickerShopViewed(boolean badged) {
        tracker.track("expression_picker_sticker_shop_viewed", Maps6.mutableMapOf(Tuples.to("badged", Boolean.valueOf(badged))));
    }

    public final void expressionPickerTabClicked(String tab, boolean badged) {
        Intrinsics3.checkNotNullParameter(tab, "tab");
        tracker.track("expression_picker_tab_clicked", Maps6.mutableMapOf(Tuples.to("badged", Boolean.valueOf(badged)), Tuples.to("tab", tab)));
    }

    public final void expressionSuggestionsDisplayed(String suggestionTrigger) {
        Intrinsics3.checkNotNullParameter(suggestionTrigger, "suggestionTrigger");
        tracker.track("auto_suggest_displayed", MapsJVM.mapOf(Tuples.to("suggestion_trigger", suggestionTrigger)));
    }

    public final void expressionSuggestionsSelected(long stickerId, String suggestionTrigger) {
        Intrinsics3.checkNotNullParameter(suggestionTrigger, "suggestionTrigger");
        tracker.track("auto_suggest_expression_selected", Maps6.mapOf(Tuples.to("sticker_id", Long.valueOf(stickerId)), Tuples.to("suggestion_trigger", suggestionTrigger)));
    }

    public final void externalDynamicLinkReceived(String fingerprint, String attemptId, String inviteCode, String guildTemplateCode, String authToken, boolean isBackgrounded) {
        String str = fingerprint != null ? fingerprint : inviteCode;
        if (str == null) {
            str = authToken;
        }
        if (str != null) {
            Tuples2[] tuples2Arr = new Tuples2[6];
            tuples2Arr[0] = Tuples.to("fingerprint", fingerprint != null ? toFingerprintNumber(fingerprint) : null);
            tuples2Arr[1] = Tuples.to("attempt_id", attemptId);
            tuples2Arr[2] = Tuples.to("invite_code", inviteCode);
            tuples2Arr[3] = Tuples.to("guild_template_code", guildTemplateCode);
            tuples2Arr[4] = Tuples.to("has_auth_token", Boolean.valueOf(true ^ (authToken == null || StringsJVM.isBlank(authToken))));
            tuples2Arr[5] = Tuples.to("is_backgrounded", Boolean.valueOf(isBackgrounded));
            tracker.track("external_dynamic_link_received", CollectionExtensions.filterNonNullValues(Maps6.mapOf(tuples2Arr)));
        }
    }

    public final void externalShare(Uri uri) {
        Intrinsics3.checkNotNullParameter(uri, NotificationCompat.MessagingStyle.Message.KEY_DATA_URI);
        tracker.trackFireBase("handle_ext_share", insertUriProperties(new HashMap(), uri));
    }

    public final void externalViewClosed(String type, long durationMs) {
        Intrinsics3.checkNotNullParameter(type, "type");
        AnalyticsUtils.Tracker tracker2 = tracker;
        Tuples2[] tuples2Arr = new Tuples2[2];
        tuples2Arr[0] = Tuples.to("type", type);
        Long lValueOf = Long.valueOf(durationMs);
        if (!(lValueOf.longValue() != 0)) {
            lValueOf = null;
        }
        tuples2Arr[1] = Tuples.to("duration_open_ms", lValueOf);
        tracker2.track("app_external_view_closed", CollectionExtensions.filterNonNullValues(Maps6.mapOf(tuples2Arr)));
    }

    public final void failedMessageResolved(int numAttachments, int maxAttachmentSize, int totalAttachmentSize, boolean hasImage, boolean hasVideo, StoreMessages2 resolutionType, long initialAttemptTimestamp, int numRetries, Map<String, ? extends Object> snapshotProperties) {
        Intrinsics3.checkNotNullParameter(resolutionType, "resolutionType");
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put("num_attachments", Integer.valueOf(numAttachments));
        linkedHashMap.put("max_attachment_size", Integer.valueOf(maxAttachmentSize));
        linkedHashMap.put("total_attachment_size", Integer.valueOf(totalAttachmentSize));
        linkedHashMap.put("has_image", Boolean.valueOf(hasImage));
        linkedHashMap.put("has_video", Boolean.valueOf(hasVideo));
        linkedHashMap.put("resolution_type", resolutionType.getAnalyticsValue());
        linkedHashMap.put("initial_attempt_ts", Long.valueOf(initialAttemptTimestamp));
        linkedHashMap.put("num_retries", Integer.valueOf(numRetries));
        tracker.track("failed_message_resolved", Maps6.plus(linkedHashMap, CollectionExtensions.filterNonNullValues(snapshotProperties)));
    }

    public final void fileUploadAlertViewed(SendUtils2 alertType, int numAttachments, int maxAttachmentSize, int totalAttachmentSize, boolean hasImage, boolean hasVideo, boolean isPremium, Map<String, ? extends Object> snapshotProperties) {
        Intrinsics3.checkNotNullParameter(alertType, "alertType");
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put("alert_type", alertType.getAnalyticsValue());
        linkedHashMap.put("num_attachments", Integer.valueOf(numAttachments));
        linkedHashMap.put("max_attachment_size", Integer.valueOf(maxAttachmentSize));
        linkedHashMap.put("total_attachment_size", Integer.valueOf(totalAttachmentSize));
        linkedHashMap.put("has_image", Boolean.valueOf(hasImage));
        linkedHashMap.put("has_video", Boolean.valueOf(hasVideo));
        linkedHashMap.put("is_premium", Boolean.valueOf(isPremium));
        tracker.track("file_upload_alert_viewed", Maps6.plus(linkedHashMap, CollectionExtensions.filterNonNullValues(snapshotProperties)));
    }

    public final void friendAddViewed(String type) {
        Intrinsics3.checkNotNullParameter(type, "type");
        tracker.track("friend_add_viewed", MapsJVM.mapOf(Tuples.to("friend_add_type", type)));
    }

    public final void friendRequestFailed(CharSequence query, String username, Integer discriminator, String reason) {
        Intrinsics3.checkNotNullParameter(query, "query");
        Intrinsics3.checkNotNullParameter(username, "username");
        HashMap map = new HashMap();
        if (reason != null) {
            map.put(ModelAuditLogEntry.CHANGE_KEY_REASON, reason);
            map.put("discrim_len", Integer.valueOf(String.valueOf(discriminator).length()));
            map.put("username_len", Integer.valueOf(username.length()));
            map.put("is_email_like", Boolean.valueOf(EmailUtils.INSTANCE.isEmailLike(query.toString())));
            map.put("is_num_only", Boolean.valueOf(PhoneUtils.INSTANCE.isValidPhoneFragment(query.toString())));
        }
        tracker.track("friend_request_failed", map);
    }

    public final void friendsListViewed() {
        AnalyticsUtils.Tracker.track$default(tracker, "friends_list_viewed", null, 2, null);
    }

    public final AnalyticsUtils.Tracker getTracker() {
        return tracker;
    }

    public final void giftResolved(ModelGift gift) {
        Intrinsics3.checkNotNullParameter(gift, "gift");
        ModelStoreListing storeListing = gift.getStoreListing();
        tracker.track("gift_code_resolved", Maps6.plus(toProperties(storeListing != null ? storeListing.getSku() : null), Maps6.mapOf(Tuples.to("gift_code", gift.getCode()), Tuples.to("gift_code_max_uses", Integer.valueOf(gift.getMaxUses())), Tuples.to("resolved", Boolean.TRUE))));
    }

    public final void giftResolvedFailed(String giftCode) {
        Intrinsics3.checkNotNullParameter(giftCode, "giftCode");
        tracker.track("gift_code_resolved", Maps6.mapOf(Tuples.to("gift_code", giftCode), Tuples.to("resolved", Boolean.FALSE)));
    }

    public final void guildBoostPromotionClosed(long guildId, Traits.Location locationTrait, Long channelId) {
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        map.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
        if (channelId != null) {
            map.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channelId.longValue()));
        }
        locationTrait.serializeTo(map);
        tracker.track("premium_guild_promotion_closed", map);
    }

    public final void guildBoostPromotionOpened(long guildId, Traits.Location locationTrait, Long channelId) {
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        map.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
        if (channelId != null) {
            map.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channelId.longValue()));
        }
        locationTrait.serializeTo(map);
        tracker.track("premium_guild_promotion_opened", map);
    }

    public final void guildCategorySelected(long guildId) {
        expressionPickerCategorySelected$default(this, null, Long.valueOf(guildId), "sticker", 1, null);
    }

    public final void guildCreationIntentSelected(Boolean isCommunity) {
        AnalyticsUtils.Tracker tracker2 = tracker;
        Tuples2[] tuples2Arr = new Tuples2[2];
        tuples2Arr[0] = Tuples.to("skipped", Boolean.valueOf(isCommunity == null));
        tuples2Arr[1] = Tuples.to("is_community", Boolean.valueOf(isCommunity != null ? isCommunity.booleanValue() : false));
        tracker2.track("guild_creation_intent_selected", Maps6.mapOf(tuples2Arr));
    }

    public final void guildRoleSubscriptionUpsellOpened(long guildRoleSubscriptionGroupListingId, List<Long> guildRoleSubscriptionTierListingIds, boolean hasUserActiveSubscriptions, String location) {
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        AnalyticsUtils.Tracker tracker2 = tracker;
        TrackRoleSubscriptionListingUpsellPageViewedV3 trackRoleSubscriptionListingUpsellPageViewedV3 = new TrackRoleSubscriptionListingUpsellPageViewedV3(Long.valueOf(guildRoleSubscriptionGroupListingId), guildRoleSubscriptionTierListingIds, Boolean.valueOf(hasUserActiveSubscriptions));
        trackRoleSubscriptionListingUpsellPageViewedV3.e(new TrackBase(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, location, null, null, null, null, null, null, null, null, null, null, null, null, -1, -1073741825, 2047));
        tracker2.track(trackRoleSubscriptionListingUpsellPageViewedV3);
    }

    public final void guildTemplateResolved(ModelGuildTemplate guildTemplate) {
        Intrinsics3.checkNotNullParameter(guildTemplate, "guildTemplate");
        tracker.track("guild_template_resolved", Maps6.mapOf(Tuples.to("resolved", Boolean.TRUE), Tuples.to("guild_template_code", guildTemplate.getCode()), Tuples.to("guild_template_name", guildTemplate.getName()), Tuples.to("guild_template_description", guildTemplate.getDescription()), Tuples.to("guild_template_guild_id", Long.valueOf(guildTemplate.getSourceGuildId()))));
    }

    public final void guildViewed(long guildId, Function0<? extends Map<String, ? extends Object>> lazyPropertyProvider) {
        Intrinsics3.checkNotNullParameter(lazyPropertyProvider, "lazyPropertyProvider");
        tracker.track(Tuples.to("guild_viewed", Long.valueOf(guildId)), 900000L, new AnonymousClass1(lazyPropertyProvider));
    }

    public final void impressionInviteAccept(String inviteCode) {
        if (inviteCode != null) {
            tracker.track(new TrackImpressionInviteAccept(inviteCode, null, 2));
        }
    }

    public final void inviteResolved(ModelInvite invite, String location) {
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        AnalyticsUtils.Tracker tracker2 = tracker;
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("resolved", Boolean.TRUE), Tuples.to("authenticated", Boolean.valueOf(tracker2.isAuthed$app_productionGoogleRelease())), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_LOCATION, location));
        if (invite != null) {
            String str = invite.code;
            Intrinsics3.checkNotNullExpressionValue(str, "invite.code");
            mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_CODE, str);
            Channel channel = invite.getChannel();
            if (channel != null) {
                mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channel.getId()));
                mapMutableMapOf.put("channel_type", Integer.valueOf(channel.getType()));
            }
            Guild guild = invite.guild;
            if (guild != null) {
                mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guild.getId()));
            }
            User inviter = invite.getInviter();
            if (inviter != null) {
                mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_INVITER_ID, Long.valueOf(inviter.getId()));
            }
        }
        tracker2.track("resolve_invite", mapMutableMapOf);
    }

    public final void inviteSent(ModelInvite invite, Map<String, ? extends Object> snapshotProperties) {
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        tracker.track("invite_sent", toProperties(invite, CollectionExtensions.filterNonNullValues(snapshotProperties)));
    }

    public final void inviteSuggestionOpened(long guildId, List<Channel> channelSuggestions, List<? extends com.discord.models.user.User> userSuggestions) {
        Collection collectionEmptyList;
        Intrinsics3.checkNotNullParameter(channelSuggestions, "channelSuggestions");
        Intrinsics3.checkNotNullParameter(userSuggestions, "userSuggestions");
        List[] listArr = new List[2];
        ArrayList arrayList = new ArrayList();
        Iterator<T> it = channelSuggestions.iterator();
        while (it.hasNext()) {
            List<User> listZ = ((Channel) it.next()).z();
            if (listZ != null) {
                collectionEmptyList = new ArrayList(Iterables2.collectionSizeOrDefault(listZ, 10));
                Iterator<T> it2 = listZ.iterator();
                while (it2.hasNext()) {
                    collectionEmptyList.add(Long.valueOf(((User) it2.next()).getId()));
                }
            } else {
                collectionEmptyList = Collections2.emptyList();
            }
            MutableCollections.addAll(arrayList, collectionEmptyList);
        }
        listArr[0] = arrayList;
        ArrayList arrayList2 = new ArrayList(Iterables2.collectionSizeOrDefault(userSuggestions, 10));
        Iterator<T> it3 = userSuggestions.iterator();
        while (it3.hasNext()) {
            arrayList2.add(Long.valueOf(((com.discord.models.user.User) it3.next()).getId()));
        }
        listArr[1] = arrayList2;
        Observable<R> observableG = StoreStream.INSTANCE.getUserRelationships().observe(_Collections.distinct(Iterables2.flatten(Collections2.listOf((Object[]) listArr)))).G(AnonymousClass1.INSTANCE);
        Intrinsics3.checkNotNullExpressionValue(observableG, "StoreStream\n        .get…         }.keys\n        }");
        ObservableExtensionsKt.appSubscribe$default(ObservableExtensionsKt.computationLatest(ObservableExtensionsKt.takeSingleUntilTimeout$default(observableG, 0L, false, 3, null)), AnalyticsTracker.class, (Context) null, (Function1) null, (Function1) null, (Function0) null, (Function0) null, new AnonymousClass2(channelSuggestions, userSuggestions, guildId), 62, (Object) null);
    }

    public final void joinGuildViewed() {
        AnalyticsUtils.Tracker.track$default(tracker, "join_guild_viewed", null, 2, null);
    }

    public final void launchGame(String gameName) {
        Intrinsics3.checkNotNullParameter(gameName, "gameName");
        HashMap map = new HashMap();
        map.put("game", gameName);
        map.put("game_platform", "android");
        tracker.track("launch_game", map);
    }

    public final void loginAttempt(boolean isSuccessful) {
        if (isSuccessful) {
            AdjustEventTracker.INSTANCE.trackLogin();
        }
    }

    public final void loginViewed(ModelInvite invite) {
        tracker.track("login_viewed", toProperties(invite, new LinkedHashMap()));
    }

    public final void mediaSessionJoined(Map<String, ? extends Object> properties, Channel channel) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        Map<String, ? extends Object> mutableMap = Maps6.toMutableMap(properties);
        if (channel != null) {
            mutableMap.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channel.getId()));
            mutableMap.put("channel_type", Integer.valueOf(channel.getType()));
            long guildId = channel.getGuildId();
            if (guildId > 0) {
                mutableMap.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
            }
        }
        tracker.track("media_session_joined", mutableMap);
    }

    public final Map<String, Object> modelInviteToProperties(ModelInvite modelInvite, Map<String, Object> properties) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        if (modelInvite == null) {
            return properties;
        }
        String str = modelInvite.code;
        Intrinsics3.checkNotNullExpressionValue(str, "modelInvite.code");
        properties.put("invite_code", str);
        Channel channel = modelInvite.getChannel();
        if (channel != null) {
            properties.put("invite_channel_id", Long.valueOf(channel.getId()));
            properties.put("invite_channel_type", Integer.valueOf(channel.getType()));
        }
        Guild guild = modelInvite.guild;
        if (guild != null) {
            properties.put("invite_guild_id", Long.valueOf(guild.getId()));
        }
        User inviter = modelInvite.getInviter();
        if (inviter != null) {
            properties.put("invite_inviter_id", Long.valueOf(inviter.getId()));
        }
        return properties;
    }

    public final void nameSubmitted(int numWords, int numChars) {
        tracker.track("name_submitted", Maps6.mapOf(Tuples.to("num_words", Integer.valueOf(numWords)), Tuples.to("num_chars", Integer.valueOf(numChars))));
    }

    public final void newUserOnboarding(String flowType, String fromStep, String toStep, Long fromStepStartTime, boolean skip) {
        outline.q0(flowType, "flowType", fromStep, "fromStep", toStep, "toStep");
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("flow_type", flowType), Tuples.to("from_step", fromStep), Tuples.to("to_step", toStep), Tuples.to("skip", Boolean.valueOf(skip)));
        if (fromStepStartTime != null) {
            fromStepStartTime.longValue();
            mapMutableMapOf.put("seconds_on_from_step", Long.valueOf(ClockFactory.get().currentTimeMillis() - fromStepStartTime.longValue()));
        }
        tracker.track("nuo_transition", mapMutableMapOf);
    }

    public final void notificationPermissionStatus(Context context, NotificationClient.SettingsV2 notificationSettings) {
        Intrinsics3.checkNotNullParameter(context, "context");
        Intrinsics3.checkNotNullParameter(notificationSettings, "notificationSettings");
        tracker.track("notification_permission_status", CollectionExtensions.filterNonNullValues(Maps6.mapOf(Tuples.to("os_enabled", Boolean.valueOf(NotificationManagerCompat.from(context).areNotificationsEnabled())), Tuples.to("foreground_app_enabled", Boolean.valueOf(notificationSettings.isEnabled())), Tuples.to("background_app_enabled", Boolean.valueOf(notificationSettings.isEnabledInApp())))));
    }

    public final void notificationSettingsUpdated(ModelNotificationSettings userGuildSettings, Channel channel) {
        boolean z2;
        Object next;
        ModelMuteConfig muteConfig;
        Intrinsics3.checkNotNullParameter(userGuildSettings, "userGuildSettings");
        HashMap map = new HashMap();
        map.put("update_type", userGuildSettings.getChannelOverrides() == null ? "guild" : "channel");
        map.put("guild_suppress_everyone", Boolean.valueOf(userGuildSettings.isSuppressEveryone()));
        map.put("guild_suppress_roles", Boolean.valueOf(userGuildSettings.isSuppressRoles()));
        map.put("guild_is_muted", Boolean.valueOf(userGuildSettings.isMuted()));
        ModelMuteConfig muteConfig2 = userGuildSettings.getMuteConfig();
        Long endTimeMs = null;
        map.put("guild_muted_until", muteConfig2 != null ? muteConfig2.getEndTimeMs() : null);
        map.put("guild_receive_mobile_push", Boolean.valueOf(userGuildSettings.isMobilePush()));
        map.put("guild_message_notification_settings", getAnalyticsValueForNotificationFrequency(Integer.valueOf(userGuildSettings.getMessageNotifications())));
        map.put("parent_id", channel != null ? Long.valueOf(channel.getParentId()) : null);
        List<ModelNotificationSettings.ChannelOverride> channelOverrides = userGuildSettings.getChannelOverrides();
        Intrinsics3.checkNotNullExpressionValue(channelOverrides, "userGuildSettings.channelOverrides");
        Iterator<T> it = channelOverrides.iterator();
        while (true) {
            z2 = true;
            if (!it.hasNext()) {
                next = null;
                break;
            }
            next = it.next();
            ModelNotificationSettings.ChannelOverride channelOverride = (ModelNotificationSettings.ChannelOverride) next;
            Intrinsics3.checkNotNullExpressionValue(channelOverride, "it");
            if (channel != null && channelOverride.getChannelId() == channel.getId()) {
                break;
            }
        }
        ModelNotificationSettings.ChannelOverride channelOverride2 = (ModelNotificationSettings.ChannelOverride) next;
        Boolean boolValueOf = channelOverride2 != null ? Boolean.valueOf(channelOverride2.isMuted()) : null;
        Integer numValueOf = channelOverride2 != null ? Integer.valueOf(channelOverride2.getMessageNotifications()) : null;
        if (channel != null) {
            if ((channel.getGuildId() == -1 || channel.getGuildId() == 0) ? false : true) {
                if (!Intrinsics3.areEqual(boolValueOf, Boolean.TRUE) && numValueOf == null) {
                    z2 = false;
                }
                map.put("channel_is_overridden", Boolean.valueOf(z2));
            }
        }
        map.put("channel_is_muted", boolValueOf);
        if (channelOverride2 != null && (muteConfig = channelOverride2.getMuteConfig()) != null) {
            endTimeMs = muteConfig.getEndTimeMs();
        }
        map.put("channel_muted_until", endTimeMs);
        map.put("channel_message_notification_settings", getAnalyticsValueForNotificationFrequency(numValueOf));
        tracker.track("notification_settings_updated", CollectionExtensions.filterNonNullValues(map));
    }

    public final void oauth2AuthorizedViewed(long applicationId) {
        tracker.track("oauth2_authorize_viewed", MapsJVM.mapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_APPLICATION_ID, Long.valueOf(applicationId))));
    }

    public final void openCallFeedbackSheet(long guildId, long channelId, int channelType) {
        HashMap map = new HashMap();
        map.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
        map.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channelId));
        map.put("channel_type", Integer.valueOf(channelType));
        map.put("type", "Call Session Feedback");
        tracker.track("open_popout", map);
    }

    public final void openCustomEmojiPopout(long guildId, long emojiId, boolean isPremium, boolean joinedSourceGuild, boolean sourceGuildPrivate, Map<String, ? extends Object> channelProperties) {
        Intrinsics3.checkNotNullParameter(channelProperties, "channelProperties");
        String str = (!isPremium && joinedSourceGuild) || (!isPremium && !joinedSourceGuild && !sourceGuildPrivate) ? " (Upsell)" : !isPremium && !joinedSourceGuild && sourceGuildPrivate ? " (Soft Upsell)" : "";
        tracker.track("open_popout", Maps6.plus(channelProperties, Maps6.mapOf(Tuples.to("type", "Custom Emoji Popout" + str), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId)), Tuples.to("emoji_id", Long.valueOf(emojiId)))));
    }

    public final void openGuildProfileSheet(long guildId) {
        HashMap map = new HashMap();
        map.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
        map.put("type", "Guild Profile");
        tracker.track("open_popout", map);
    }

    public final void openGuildScheduledEventSheet(long guildId, int numEvents) {
        tracker.track("open_modal", Maps6.mapOf(Tuples.to("type", "Guild Events Modal"), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId)), Tuples.to("guild_events_count", Integer.valueOf(numEvents))));
    }

    public final void openPopout(String popoutName, String location) {
        Intrinsics3.checkNotNullParameter(popoutName, "popoutName");
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        tracker.track("open_popout", Maps6.mapOf(Tuples.to("location_section", location), Tuples.to("type", popoutName)));
    }

    public final void openUnicodeEmojiPopout(long guildId, Map<String, ? extends Object> channelProperties) {
        Intrinsics3.checkNotNullParameter(channelProperties, "channelProperties");
        tracker.track("open_popout", Maps6.plus(channelProperties, Maps6.mapOf(Tuples.to("type", "Standard Emoji Popout"), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId)))));
    }

    public final void openUserSheet(boolean profileHasPremiumCustomization, String gameName, ActivityPlatform gamePlatform, GuildMember guildMember) {
        HashMap map = new HashMap();
        map.put("profile_has_nitro_customization", Boolean.valueOf(profileHasPremiumCustomization));
        if (gameName != null) {
            map.put("game_name", gameName);
        }
        if (gamePlatform != null) {
            String strName = gamePlatform.name();
            Locale locale = Locale.ROOT;
            Intrinsics3.checkNotNullExpressionValue(locale, "Locale.ROOT");
            Objects.requireNonNull(strName, "null cannot be cast to non-null type java.lang.String");
            String lowerCase = strName.toLowerCase(locale);
            Intrinsics3.checkNotNullExpressionValue(lowerCase, "(this as java.lang.String).toLowerCase(locale)");
            map.put("game_platform", lowerCase);
        }
        map.put("type", "User Sheet");
        if (guildMember != null) {
            String nick = guildMember.getNick();
            map.put("has_nickname", Boolean.valueOf(!(nick == null || nick.length() == 0)));
            map.put("has_guild_member_avatar", Boolean.valueOf(guildMember.hasAvatar()));
            map.put("has_guild_member_banner", Boolean.valueOf(guildMember.hasBanner()));
            String bio = guildMember.getBio();
            map.put("has_guild_member_bio", Boolean.valueOf(!(bio == null || bio.length() == 0)));
        }
        tracker.track("open_popout", map);
    }

    public final void openUserStatusSheet(Traits.Location locationTrait, boolean hasCustomStatus) {
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        locationTrait.serializeTo(map);
        map.put("type", "User Status Menu");
        map.put("has_custom_status", Boolean.valueOf(hasCustomStatus));
        tracker.track("open_popout", map);
    }

    public final void overlayVoiceClosed(Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        tracker.track("mobile_overlay_closed", Maps6.plus(MapsJVM.mapOf(Tuples.to("type", "voice")), properties));
    }

    public final void overlayVoiceOpened(Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        tracker.track("mobile_overlay_opened", Maps6.plus(MapsJVM.mapOf(Tuples.to("type", "voice")), properties));
    }

    public final void paymentFlowCompleted(Traits.Location locationTrait, Traits.Subscription subscriptionTrait, Traits.Payment paymentTrait, Traits.StoreSku storeSkuTrait, String paymentType) {
        HashMap map = new HashMap();
        if (locationTrait != null) {
            locationTrait.serializeTo(map);
        }
        if (subscriptionTrait != null) {
            subscriptionTrait.serializeTo(map);
        }
        if (paymentTrait != null) {
            paymentTrait.serializeTo(map);
        }
        if (storeSkuTrait != null) {
            storeSkuTrait.serializeTo(map);
        }
        if (paymentType != null) {
            map.put("payment_type", paymentType);
        }
        tracker.track("payment_flow_completed", map);
    }

    public final void paymentFlowFailed(Traits.Location locationTrait, Traits.Subscription subscriptionTrait, Traits.StoreSku storeSkuTrait, Traits.Payment paymentTrait) {
        HashMap map = new HashMap();
        if (locationTrait != null) {
            locationTrait.serializeTo(map);
        }
        if (subscriptionTrait != null) {
            subscriptionTrait.serializeTo(map);
        }
        if (storeSkuTrait != null) {
            storeSkuTrait.serializeTo(map);
        }
        if (paymentTrait != null) {
            paymentTrait.serializeTo(map);
        }
        tracker.track("payment_flow_failed", map);
    }

    public final void paymentFlowStarted(Traits.Location locationTrait, Traits.Subscription subscriptionTrait, Traits.StoreSku storeSkuTrait, Traits.Payment paymentTrait) {
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        locationTrait.serializeTo(map);
        if (subscriptionTrait != null) {
            subscriptionTrait.serializeTo(map);
        }
        if (storeSkuTrait != null) {
            storeSkuTrait.serializeTo(map);
        }
        if (paymentTrait != null) {
            paymentTrait.serializeTo(map);
        }
        tracker.track("payment_flow_started", map);
    }

    public final void paymentFlowStep(Traits.Location locationTrait, Traits.Subscription subscriptionTrait, String toStep, String fromStep, Traits.StoreSku storeSkuTrait, Traits.Payment paymentTrait) {
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        Intrinsics3.checkNotNullParameter(toStep, "toStep");
        Intrinsics3.checkNotNullParameter(fromStep, "fromStep");
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("to_step", toStep), Tuples.to("from_step", fromStep));
        locationTrait.serializeTo(mapMutableMapOf);
        if (subscriptionTrait != null) {
            subscriptionTrait.serializeTo(mapMutableMapOf);
        }
        if (storeSkuTrait != null) {
            storeSkuTrait.serializeTo(mapMutableMapOf);
        }
        if (paymentTrait != null) {
            paymentTrait.serializeTo(mapMutableMapOf);
        }
        tracker.track("payment_flow_step", mapMutableMapOf);
    }

    public final void permissionsAcked(String permissionType, boolean granted) {
        String str;
        Intrinsics3.checkNotNullParameter(permissionType, "permissionType");
        if (granted) {
            str = "accepted";
        } else {
            if (granted) {
                throw new NoWhenBranchMatchedException();
            }
            str = "denied";
        }
        tracker.track("permissions_acked", Maps6.mapOf(Tuples.to("type", permissionType), Tuples.to("action", str)));
    }

    public final void permissionsRequested(String permissionType) {
        Intrinsics3.checkNotNullParameter(permissionType, "permissionType");
        tracker.track("permissions_requested", MapsJVM.mapOf(Tuples.to("type", permissionType)));
    }

    public final void premiumSettingsOpened(Traits.Location locationTrait) {
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        locationTrait.serializeTo(map);
        tracker.track("premium_promotion_opened", map);
    }

    public final void premiumUpsellViewed(PremiumUpsellType type, Traits.Location locationTrait, Map<String, ? extends Object> properties, Traits.Source sourceTrait) {
        Intrinsics3.checkNotNullParameter(type, "type");
        Intrinsics3.checkNotNullParameter(properties, "properties");
        Map<String, ? extends Object> mutableMap = Maps6.toMutableMap(properties);
        mutableMap.put("type", type.getAnalyticsName());
        if (locationTrait != null) {
            locationTrait.serializeTo(mutableMap);
        }
        if (sourceTrait != null) {
            sourceTrait.serializeTo(mutableMap);
        }
        tracker.track("premium_upsell_viewed", mutableMap);
    }

    public final void promotedToSpeaker(long channelId) {
        trackStageChannelEvent$default(this, "promoted_to_speaker", channelId, null, 4, null);
    }

    public final void quickSwitcherOpen() {
        tracker.track("quickswitcher_opened", MapsJVM.mapOf(Tuples.to("source", "ANDROID_QUICK")));
    }

    public final void quickSwitcherSelect(WidgetGlobalSearchModel model, WidgetGlobalSearchModel.ItemDataPayload selected, int index) {
        Intrinsics3.checkNotNullParameter(model, "model");
        Intrinsics3.checkNotNullParameter(selected, "selected");
        int searchType = model.getSearchType();
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("query_length", Integer.valueOf(model.getFilter().length())), Tuples.to("query_mode", searchType != 0 ? searchType != 1 ? searchType != 2 ? searchType != 3 ? searchType != 4 ? "" : "VOICE_CHANNEL" : "GUILD" : "TEXT_CHANNEL" : "USER" : "GENERAL"), Tuples.to("num_results_total", Integer.valueOf(model.getData().size())), Tuples.to("selected_index", Integer.valueOf(index)));
        if (selected instanceof WidgetGlobalSearchModel.ItemChannel) {
            WidgetGlobalSearchModel.ItemChannel itemChannel = (WidgetGlobalSearchModel.ItemChannel) selected;
            mapMutableMapOf.put("selected_channel_id", Long.valueOf(itemChannel.getChannel().getId()));
            mapMutableMapOf.put("selected_type", itemChannel.getChannel().getType() == 3 ? "GROUP_DM" : "TEXT_CHANNEL");
        } else if (selected instanceof WidgetGlobalSearchModel.ItemUser) {
            mapMutableMapOf.put("selected_user_id", Long.valueOf(((WidgetGlobalSearchModel.ItemUser) selected).getUser().getId()));
            mapMutableMapOf.put("selected_type", "USER");
        } else {
            if (!(selected instanceof WidgetGlobalSearchModel.ItemGuild)) {
                AppLog appLog = AppLog.g;
                StringBuilder sbU = outline.U("Unknown QuickSwitcher type: ");
                sbU.append(selected.getType());
                Logger.e$default(appLog, sbU.toString(), null, null, 6, null);
                return;
            }
            mapMutableMapOf.put("selected_guild_id", Long.valueOf(((WidgetGlobalSearchModel.ItemGuild) selected).getGuild().getId()));
            mapMutableMapOf.put("selected_type", "GUILD");
        }
        tracker.track("quickswitcher_result_selected", mapMutableMapOf);
    }

    public final void registerTransition(String step, String actionType, String identityType, List<String> details, Map<String, ? extends Object> additionalProps) {
        Map<String, ? extends Object> linkedHashMap;
        Intrinsics3.checkNotNullParameter(step, "step");
        Intrinsics3.checkNotNullParameter(actionType, "actionType");
        if (additionalProps == null || (linkedHashMap = Maps6.toMutableMap(additionalProps)) == null) {
            linkedHashMap = new LinkedHashMap<>();
        }
        linkedHashMap.put("step", step);
        if (identityType != null) {
            linkedHashMap.put("identity_type", identityType);
        }
        linkedHashMap.put("action_type", actionType);
        if (details != null) {
            linkedHashMap.put("action_details", details);
        }
        tracker.track("register_transition", linkedHashMap);
    }

    public final void registerViewed(ModelInvite invite) {
        tracker.track("register_viewed", toProperties(invite, Maps6.mutableMapOf(Tuples.to("is_unclaimed", Boolean.FALSE))));
    }

    public final void registered(boolean isSuccessful) {
        if (isSuccessful) {
            AdjustEventTracker.INSTANCE.trackRegister();
        }
    }

    public final void relationshipSyncFlow(String type, String fromStep, String toStep, int secondsOnFromStep, boolean skip, boolean back, Map<String, ? extends Object> additionalProps) {
        Map<String, ? extends Object> linkedHashMap;
        outline.q0(type, "type", fromStep, "fromStep", toStep, "toStep");
        if (additionalProps == null || (linkedHashMap = Maps6.toMutableMap(additionalProps)) == null) {
            linkedHashMap = new LinkedHashMap<>();
        }
        linkedHashMap.put("flow_type", type);
        linkedHashMap.put("from_step", fromStep);
        linkedHashMap.put("to_step", toStep);
        linkedHashMap.put("skip", Boolean.valueOf(skip));
        linkedHashMap.put("back", Boolean.valueOf(back));
        linkedHashMap.put("seconds_on_from_step", Integer.valueOf(secondsOnFromStep));
        tracker.track("relationship_sync_flow", linkedHashMap);
    }

    public final void reportStreamProblem(ModelApplicationStream stream, FeedbackRating rating, String reason, String mediaSessionId, String issueDetails) {
        Intrinsics3.checkNotNullParameter(stream, "stream");
        HashMap map = new HashMap();
        map.put("streamer_user_id", String.valueOf(stream.getOwnerId()));
        map.put("stream_channel_id", String.valueOf(stream.getChannelId()));
        if (stream instanceof ModelApplicationStream.GuildStream) {
            map.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, String.valueOf(((ModelApplicationStream.GuildStream) stream).getGuildId()));
        }
        map.put("rating", rating != null ? rating.getAnalyticsValue() : null);
        map.put("media_session_id", mediaSessionId);
        map.put(ModelAuditLogEntry.CHANGE_KEY_REASON, reason);
        map.put("feedback", issueDetails);
        tracker.track("stream_report_problem", CollectionExtensions.filterNonNullValues(map));
    }

    public final void reportTosViolation(int reason, long channelId, long messageId, List<Long> mutualGuildIds) {
        Intrinsics3.checkNotNullParameter(mutualGuildIds, "mutualGuildIds");
        HashMap map = new HashMap();
        map.put("reason_enum", Integer.valueOf(reason));
        map.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channelId));
        map.put("message_id", Long.valueOf(messageId));
        map.put("location_object", "android_report_modal");
        map.put("mutual_guild_ids", mutualGuildIds);
        tracker.track("message_reported", CollectionExtensions.filterNonNullValues(map));
    }

    public final void requestToSpeakInitiated(long channelId) {
        trackStageChannelEvent$default(this, "request_to_speak_initiated", channelId, null, 4, null);
    }

    public final void reviewRequestAccepted() {
        dismissModal$default(this, "App Store Ratings Prompt", "auto", "accepted", null, 8, null);
    }

    public final void reviewRequestDismissed() {
        dismissModal$default(this, "App Store Ratings Prompt", "auto", "dismissed", null, 8, null);
    }

    public final void reviewRequestTriggered() {
        openModal$default("App Store Ratings Prompt", "auto", null, 4, null);
    }

    public final void searchResultSelected(SearchType searchType, Traits.Location locationTrait, Traits.Source sourceTrait, int totalResultsCount, Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(searchType, "searchType");
        Intrinsics3.checkNotNullParameter(properties, "properties");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put("search_type", searchType.name());
        linkedHashMap.put("total_results", Integer.valueOf(totalResultsCount));
        if (locationTrait != null) {
            locationTrait.serializeTo(linkedHashMap);
        }
        if (sourceTrait != null) {
            sourceTrait.serializeTo(linkedHashMap);
        }
        tracker.track("search_result_selected", Maps6.plus(linkedHashMap, CollectionExtensions.filterNonNullValues(properties)));
    }

    public final void searchResultViewed(SearchType searchType, int totalResultsCount, Integer lockedResultsCount, Traits.Location locationTrait, Map<String, ? extends Object> properties, boolean throttle) {
        Intrinsics3.checkNotNullParameter(searchType, "searchType");
        Intrinsics3.checkNotNullParameter(properties, "properties");
        AnalyticsTracker3 analyticsTracker3 = new AnalyticsTracker3(searchType, totalResultsCount, lockedResultsCount, locationTrait, properties);
        if (throttle) {
            tracker.track(new Tuples2<>("search_result_viewed", null), 1000L, analyticsTracker3);
        } else {
            tracker.track("search_result_viewed", analyticsTracker3.invoke());
        }
    }

    public final void searchResultsEmpty(SearchType searchType, Traits.Location locationTrait, Map<String, ? extends Object> properties, boolean throttle) {
        Intrinsics3.checkNotNullParameter(searchType, "searchType");
        Intrinsics3.checkNotNullParameter(properties, "properties");
        AnalyticsTracker4 analyticsTracker4 = new AnalyticsTracker4(searchType, locationTrait, properties);
        if (throttle) {
            tracker.track(new Tuples2<>("search_result_empty", null), 1000L, analyticsTracker4);
        } else {
            tracker.track("search_result_empty", analyticsTracker4.invoke());
        }
    }

    public final void searchStart(SearchType searchType, Traits.Location locationTrait, Map<String, ? extends Object> properties, boolean throttle) {
        Intrinsics3.checkNotNullParameter(searchType, "searchType");
        Intrinsics3.checkNotNullParameter(properties, "properties");
        AnalyticsTracker5 analyticsTracker5 = new AnalyticsTracker5(searchType, locationTrait, properties);
        if (throttle) {
            tracker.track(new Tuples2<>("search_started", null), 1000L, analyticsTracker5);
        } else {
            tracker.track("search_started", analyticsTracker5.invoke());
        }
    }

    public final void settingsPaneViewed(String settingsType, String pane, Map<String, ? extends Object> extraProperties) {
        Intrinsics3.checkNotNullParameter(settingsType, "settingsType");
        Intrinsics3.checkNotNullParameter(pane, "pane");
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("settings_type", settingsType), Tuples.to("destination_pane", pane));
        if (extraProperties != null) {
            mapMutableMapOf.putAll(extraProperties);
        }
        tracker.track("settings_pane_viewed", mapMutableMapOf);
    }

    public final void showFirstServerTipTutorial() {
        showTutorial("create-first-server-tip");
    }

    public final void smartLockAutoLogin() {
        AnalyticsUtils.Tracker.track$default(tracker, "smart_lock_auto_login", null, 2, null);
    }

    public final void smartLockLogin() {
        AnalyticsUtils.Tracker.track$default(tracker, "smart_lock_login", null, 2, null);
    }

    public final void smartLockLoginCredentialsFailed() {
        AnalyticsUtils.Tracker.track$default(tracker, "smart_lock_login_credentials_failed", null, 2, null);
    }

    public final void stickerPackCategorySelected(long stickerPackId) {
        expressionPickerCategorySelected$default(this, Long.valueOf(stickerPackId), null, "sticker", 2, null);
    }

    public final void stickerPackViewAllViewed(Sticker sticker, String type, String location, Traits.Location locationTrait) {
        Intrinsics3.checkNotNullParameter(sticker, "sticker");
        Intrinsics3.checkNotNullParameter(type, "type");
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        Long packId = sticker.getPackId();
        Intrinsics3.checkNotNull(packId);
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("sticker_id", Long.valueOf(sticker.getId())), Tuples.to("sticker_pack_id", packId), Tuples.to("type", type));
        if (location != null) {
            mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_LOCATION, location);
        }
        locationTrait.serializeTo(mapMutableMapOf);
        tracker.track("open_popout", mapMutableMapOf);
    }

    public final void stickerPopoutOpened(long stickerPackId, String location, Traits.Location locationTrait) {
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_LOCATION, location), Tuples.to("sticker_pack_id", Long.valueOf(stickerPackId)), Tuples.to("type", "Sticker Upsell Sheet"));
        locationTrait.serializeTo(mapMutableMapOf);
        tracker.track("open_popout", mapMutableMapOf);
    }

    public final void stickerSuggestionsEnabledToggled(boolean enabled, Traits.Location location) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put("enabled", Boolean.valueOf(enabled));
        if (location != null) {
            linkedHashMap.put(ModelAuditLogEntry.CHANGE_KEY_LOCATION, location);
        }
        tracker.track("sticker_suggestions_enabled_toggled", linkedHashMap);
    }

    public final void surveyViewed(String surveyId) {
        Intrinsics3.checkNotNullParameter(surveyId, "surveyId");
        Bundle bundle = new Bundle();
        bundle.putString("survey_id", surveyId);
        getFirebaseAnalytics().f3109b.c(null, "Survey_Viewed", bundle, false, true, null);
    }

    public final void textInVoiceOpened(long channelId, Function0<? extends Map<String, ? extends Object>> lazyPropertyProvider) {
        Intrinsics3.checkNotNullParameter(lazyPropertyProvider, "lazyPropertyProvider");
        tracker.track(Tuples.to("text_in_voice_opened", Long.valueOf(channelId)), 900000L, new AnonymousClass1(lazyPropertyProvider));
    }

    public final void threadBrowserTabChanged(Map<String, ? extends Object> snapshotProperties, String type) {
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        Intrinsics3.checkNotNullParameter(type, "type");
        tracker.track("thread_browser_tab_changed", CollectionExtensions.filterNonNullValues(Maps6.plus(snapshotProperties, MapsJVM.mapOf(Tuples.to("type", type)))));
    }

    public final void threadCreationStarted(long channelId, long guildId, String location) {
        HashMap map = new HashMap();
        map.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channelId));
        map.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId));
        map.put(ModelAuditLogEntry.CHANGE_KEY_LOCATION, location);
        tracker.track("thread_creation_started", CollectionExtensions.filterNonNullValues(map));
    }

    public final void threadNotificationSettingsUpdated(Map<String, ? extends Object> threadProperties, boolean hasInteractedWith, boolean parentIsMuted, int parentNotificationSetting, int oldFlags, int flags) {
        Intrinsics3.checkNotNullParameter(threadProperties, "threadProperties");
        HashMap map = new HashMap(threadProperties);
        map.put("has_interacted_with_thread", Boolean.valueOf(hasInteractedWith));
        map.put("parent_is_muted", Boolean.valueOf(parentIsMuted));
        ThreadMemberFlags threadMemberFlags = ThreadMemberFlags.INSTANCE;
        map.put("old_thread_notification_setting", getAnalyticsValueForThreadNotificationFrequency(threadMemberFlags, oldFlags));
        map.put("new_thread_notification_setting", getAnalyticsValueForThreadNotificationFrequency(threadMemberFlags, flags));
        map.put("parent_notification_setting", getAnalyticsValueForNotificationFrequency(Integer.valueOf(parentNotificationSetting)));
        tracker.track("notification_settings_updated", CollectionExtensions.filterNonNullValues(map));
    }

    public final void trackAccountLinkStep(String platformType, String previousStep) {
        Intrinsics3.checkNotNullParameter(platformType, "platformType");
        Intrinsics3.checkNotNullParameter(previousStep, "previousStep");
        tracker.track(new TrackAccountLinkStep(previousStep, null, null, platformType, 6));
    }

    public final void trackConnectedAccountInitiated(String platformType, String location) {
        Intrinsics3.checkNotNullParameter(platformType, "platformType");
        Intrinsics3.checkNotNullParameter(location, ModelAuditLogEntry.CHANGE_KEY_LOCATION);
        AnalyticsUtils.Tracker tracker2 = tracker;
        TrackConnectedAccountInitiated trackConnectedAccountInitiated = new TrackConnectedAccountInitiated(platformType);
        trackConnectedAccountInitiated.e(new TrackBase(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, location, null, null, null, null, null, null, null, null, null, null, null, null, -1, -1073741825, 2047));
        tracker2.track(trackConnectedAccountInitiated);
    }

    public final void trackDismissibleContentDismissed(String type) {
        Intrinsics3.checkNotNullParameter(type, "type");
        tracker.track(new TrackDismissibleContentDismissed(type, null, null, null, null, 30));
    }

    public final void trackForceUpdatePasswordSucceeded() {
        tracker.track(new TrackForceUpdatePasswordSucceeded());
    }

    public final void trackGuildIdentityMarketingSheet() {
        tracker.track("tooltip_viewed", MapsJVM.mapOf(Tuples.to("type", "per server identity tooltip")));
    }

    public final void trackReportIssueWithAutoMod(String decisionId, long messageId, CharSequence feedbackType, String content) {
        Intrinsics3.checkNotNullParameter(decisionId, "decisionId");
        Intrinsics3.checkNotNullParameter(feedbackType, "feedbackType");
        Intrinsics3.checkNotNullParameter(content, "content");
        tracker.track(new TrackGuildAutomodFeedback(decisionId, String.valueOf(messageId), null, feedbackType, content, 4));
    }

    public final void trackStartStageOpened(boolean canStartPublicStage, Long stageInstanceId, Long guildId) {
        tracker.track("start_stage_opened", CollectionExtensions.filterNonNullValues(Maps6.mapOf(Tuples.to("can_start_public_stage", Boolean.valueOf(canStartPublicStage)), Tuples.to("stage_instance_id", stageInstanceId), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, guildId))));
    }

    public final void unhandledUrl(String url) {
        Intrinsics3.checkNotNullParameter(url, "url");
        tracker.trackFireBase("unhandled_uri", MapsJVM.mapOf(Tuples.to("url", url)));
    }

    public final void updateNotifications(boolean enabled) {
        tracker.track("local_settings_updated", MapsJVM.mapOf(Tuples.to("notifications_enabled", Boolean.valueOf(enabled))));
    }

    public final void updateNotificationsInApp(boolean enabled) {
        tracker.track("local_settings_updated", MapsJVM.mapOf(Tuples.to("notifications_in_app_enabled", Boolean.valueOf(enabled))));
    }

    public final void upgradePremiumYearlyClosed(Traits.Location locationTrait) {
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        locationTrait.serializeTo(map);
        tracker.track("upgrade_premium_yearly_closed", map);
    }

    public final void userListening(long meId, Set<Long> speakingList, String inputMode, Channel channel) {
        Intrinsics3.checkNotNullParameter(speakingList, "speakingList");
        Intrinsics3.checkNotNullParameter(inputMode, "inputMode");
        Intrinsics3.checkNotNullParameter(channel, "channel");
        boolean z2 = true;
        if ((speakingList instanceof Collection) && speakingList.isEmpty()) {
            z2 = false;
        } else {
            Iterator<T> it = speakingList.iterator();
            while (it.hasNext()) {
                if (((Number) it.next()).longValue() != meId) {
                    break;
                }
            }
            z2 = false;
        }
        if (z2) {
            trackUserVoiceEvent(channel, meId, inputMode, Tuples.to("start_listening", Long.valueOf(channel.getGuildId())));
        }
    }

    public final void userReportSubmitted(String reportName, long guildId, String reason, String feedback, boolean skipped) {
        Intrinsics3.checkNotNullParameter(reportName, "reportName");
        tracker.track("user_report_submitted", CollectionExtensions.filterNonNullValues(Maps6.mapOf(Tuples.to("report_name", reportName), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId)), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_REASON, reason), Tuples.to("feedback", feedback), Tuples.to("skipped", Boolean.valueOf(skipped)))));
    }

    public final void userSpeaking(long meId, Set<Long> speakingList, String inputMode, Channel channel) {
        Intrinsics3.checkNotNullParameter(speakingList, "speakingList");
        Intrinsics3.checkNotNullParameter(inputMode, "inputMode");
        Intrinsics3.checkNotNullParameter(channel, "channel");
        if (speakingList.contains(Long.valueOf(meId))) {
            trackUserVoiceEvent(channel, meId, inputMode, Tuples.to("start_speaking", Long.valueOf(channel.getGuildId())));
        }
    }

    public final void videoEventTimes(String eventType, Long gatewayConnection, Long gatewayHello, Long voiceConnection, Long streamRequested, Long streamConnection, Long streamFirstFrame, Long videoFirstFrame, Long mediaEngineConnection, Long connectionVideoFirstFrame, Long connectionStreamFirstFrame) {
        Intrinsics3.checkNotNullParameter(eventType, "eventType");
        Tuples2[] tuples2Arr = new Tuples2[11];
        tuples2Arr[0] = Tuples.to("event_time_name", eventType);
        tuples2Arr[1] = Tuples.to("gateway_connection", Long.valueOf(gatewayConnection != null ? gatewayConnection.longValue() : -1L));
        tuples2Arr[2] = Tuples.to("gateway_hello", Long.valueOf(gatewayHello != null ? gatewayHello.longValue() : -1L));
        tuples2Arr[3] = Tuples.to("voice_connection", Long.valueOf(voiceConnection != null ? voiceConnection.longValue() : -1L));
        tuples2Arr[4] = Tuples.to("stream_requested", Long.valueOf(streamRequested != null ? streamRequested.longValue() : -1L));
        tuples2Arr[5] = Tuples.to("stream_connection", Long.valueOf(streamConnection != null ? streamConnection.longValue() : -1L));
        tuples2Arr[6] = Tuples.to("stream_first_frame", Long.valueOf(streamFirstFrame != null ? streamFirstFrame.longValue() : -1L));
        tuples2Arr[7] = Tuples.to("video_first_frame", Long.valueOf(videoFirstFrame != null ? videoFirstFrame.longValue() : -1L));
        tuples2Arr[8] = Tuples.to("media_engine_connection", Long.valueOf(mediaEngineConnection != null ? mediaEngineConnection.longValue() : -1L));
        tuples2Arr[9] = Tuples.to("connection_video_first_frame", Long.valueOf(connectionVideoFirstFrame != null ? connectionVideoFirstFrame.longValue() : -1L));
        tuples2Arr[10] = Tuples.to("connection_stream_first_frame", Long.valueOf(connectionStreamFirstFrame != null ? connectionStreamFirstFrame.longValue() : -1L));
        tracker.track("video_event_times", Maps6.mapOf(tuples2Arr));
    }

    public final void videoInputsUpdate(long meId, Channel channel, Map<Long, VoiceState> guildVoiceStates, DeviceDescription4 videoInputDevice, boolean isScreenSharing, String mediaSessionId) {
        Intrinsics3.checkNotNullParameter(guildVoiceStates, "guildVoiceStates");
        if (channel == null) {
            return;
        }
        Map voiceChannelProperties$default = getVoiceChannelProperties$default(this, meId, channel, null, guildVoiceStates, videoInputDevice, null, 36, null);
        String str = ChatInputComponentTypes.CAMERA;
        voiceChannelProperties$default.put("video_input_type", isScreenSharing ? "screen" : videoInputDevice != null ? ChatInputComponentTypes.CAMERA : "none");
        String[] strArr = new String[2];
        strArr[0] = isScreenSharing ? "screen" : null;
        if (videoInputDevice == null) {
            str = null;
        }
        strArr[1] = str;
        voiceChannelProperties$default.put("enabled_inputs", Collections2.listOfNotNull((Object[]) strArr));
        voiceChannelProperties$default.put("media_session_id", mediaSessionId);
        withGameProperties(meId, new AnonymousClass1(voiceChannelProperties$default));
    }

    public final void videoLayoutToggled(String videoLayout, long meId, Channel channel) {
        Intrinsics3.checkNotNullParameter(videoLayout, "videoLayout");
        if (channel == null) {
            return;
        }
        Map voiceChannelProperties$default = getVoiceChannelProperties$default(this, meId, channel, null, null, null, null, 60, null);
        voiceChannelProperties$default.put("video_layout", videoLayout);
        tracker.track("video_layout_toggled", CollectionExtensions.filterNonNullValues(voiceChannelProperties$default));
    }

    public final void videoStreamEnded(Map<String, ? extends Object> properties) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        tracker.track("video_stream_ended", CollectionExtensions.filterNonNullValues(properties));
    }

    public final void viewedDisableCommunicationModal(long guildId, long targetUserId) {
        tracker.track("open_modal", Maps6.mapOf(Tuples.to("type", "Set Communication Disabled Modal"), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId)), Tuples.to("other_user_id", Long.valueOf(targetUserId))));
    }

    public final void viewedEnableCommunicationModal(long guildId, long targetUserId) {
        tracker.track("open_modal", Maps6.mapOf(Tuples.to("type", "Clear Communication Disabled Modal"), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId)), Tuples.to("other_user_id", Long.valueOf(targetUserId))));
    }

    public final void voiceAudioOutputModeSelected(long meId, String rtcConnectionId, String mediaSessionId, Channel channel, DiscordAudioManager.DeviceTypes fromAudioOutputMode, DiscordAudioManager.DeviceTypes toAudioOutputMode) {
        Intrinsics3.checkNotNullParameter(channel, "channel");
        Intrinsics3.checkNotNullParameter(fromAudioOutputMode, "fromAudioOutputMode");
        Intrinsics3.checkNotNullParameter(toAudioOutputMode, "toAudioOutputMode");
        Map mapMutableMapOf = Maps6.mutableMapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channel.getId())), Tuples.to("from_audio_output_mode", audioOutputDeviceTypeToString(fromAudioOutputMode)), Tuples.to("to_audio_output_mode", audioOutputDeviceTypeToString(toAudioOutputMode)));
        if (rtcConnectionId != null) {
            mapMutableMapOf.put("rtc_connection_id", rtcConnectionId);
        }
        if (mediaSessionId != null) {
            mapMutableMapOf.put("media_session_id", mediaSessionId);
        }
        tracker.track("voice_audio_output_mode_selected", CollectionExtensions.filterNonNullValues(mapMutableMapOf));
    }

    public final void voiceChannelJoin(long meId, String rtcConnectionId, Channel channel, Map<Long, VoiceState> guildVoiceStates, DeviceDescription4 videoInputDevice, Integer networkType, Long stageInstanceId, Long guildScheduledEventId) {
        Intrinsics3.checkNotNullParameter(rtcConnectionId, "rtcConnectionId");
        Intrinsics3.checkNotNullParameter(channel, "channel");
        Intrinsics3.checkNotNullParameter(guildVoiceStates, "guildVoiceStates");
        Map voiceChannelProperties$default = getVoiceChannelProperties$default(this, meId, channel, null, guildVoiceStates, videoInputDevice, rtcConnectionId, 4, null);
        voiceChannelProperties$default.put("connection_type", getNetworkTypeAnalyticsValue(networkType));
        voiceChannelProperties$default.put("stage_instance_id", stageInstanceId);
        voiceChannelProperties$default.put("guild_scheduled_event_id", guildScheduledEventId);
        withGameProperties(meId, new AnonymousClass1(voiceChannelProperties$default));
    }

    public final void voiceChannelLeave(long meId, String rtcConnectionId, Channel channel, Map<Long, VoiceState> guildVoiceStates, String mediaSessionId, Map<String, ? extends Object> voiceProps, Long durationMs, Long stageInstanceId, Long guildScheduledEventId) {
        Intrinsics3.checkNotNullParameter(rtcConnectionId, "rtcConnectionId");
        Intrinsics3.checkNotNullParameter(channel, "channel");
        Intrinsics3.checkNotNullParameter(guildVoiceStates, "guildVoiceStates");
        Intrinsics3.checkNotNullParameter(voiceProps, "voiceProps");
        Map voiceChannelProperties$default = getVoiceChannelProperties$default(this, meId, channel, durationMs, guildVoiceStates, null, rtcConnectionId, 16, null);
        voiceChannelProperties$default.putAll(voiceProps);
        voiceChannelProperties$default.put("media_session_id", mediaSessionId);
        voiceChannelProperties$default.put("stage_instance_id", stageInstanceId);
        voiceChannelProperties$default.put("guild_scheduled_event_id", guildScheduledEventId);
        withGameProperties(meId, new AnonymousClass1(voiceChannelProperties$default));
    }

    public final void voiceConnectionFailure(Map<String, ? extends Object> properties, Channel channel, String cloudflareBestRegion) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        Map<String, ? extends Object> mutableMap = Maps6.toMutableMap(properties);
        addVoiceConnectionProperties(mutableMap, channel, cloudflareBestRegion);
        tracker.track("voice_connection_failure", mutableMap);
    }

    public final void voiceConnectionSuccess(Map<String, ? extends Object> properties, MediaEngine.AudioInfo audioInfo, Channel channel, String cloudflareBestRegion) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        Intrinsics3.checkNotNullParameter(audioInfo, "audioInfo");
        Map<String, ? extends Object> mutableMap = Maps6.toMutableMap(properties);
        addVoiceConnectionProperties(mutableMap, channel, cloudflareBestRegion);
        toProperties(audioInfo, mutableMap);
        tracker.track("voice_connection_success", mutableMap);
    }

    public final void voiceDisconnect(Map<String, ? extends Object> properties, StoreMediaSettings.VoiceConfiguration voiceConfig, Channel channel, String cloudflareBestRegion) {
        Intrinsics3.checkNotNullParameter(properties, "properties");
        Intrinsics3.checkNotNullParameter(voiceConfig, "voiceConfig");
        Map<String, Object> mutableMap = Maps6.toMutableMap(properties);
        addVoiceConnectionProperties(mutableMap, channel, cloudflareBestRegion);
        if (channel != null) {
            mutableMap.put("channel_type", Integer.valueOf(channel.getType()));
            mutableMap.put("channel_bitrate", Integer.valueOf(channel.getBitrate()));
        }
        tracker.track("voice_disconnect", Maps6.plus(CollectionExtensions.filterNonNullValues(mutableMap), toProperties(voiceConfig)));
    }

    public final void inviteSent(GuildInvite guildInvite, Channel channel, Map<String, ? extends Object> snapshotProperties) {
        Long inviterId;
        Long guildId;
        Intrinsics3.checkNotNullParameter(snapshotProperties, "snapshotProperties");
        Map<String, ? extends Object> mapFilterNonNullValues = CollectionExtensions.filterNonNullValues(snapshotProperties);
        if (channel != null) {
            mapFilterNonNullValues.put("invite_channel_id", Long.valueOf(channel.getId()));
        }
        if (channel != null) {
            mapFilterNonNullValues.put("invite_channel_type", Integer.valueOf(channel.getType()));
        }
        if (guildInvite != null) {
            mapFilterNonNullValues.put("invite_code", guildInvite.getInviteCode());
        }
        if (guildInvite != null && (guildId = guildInvite.getGuildId()) != null) {
            mapFilterNonNullValues.put("invite_guild_id", Long.valueOf(guildId.longValue()));
        }
        if (guildInvite != null && (inviterId = guildInvite.getInviterId()) != null) {
            mapFilterNonNullValues.put("invite_inviter_id", Long.valueOf(inviterId.longValue()));
        }
        tracker.track("invite_sent", mapFilterNonNullValues);
    }

    private final Map<String, Object> toProperties(ModelInvite modelInvite, Map<String, Object> map) {
        return modelInviteToProperties(modelInvite, map);
    }

    private final Map<String, Object> toProperties(ModelSku modelSku) {
        HashMap map = new HashMap();
        if (modelSku == null) {
            return map;
        }
        map.put("sku_id", Long.valueOf(modelSku.getId()));
        map.put("sku_type", Integer.valueOf(modelSku.getType()));
        map.put(ModelAuditLogEntry.CHANGE_KEY_APPLICATION_ID, Long.valueOf(modelSku.getApplicationId()));
        map.put("store_title", modelSku.getName());
        map.put("distribution_type", modelSku.getPremium() ? "premium" : "distribution");
        Application application = modelSku.getApplication();
        if (application != null) {
            map.put("application_name", application.getName());
        }
        return map;
    }

    public final void openPopout(String popoutName, Traits.Location locationTrait) {
        Intrinsics3.checkNotNullParameter(popoutName, "popoutName");
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        locationTrait.serializeTo(map);
        map.put("type", popoutName);
        tracker.track("open_popout", map);
    }

    public final void openModal(String modalName, Traits.Source sourceTrait) {
        Intrinsics3.checkNotNullParameter(modalName, "modalName");
        Intrinsics3.checkNotNullParameter(sourceTrait, "sourceTrait");
        HashMap map = new HashMap();
        sourceTrait.serializeTo(map);
        map.put("type", modalName);
        tracker.track("open_modal", map);
    }

    public final void inviteCopied(GuildInvite guildInvite, Channel channel, String source) {
        Intrinsics3.checkNotNullParameter(guildInvite, "guildInvite");
        Intrinsics3.checkNotNullParameter(source, "source");
        inviteCopied(guildInvite.getInviteCode(), guildInvite.getGuildId(), channel != null ? Long.valueOf(channel.getId()) : null, channel != null ? Integer.valueOf(channel.getType()) : null, source, guildInvite.getGuildScheduledEventId());
    }

    public final void inviteShareClicked(GuildInvite guildInvite, Channel channel) {
        Intrinsics3.checkNotNullParameter(guildInvite, "guildInvite");
        inviteShareClicked(guildInvite.getInviteCode(), guildInvite.getGuildId(), channel != null ? Long.valueOf(channel.getId()) : null, channel != null ? Integer.valueOf(channel.getType()) : null, guildInvite.getInviterId(), guildInvite.getGuildScheduledEventId());
    }

    public final void openModal(String modalName, Traits.Location locationTrait) {
        Intrinsics3.checkNotNullParameter(modalName, "modalName");
        Intrinsics3.checkNotNullParameter(locationTrait, "locationTrait");
        HashMap map = new HashMap();
        locationTrait.serializeTo(map);
        map.put("type", modalName);
        tracker.track("open_modal", map);
    }

    private final Map<String, Object> toProperties(WidgetUserSetCustomStatusViewModel.FormState formState, Map<String, Object> map) {
        String str;
        map.put("text_len", Integer.valueOf(TextUtils.getTrimmedLength(formState.getText())));
        Emoji emoji = formState.getEmoji();
        String strValueOf = null;
        if (emoji instanceof ModelEmojiCustom) {
            str = "custom";
        } else {
            str = emoji instanceof ModelEmojiUnicode ? "unicode" : null;
        }
        if (str != null) {
            map.put("emoji_type", str);
        }
        int iOrdinal = formState.getExpiration().ordinal();
        if (iOrdinal != 0) {
            if (iOrdinal == 1) {
                strValueOf = String.valueOf(StoreGuildScheduledEvents.FETCH_GUILD_EVENTS_THRESHOLD);
            } else if (iOrdinal == 2) {
                strValueOf = String.valueOf(3600000L);
            } else if (iOrdinal == 3) {
                strValueOf = String.valueOf(14400000L);
            } else {
                if (iOrdinal != 4) {
                    throw new NoWhenBranchMatchedException();
                }
                strValueOf = "TODAY";
            }
        }
        if (strValueOf != null) {
            map.put("clear_after", strValueOf);
        }
        return map;
    }

    private final void inviteCopied(String inviteCode, Long guildId, Long channelId, Integer inviteChannelType, String source, Long guildScheduledEventId) {
        tracker.track("copy_instant_invite", CollectionExtensions.filterNonNullValues(Maps6.mapOf(Tuples.to(ModelAuditLogEntry.CHANGE_KEY_CODE, inviteCode), Tuples.to("server", guildId), Tuples.to("channel", channelId), Tuples.to("channel_type", inviteChannelType), Tuples.to(ModelAuditLogEntry.CHANGE_KEY_LOCATION, source), Tuples.to("guild_scheduled_event_id", guildScheduledEventId))));
    }

    private final void inviteShareClicked(String inviteCode, Long guildId, Long channelId, Integer inviteChannelType, Long inviterId, Long guildScheduledEventId) {
        Map<String, ? extends Object> mapMutableMapOf = Maps6.mutableMapOf(Tuples.to("invite_code", inviteCode));
        if (guildId != null) {
            mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID, Long.valueOf(guildId.longValue()));
        }
        if (channelId != null) {
            mapMutableMapOf.put(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID, Long.valueOf(channelId.longValue()));
        }
        if (inviteChannelType != null) {
            mapMutableMapOf.put("invite_channel_type", Integer.valueOf(inviteChannelType.intValue()));
        }
        if (inviterId != null) {
            mapMutableMapOf.put("invite_inviter_id", Long.valueOf(inviterId.longValue()));
        }
        if (guildScheduledEventId != null) {
            mapMutableMapOf.put("invite_guild_scheduled_event_id", Long.valueOf(guildScheduledEventId.longValue()));
        }
        tracker.track("instant_invite_shared", mapMutableMapOf);
    }

    private final Map<String, Object> toProperties(StoreMediaSettings.VoiceConfiguration voiceConfiguration) {
        if (voiceConfiguration == null) {
            return Maps6.emptyMap();
        }
        Tuples2[] tuples2Arr = new Tuples2[8];
        tuples2Arr[0] = Tuples.to("audio_input_mode", voiceConfiguration.getInputMode());
        tuples2Arr[1] = Tuples.to("automatic_audio_input_sensitivity_enabled", Boolean.valueOf(voiceConfiguration.getAutomaticVad()));
        tuples2Arr[2] = Tuples.to("audio_input_sensitivity", Float.valueOf(voiceConfiguration.getSensitivity()));
        tuples2Arr[3] = Tuples.to("echo_cancellation_enabled", Boolean.valueOf(voiceConfiguration.getEchoCancellation()));
        tuples2Arr[4] = Tuples.to("noise_suppression_enabled", Boolean.valueOf(voiceConfiguration.getNoiseProcessing() == StoreMediaSettings.NoiseProcessing.Suppression));
        tuples2Arr[5] = Tuples.to("noise_cancellation_enabled", Boolean.valueOf(voiceConfiguration.getNoiseProcessing() == StoreMediaSettings.NoiseProcessing.Cancellation));
        tuples2Arr[6] = Tuples.to("automatic_gain_control_enabled", Boolean.valueOf(voiceConfiguration.getAutomaticGainControl()));
        tuples2Arr[7] = Tuples.to("voice_output_volume", Float.valueOf(voiceConfiguration.getOutputVolume()));
        return Maps6.mapOf(tuples2Arr);
    }
}
