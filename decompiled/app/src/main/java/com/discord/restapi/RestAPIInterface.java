package com.discord.restapi;

import androidx.core.app.NotificationCompat;
import com.discord.api.activity.ActivityActionConfirmation;
import com.discord.api.activity.ActivityMetadata;
import com.discord.api.application.Application;
import com.discord.api.application.ApplicationAsset;
import com.discord.api.auth.RegisterResponse;
import com.discord.api.auth.mfa.DisableMfaRequestBody;
import com.discord.api.auth.mfa.DisableMfaResponse;
import com.discord.api.auth.mfa.EnableMfaResponse;
import com.discord.api.auth.mfa.GetBackupCodesRequestBody;
import com.discord.api.auth.mfa.GetBackupCodesResponse;
import com.discord.api.auth.mfa.GetBackupCodesSendVerificationKeyRequestBody;
import com.discord.api.auth.mfa.GetBackupCodesSendVerificationKeyResponse;
import com.discord.api.auth.mfa.GetBackupCodesVerificationRequestBody;
import com.discord.api.bugreport.BugReportConfig;
import com.discord.api.channel.Channel;
import com.discord.api.commands.ApplicationCommand;
import com.discord.api.commands.ApplicationCommandData;
import com.discord.api.connectedaccounts.ConnectedAccount;
import com.discord.api.creatormonetization.CreatorMonetizationEligibilityRequirements;
import com.discord.api.creatormonetization.CreatorMonetizationEnableRequest;
import com.discord.api.directory.DirectoryEntryGuild;
import com.discord.api.directory.DirectoryEntryGuild2;
import com.discord.api.fingerprint.FingerprintResponse;
import com.discord.api.forum.ForumPostFirstMessages;
import com.discord.api.friendsuggestions.BulkAddFriendsResponse;
import com.discord.api.friendsuggestions.BulkFriendSuggestions;
import com.discord.api.friendsuggestions.FriendSuggestion;
import com.discord.api.guild.Guild;
import com.discord.api.guild.PruneCountResponse;
import com.discord.api.guild.VanityUrlResponse;
import com.discord.api.guild.preview.GuildPreview;
import com.discord.api.guild.welcome.GuildWelcomeScreen;
import com.discord.api.guildmember.GuildMember;
import com.discord.api.guildmember.PatchGuildMemberBody;
import com.discord.api.guildrolesubscription.GuildRoleSubscriptionGroupListing;
import com.discord.api.guildrolesubscription.GuildRoleSubscriptionTierFreeTrial;
import com.discord.api.guildrolesubscription.GuildRoleSubscriptionTierListing;
import com.discord.api.guildrolesubscription.PayoutGroup;
import com.discord.api.guildscheduledevent.ApiGuildScheduledEventUser;
import com.discord.api.guildscheduledevent.GuildScheduledEvent;
import com.discord.api.guildscheduledevent.GuildScheduledEventBroadcast;
import com.discord.api.guildscheduledevent.GuildScheduledEventMeUser;
import com.discord.api.handoff.CreateHandoffTokenRequest;
import com.discord.api.handoff.HandoffToken;
import com.discord.api.hubs.EmailVerification;
import com.discord.api.hubs.EmailVerification2;
import com.discord.api.hubs.WaitlistSignup;
import com.discord.api.message.Message;
import com.discord.api.premium.ClaimedOutboundPromotion;
import com.discord.api.premium.OutboundPromotion;
import com.discord.api.report.MenuAPIResponse;
import com.discord.api.report.ReportReason;
import com.discord.api.report.ReportSubmissionBody;
import com.discord.api.role.GuildRole;
import com.discord.api.science.Science;
import com.discord.api.stageinstance.RecommendedStageInstance;
import com.discord.api.stageinstance.StageInstance;
import com.discord.api.sticker.Sticker;
import com.discord.api.thread.ThreadListing;
import com.discord.api.thread.ThreadMember;
import com.discord.api.user.PatchUserBody;
import com.discord.api.user.User;
import com.discord.api.user.UserProfile;
import com.discord.api.user.UserSurvey3;
import com.discord.models.domain.ModelApplicationStreamPreview;
import com.discord.models.domain.ModelAppliedGuildBoost;
import com.discord.models.domain.ModelAuditLog;
import com.discord.models.domain.ModelAuditLogEntry;
import com.discord.models.domain.ModelBan;
import com.discord.models.domain.ModelCall;
import com.discord.models.domain.ModelChannelFollowerStatsDto;
import com.discord.models.domain.ModelConnectionAccessToken;
import com.discord.models.domain.ModelConnectionState;
import com.discord.models.domain.ModelEmailChangeConfirm;
import com.discord.models.domain.ModelEntitlement;
import com.discord.models.domain.ModelGift;
import com.discord.models.domain.ModelGuildBoostSlot;
import com.discord.models.domain.ModelGuildIntegration;
import com.discord.models.domain.ModelGuildMemberListUpdate;
import com.discord.models.domain.ModelGuildTemplate;
import com.discord.models.domain.ModelInvite;
import com.discord.models.domain.ModelLibraryApplication;
import com.discord.models.domain.ModelLocationMetadata;
import com.discord.models.domain.ModelMemberVerificationForm;
import com.discord.models.domain.ModelMemberVerificationFormResponse;
import com.discord.models.domain.ModelNotificationSettings;
import com.discord.models.domain.ModelOAuth2Token;
import com.discord.models.domain.ModelPaymentSource2;
import com.discord.models.domain.ModelPaymentSource3;
import com.discord.models.domain.ModelPhoneVerificationToken;
import com.discord.models.domain.ModelRemoteAuthHandshake;
import com.discord.models.domain.ModelRtcLatencyRegion;
import com.discord.models.domain.ModelSearchResponse;
import com.discord.models.domain.ModelSubscription;
import com.discord.models.domain.ModelTypingResponse;
import com.discord.models.domain.ModelUrl;
import com.discord.models.domain.ModelUserAffinities;
import com.discord.models.domain.ModelUserConsents2;
import com.discord.models.domain.ModelUserConsents3;
import com.discord.models.domain.ModelUserNote;
import com.discord.models.domain.ModelUserRelationship;
import com.discord.models.domain.ModelUserSettings;
import com.discord.models.domain.ModelVoiceRegion;
import com.discord.models.domain.auth.ModelLoginResult;
import com.discord.models.domain.billing.ModelInvoicePreview;
import com.discord.models.domain.emoji.ModelEmojiGuild;
import com.discord.models.domain.spotify.ModelSpotifyTrack;
import com.discord.models.experiments.dto.UnauthenticatedUserExperimentsDto;
import com.discord.models.gifpicker.dto.GifDto;
import com.discord.models.gifpicker.dto.TrendingGifCategoriesResponseDto;
import com.discord.models.sticker.dto.ModelStickerPack;
import com.discord.models.sticker.dto.ModelStickerStoreDirectory;
import com.discord.restapi.RestAPIParams;
import com.discord.utilities.analytics.ChatInputComponentTypes;
import com.discord.utilities.auth.GoogleSmartLockManager;
import com.google.gson.JsonObject;
import d0.Tuples;
import d0.t.MapsJVM;
import i0.f0.Body;
import i0.f0.DELETE;
import i0.f0.GET;
import i0.f0.HTTP;
import i0.f0.Header3;
import i0.f0.Multipart;
import i0.f0.PATCH;
import i0.f0.POST;
import i0.f0.PUT;
import i0.f0.Part2;
import i0.f0.Path2;
import i0.f0.Query2;
import i0.f0.Url;
import java.util.List;
import java.util.Map;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Unit;
import okhttp3.MultipartBody;
import okhttp3.ResponseBody;
import retrofit2.Response;
import rx.Observable;

/* compiled from: RestAPIInterface.kt */
@Metadata(bv = {1, 0, 3}, d1 = {"\u0000Ì\r\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\t\n\u0002\b\u0003\n\u0002\u0010\u000e\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010$\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0011\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\"\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\bf\u0018\u0000 \u00ad\u00062\u00020\u0001:\b\u00ad\u0006®\u0006¯\u0006°\u0006J\u001f\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0002H'¢\u0006\u0004\b\u0006\u0010\u0007J%\u0010\u000b\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\n0\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\bH'¢\u0006\u0004\b\u000b\u0010\fJ'\u0010\u000f\u001a\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\rH'¢\u0006\u0004\b\u000f\u0010\u0010J%\u0010\u0013\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00120\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0011H'¢\u0006\u0004\b\u0013\u0010\u0014J'\u0010\u0016\u001a\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0015H'¢\u0006\u0004\b\u0016\u0010\u0017J'\u0010\u0019\u001a\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0018H'¢\u0006\u0004\b\u0019\u0010\u001aJ'\u0010\u001b\u001a\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0002H'¢\u0006\u0004\b\u001b\u0010\u0007J%\u0010\u001d\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00120\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u001cH'¢\u0006\u0004\b\u001d\u0010\u001eJ'\u0010 \u001a\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u001fH'¢\u0006\u0004\b \u0010!J\u001f\u0010$\u001a\b\u0012\u0004\u0012\u00020#0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\"H'¢\u0006\u0004\b$\u0010%J\u001f\u0010(\u001a\b\u0012\u0004\u0012\u00020'0\u00042\b\b\u0001\u0010\u0003\u001a\u00020&H'¢\u0006\u0004\b(\u0010)J\u001f\u0010+\u001a\b\u0012\u0004\u0012\u00020#0\u00042\b\b\u0001\u0010\u0003\u001a\u00020*H'¢\u0006\u0004\b+\u0010,J\u001f\u0010/\u001a\b\u0012\u0004\u0012\u00020.0\u00042\b\b\u0001\u0010\u0003\u001a\u00020-H'¢\u0006\u0004\b/\u00100J\u001f\u00103\u001a\b\u0012\u0004\u0012\u0002020\u00042\b\b\u0001\u0010\u0003\u001a\u000201H'¢\u0006\u0004\b3\u00104J\u0015\u00106\u001a\b\u0012\u0004\u0012\u0002050\u0004H'¢\u0006\u0004\b6\u00107J\u001b\u0010:\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u000209080\u0004H'¢\u0006\u0004\b:\u00107J!\u0010=\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010<\u001a\u00020;H'¢\u0006\u0004\b=\u0010>Jc\u0010H\u001a\b\u0012\u0004\u0012\u00020G0\u00042\b\b\u0001\u0010@\u001a\u00020?2\n\b\u0001\u0010A\u001a\u0004\u0018\u00010?2\n\b\u0003\u0010B\u001a\u0004\u0018\u00010?2\n\b\u0001\u0010C\u001a\u0004\u0018\u00010?2\b\b\u0003\u0010D\u001a\u00020?2\b\b\u0001\u0010E\u001a\u00020?2\n\b\u0003\u0010F\u001a\u0004\u0018\u00010?H'¢\u0006\u0004\bH\u0010IJ\u0091\u0001\u0010N\u001a\b\u0012\u0004\u0012\u00020M0\u00042\b\b\u0001\u0010@\u001a\u00020?2\n\b\u0001\u0010A\u001a\u0004\u0018\u00010?2\n\b\u0003\u0010B\u001a\u0004\u0018\u00010?2\n\b\u0001\u0010C\u001a\u0004\u0018\u00010?2\b\b\u0003\u0010D\u001a\u00020?2\b\b\u0001\u0010E\u001a\u00020?2\n\b\u0003\u0010F\u001a\u0004\u0018\u00010?2\n\b\u0003\u0010J\u001a\u0004\u0018\u00010?2\n\b\u0003\u0010K\u001a\u0004\u0018\u00010?2\u0014\b\u0003\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020?\u0012\u0004\u0012\u00020?0LH'¢\u0006\u0004\bN\u0010OJY\u0010P\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010@\u001a\u00020?2\n\b\u0001\u0010A\u001a\u0004\u0018\u00010?2\n\b\u0003\u0010B\u001a\u0004\u0018\u00010?2\n\b\u0001\u0010C\u001a\u0004\u0018\u00010?2\b\b\u0003\u0010D\u001a\u00020?2\b\b\u0001\u0010E\u001a\u00020?H'¢\u0006\u0004\bP\u0010QJ)\u0010U\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020T080\u00042\f\b\u0001\u0010S\u001a\u00060;j\u0002`RH'¢\u0006\u0004\bU\u0010>J%\u0010Y\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010X0\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`VH'¢\u0006\u0004\bY\u0010>J\u001f\u0010\\\u001a\b\u0012\u0004\u0012\u00020[0\u00042\b\b\u0001\u0010\u0003\u001a\u00020ZH'¢\u0006\u0004\b\\\u0010]J!\u0010^\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0015H'¢\u0006\u0004\b^\u0010\u0017J!\u0010`\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010\u0003\u001a\u00020_H'¢\u0006\u0004\b`\u0010aJ!\u0010c\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010\u0003\u001a\u00020bH'¢\u0006\u0004\bc\u0010dJ%\u0010g\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020f0\t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020eH'¢\u0006\u0004\bg\u0010hJ!\u0010j\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010\u0003\u001a\u00020iH'¢\u0006\u0004\bj\u0010kJ!\u0010m\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010\u0003\u001a\u00020lH'¢\u0006\u0004\bm\u0010nJ!\u0010p\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010\u0003\u001a\u00020oH'¢\u0006\u0004\bp\u0010qJ\u0017\u0010r\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u0004H'¢\u0006\u0004\br\u00107J!\u0010u\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010t0\u00042\b\b\u0001\u0010\u0003\u001a\u00020sH'¢\u0006\u0004\bu\u0010vJ!\u0010x\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\b\b\u0001\u0010\u0003\u001a\u00020wH'¢\u0006\u0004\bx\u0010yJB\u0010\u007f\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010~0\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\b\b\u0003\u0010{\u001a\u00020z2\u0010\b\u0003\u0010}\u001a\n\u0018\u00010;j\u0004\u0018\u0001`|H'¢\u0006\u0005\b\u007f\u0010\u0080\u0001J%\u0010\u0082\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030\u0081\u0001H'¢\u0006\u0006\b\u0082\u0001\u0010\u0083\u0001J$\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u00020X0\u00042\n\b\u0001\u0010\u0085\u0001\u001a\u00030\u0084\u0001H'¢\u0006\u0006\b\u0086\u0001\u0010\u0087\u0001J$\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u00020X0\u00042\n\b\u0001\u0010\u0089\u0001\u001a\u00030\u0088\u0001H'¢\u0006\u0006\b\u0086\u0001\u0010\u008a\u0001J&\u0010\u008c\u0001\u001a\t\u0012\u0005\u0012\u00030\u008b\u00010\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`VH'¢\u0006\u0005\b\u008c\u0001\u0010>J4\u0010\u008f\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\n\b\u0001\u0010\u008e\u0001\u001a\u00030\u008d\u0001H'¢\u0006\u0006\b\u008f\u0001\u0010\u0090\u0001J3\u0010\u0094\u0001\u001a\t\u0012\u0005\u0012\u00030\u0093\u00010\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\n\b\u0001\u0010\u0092\u0001\u001a\u00030\u0091\u0001H'¢\u0006\u0006\b\u0094\u0001\u0010\u0095\u0001J%\u0010\u0096\u0001\u001a\t\u0012\u0005\u0012\u00030\u0093\u00010\u00042\n\b\u0001\u0010\u0092\u0001\u001a\u00030\u0091\u0001H'¢\u0006\u0006\b\u0096\u0001\u0010\u0097\u0001J'\u0010\u0098\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0098\u0001\u0010>J4\u0010\u0098\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\n\b\u0001\u0010\u009a\u0001\u001a\u00030\u0099\u0001H'¢\u0006\u0006\b\u0098\u0001\u0010\u009b\u0001J%\u0010\u009f\u0001\u001a\t\u0012\u0005\u0012\u00030\u009e\u00010\u00042\n\b\u0001\u0010\u009d\u0001\u001a\u00030\u009c\u0001H'¢\u0006\u0006\b\u009f\u0001\u0010 \u0001J%\u0010£\u0001\u001a\t\u0012\u0005\u0012\u00030\u009e\u00010\u00042\n\b\u0001\u0010¢\u0001\u001a\u00030¡\u0001H'¢\u0006\u0006\b£\u0001\u0010¤\u0001J1\u0010¨\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\n\b\u0001\u0010¦\u0001\u001a\u00030¥\u00012\t\b\u0001\u0010§\u0001\u001a\u00020?H'¢\u0006\u0006\b¨\u0001\u0010©\u0001J*\u0010¬\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030«\u00010\t0\u00042\t\b\u0001\u0010\u0003\u001a\u00030ª\u0001H'¢\u0006\u0006\b¬\u0001\u0010\u00ad\u0001J3\u0010®\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\t\b\u0001\u0010§\u0001\u001a\u00020?H'¢\u0006\u0006\b®\u0001\u0010¯\u0001J?\u0010±\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\n\b\u0001\u0010¦\u0001\u001a\u00030°\u00012\t\b\u0001\u0010§\u0001\u001a\u00020?H'¢\u0006\u0006\b±\u0001\u0010²\u0001J,\u0010´\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030³\u0001080\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`VH'¢\u0006\u0005\b´\u0001\u0010>J`\u0010»\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030º\u0001080\u00042\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u00012\t\b\u0001\u0010·\u0001\u001a\u00020z2\t\b\u0001\u0010¸\u0001\u001a\u00020z2\u0010\b\u0001\u0010}\u001a\n\u0018\u00010;j\u0004\u0018\u0001`|2\u000b\b\u0001\u0010¹\u0001\u001a\u0004\u0018\u00010;H'¢\u0006\u0006\b»\u0001\u0010¼\u0001JG\u0010À\u0001\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010¿\u00010\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\u000e\b\u0001\u0010¾\u0001\u001a\u00070?j\u0003`½\u00012\f\b\u0001\u0010S\u001a\u00060;j\u0002`RH'¢\u0006\u0006\bÀ\u0001\u0010Á\u0001J|\u0010É\u0001\u001a\t\u0012\u0005\u0012\u00030È\u00010\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\r\b\u0001\u0010Â\u0001\u001a\u00060;j\u0002`R2\u000e\b\u0001\u0010¾\u0001\u001a\u00070?j\u0003`½\u00012\f\b\u0001\u0010Ã\u0001\u001a\u0005\u0018\u00010µ\u00012\u0012\b\u0001\u0010Å\u0001\u001a\u000b\u0018\u00010;j\u0005\u0018\u0001`Ä\u00012\u0012\b\u0001\u0010Ç\u0001\u001a\u000b\u0018\u00010;j\u0005\u0018\u0001`Æ\u0001H'¢\u0006\u0006\bÉ\u0001\u0010Ê\u0001J\u001e\u0010Ì\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Ë\u0001080\u0004H'¢\u0006\u0005\bÌ\u0001\u00107J$\u0010Ï\u0001\u001a\t\u0012\u0005\u0012\u00030Î\u00010\u00042\t\b\u0001\u0010Í\u0001\u001a\u00020?H'¢\u0006\u0006\bÏ\u0001\u0010Ð\u0001JA\u0010Ô\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Ë\u00010\t0\u00042\t\b\u0001\u0010Í\u0001\u001a\u00020?2\t\b\u0001\u0010Ñ\u0001\u001a\u00020?2\n\b\u0001\u0010Ó\u0001\u001a\u00030Ò\u0001H'¢\u0006\u0006\bÔ\u0001\u0010Õ\u0001J%\u0010Ø\u0001\u001a\t\u0012\u0005\u0012\u00030Ë\u00010\u00042\n\b\u0001\u0010×\u0001\u001a\u00030Ö\u0001H'¢\u0006\u0006\bØ\u0001\u0010Ù\u0001JA\u0010Ü\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Ë\u00010\t0\u00042\t\b\u0001\u0010Í\u0001\u001a\u00020?2\t\b\u0001\u0010Ñ\u0001\u001a\u00020?2\n\b\u0001\u0010Û\u0001\u001a\u00030Ú\u0001H'¢\u0006\u0006\bÜ\u0001\u0010Ý\u0001J6\u0010Þ\u0001\u001a\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\t0\u00042\t\b\u0001\u0010Í\u0001\u001a\u00020?2\t\b\u0001\u0010Ñ\u0001\u001a\u00020?H'¢\u0006\u0006\bÞ\u0001\u0010ß\u0001J/\u0010ã\u0001\u001a\t\u0012\u0005\u0012\u00030â\u00010\u00042\t\b\u0001\u0010à\u0001\u001a\u00020?2\t\b\u0001\u0010á\u0001\u001a\u00020?H'¢\u0006\u0006\bã\u0001\u0010ß\u0001J+\u0010å\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030æ\u00010\t0\u00042\n\b\u0001\u0010å\u0001\u001a\u00030ä\u0001H'¢\u0006\u0006\bå\u0001\u0010ç\u0001J\u001e\u0010é\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030è\u0001080\u0004H'¢\u0006\u0005\bé\u0001\u00107J'\u0010ê\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010W\u001a\u00060;j\u0002`VH'¢\u0006\u0005\bê\u0001\u0010>J\u0018\u0010ì\u0001\u001a\t\u0012\u0005\u0012\u00030ë\u00010\u0004H'¢\u0006\u0005\bì\u0001\u00107J%\u0010î\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030í\u0001H'¢\u0006\u0006\bî\u0001\u0010ï\u0001J/\u0010ò\u0001\u001a\t\u0012\u0005\u0012\u00030ñ\u00010\u00042\t\b\u0001\u0010Í\u0001\u001a\u00020?2\t\b\u0001\u0010ð\u0001\u001a\u00020?H'¢\u0006\u0006\bò\u0001\u0010ß\u0001J\u001a\u0010ô\u0001\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010ó\u00010\u0004H'¢\u0006\u0005\bô\u0001\u00107J\u001a\u0010õ\u0001\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010ó\u00010\u0004H'¢\u0006\u0005\bõ\u0001\u00107J0\u0010÷\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010Í\u0001\u001a\u00020?2\t\b\u0001\u0010A\u001a\u00030ö\u0001H'¢\u0006\u0006\b÷\u0001\u0010ø\u0001J%\u0010ú\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030ù\u0001H'¢\u0006\u0006\bú\u0001\u0010û\u0001J%\u0010ü\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030ù\u0001H'¢\u0006\u0006\bü\u0001\u0010û\u0001J%\u0010þ\u0001\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030ý\u0001H'¢\u0006\u0006\bþ\u0001\u0010ÿ\u0001J%\u0010\u0080\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030ý\u0001H'¢\u0006\u0006\b\u0080\u0002\u0010ÿ\u0001J$\u0010\u0083\u0002\u001a\t\u0012\u0005\u0012\u00030\u0082\u00020\u00042\t\b\u0001\u0010\u0003\u001a\u00030\u0081\u0002H'¢\u0006\u0006\b\u0083\u0002\u0010\u0084\u0002J%\u0010\u0086\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030\u0085\u0002H'¢\u0006\u0006\b\u0086\u0002\u0010\u0087\u0002J%\u0010\u0089\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030\u0088\u0002H'¢\u0006\u0006\b\u0089\u0002\u0010\u008a\u0002J\u0018\u0010\u008c\u0002\u001a\t\u0012\u0005\u0012\u00030\u008b\u00020\u0004H'¢\u0006\u0005\b\u008c\u0002\u00107J\u001e\u0010\u008e\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030\u008d\u00020\t0\u0004H'¢\u0006\u0005\b\u008e\u0002\u00107J%\u0010\u0090\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u008f\u0002\u001a\u00020?H'¢\u0006\u0006\b\u0090\u0002\u0010Ð\u0001J%\u0010\u0092\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030\u0091\u0002H'¢\u0006\u0006\b\u0092\u0002\u0010\u0093\u0002J%\u0010\u0095\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030\u0094\u0002H'¢\u0006\u0006\b\u0095\u0002\u0010\u0096\u0002J%\u0010\u0098\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030\u0097\u0002H'¢\u0006\u0006\b\u0098\u0002\u0010\u0099\u0002J@\u0010\u0095\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u0011\b\u0001\u0010\u009b\u0002\u001a\n\u0012\u0005\u0012\u00030\u0094\u00020\u009a\u00022\u0011\b\u0001\u0010\u009e\u0002\u001a\n\u0012\u0005\u0012\u00030\u009d\u00020\u009c\u0002H'¢\u0006\u0006\b\u0095\u0002\u0010\u009f\u0002J+\u0010¢\u0002\u001a\u0011\u0012\r\u0012\u000b\u0012\u0005\u0012\u00030¡\u0002\u0018\u0001080\u00042\t\b\u0001\u0010 \u0002\u001a\u00020;H'¢\u0006\u0005\b¢\u0002\u0010>J/\u0010¤\u0002\u001a\t\u0012\u0005\u0012\u00030£\u00020\u00042\t\b\u0001\u0010Å\u0001\u001a\u00020;2\t\b\u0001\u0010Ç\u0001\u001a\u00020;H'¢\u0006\u0006\b¤\u0002\u0010¥\u0002JW\u0010§\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030º\u0001080\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010¹\u0001\u001a\u0004\u0018\u00010;2\u000b\b\u0001\u0010¦\u0002\u001a\u0004\u0018\u00010;2\f\b\u0001\u0010¶\u0001\u001a\u0005\u0018\u00010µ\u0001H'¢\u0006\u0006\b§\u0002\u0010¨\u0002JF\u0010ª\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030º\u0001080\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u00012\t\b\u0001\u0010©\u0002\u001a\u00020;H'¢\u0006\u0006\bª\u0002\u0010«\u0002J3\u0010\u00ad\u0002\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010¬\u0002\u001a\u00020;H'¢\u0006\u0006\b\u00ad\u0002\u0010¥\u0002J5\u0010°\u0002\u001a\t\u0012\u0005\u0012\u00030º\u00010\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\n\b\u0001\u0010¯\u0002\u001a\u00030®\u0002H'¢\u0006\u0006\b°\u0002\u0010±\u0002J4\u0010³\u0002\u001a\t\u0012\u0005\u0012\u00030º\u00010\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030²\u0002H'¢\u0006\u0006\b³\u0002\u0010´\u0002JO\u0010°\u0002\u001a\t\u0012\u0005\u0012\u00030º\u00010\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u0011\b\u0001\u0010\u009b\u0002\u001a\n\u0012\u0005\u0012\u00030®\u00020\u009a\u00022\u0011\b\u0001\u0010\u009e\u0002\u001a\n\u0012\u0005\u0012\u00030\u009d\u00020\u009c\u0002H'¢\u0006\u0006\b°\u0002\u0010µ\u0002JB\u0010·\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010Ç\u0001\u001a\u0004\u0018\u00010;2\t\b\u0001\u0010\u0003\u001a\u00030¶\u0002H'¢\u0006\u0006\b·\u0002\u0010¸\u0002JK\u0010¼\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\r\b\u0001\u0010Å\u0001\u001a\u00060;j\u0002`|2\n\b\u0001\u0010¹\u0002\u001a\u00030µ\u00012\t\b\u0001\u0010º\u0002\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030»\u0002H'¢\u0006\u0006\b¼\u0002\u0010½\u0002J7\u0010¾\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010Ç\u0001\u001a\u0004\u0018\u00010;H'¢\u0006\u0006\b¾\u0002\u0010¿\u0002J4\u0010Â\u0002\u001a\t\u0012\u0005\u0012\u00030Á\u00020\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030À\u0002H'¢\u0006\u0006\bÂ\u0002\u0010Ã\u0002J5\u0010Ä\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010Ç\u0001\u001a\u00020;H'¢\u0006\u0006\bÄ\u0002\u0010¥\u0002J@\u0010Å\u0002\u001a\t\u0012\u0005\u0012\u00030º\u00010\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010Ç\u0001\u001a\u00020;2\n\b\u0001\u0010¯\u0002\u001a\u00030®\u0002H'¢\u0006\u0006\bÅ\u0002\u0010Æ\u0002J'\u0010Ç\u0002\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\bÇ\u0002\u0010>J3\u0010É\u0002\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030È\u0002H'¢\u0006\u0006\bÉ\u0002\u0010Ê\u0002J3\u0010Ì\u0002\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030Ë\u0002H'¢\u0006\u0006\bÌ\u0002\u0010Í\u0002J3\u0010Ï\u0002\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030Î\u0002H'¢\u0006\u0006\bÏ\u0002\u0010Ð\u0002J3\u0010Ò\u0002\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030Ñ\u0002H'¢\u0006\u0006\bÒ\u0002\u0010Ó\u0002J9\u0010Ô\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\r\b\u0001\u0010¬\u0002\u001a\u00060;j\u0002`VH'¢\u0006\u0006\bÔ\u0002\u0010¥\u0002J9\u0010Õ\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\r\b\u0001\u0010¬\u0002\u001a\u00060;j\u0002`VH'¢\u0006\u0006\bÕ\u0002\u0010¥\u0002J5\u0010×\u0002\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010Ö\u00020\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\b\b\u0001\u0010\u0003\u001a\u00020\u0002H'¢\u0006\u0006\b×\u0002\u0010Ø\u0002J'\u0010Ù\u0002\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\bÙ\u0002\u0010>J(\u0010Û\u0002\u001a\t\u0012\u0005\u0012\u00030Ú\u00020\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\bÛ\u0002\u0010>J@\u0010Ý\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030Ü\u00022\t\b\u0001\u0010§\u0001\u001a\u00020?H'¢\u0006\u0006\bÝ\u0002\u0010Þ\u0002J@\u0010ß\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030Ü\u00022\t\b\u0001\u0010§\u0001\u001a\u00020?H'¢\u0006\u0006\bß\u0002\u0010Þ\u0002J@\u0010â\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010à\u0002\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030á\u0002H'¢\u0006\u0006\bâ\u0002\u0010ã\u0002J5\u0010ä\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010à\u0002\u001a\u00020;H'¢\u0006\u0006\bä\u0002\u0010¥\u0002J.\u0010å\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030º\u0001080\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\bå\u0002\u0010>J5\u0010æ\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010Ç\u0001\u001a\u00020;H'¢\u0006\u0006\bæ\u0002\u0010¥\u0002J5\u0010ç\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010Ç\u0001\u001a\u00020;H'¢\u0006\u0006\bç\u0002\u0010¥\u0002J@\u0010é\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010Ç\u0001\u001a\u00020;2\t\b\u0001\u0010è\u0002\u001a\u00020?H'¢\u0006\u0006\bé\u0002\u0010ê\u0002JE\u0010ë\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000e\b\u0001\u0010Ç\u0001\u001a\u00070;j\u0003`Æ\u00012\t\b\u0001\u0010è\u0002\u001a\u00020?H'¢\u0006\u0006\bë\u0002\u0010ê\u0002JS\u0010ì\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000e\b\u0001\u0010Ç\u0001\u001a\u00070;j\u0003`Æ\u00012\t\b\u0001\u0010è\u0002\u001a\u00020?2\f\b\u0001\u0010W\u001a\u00060;j\u0002`VH'¢\u0006\u0006\bì\u0002\u0010í\u0002J:\u0010î\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000e\b\u0001\u0010Ç\u0001\u001a\u00070;j\u0003`Æ\u0001H'¢\u0006\u0006\bî\u0002\u0010¥\u0002JR\u0010ð\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020X080\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010Ç\u0001\u001a\u00020;2\t\b\u0001\u0010ï\u0002\u001a\u00020?2\f\b\u0001\u0010¶\u0001\u001a\u0005\u0018\u00010µ\u0001H'¢\u0006\u0006\bð\u0002\u0010ñ\u0002J\u009d\u0001\u0010ú\u0002\u001a\t\u0012\u0005\u0012\u00030ù\u00020\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010ò\u0002\u001a\u0004\u0018\u00010;2\u0011\b\u0001\u0010ó\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\u0011\b\u0001\u0010ô\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\u0011\b\u0001\u0010õ\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\u0011\b\u0001\u0010ö\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\f\b\u0001\u0010÷\u0002\u001a\u0005\u0018\u00010µ\u00012\u000b\b\u0001\u0010ø\u0002\u001a\u0004\u0018\u00010zH'¢\u0006\u0006\bú\u0002\u0010û\u0002J*\u0010ý\u0002\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010ü\u00020\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\bý\u0002\u0010>J5\u0010ÿ\u0002\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030þ\u0002H'¢\u0006\u0006\bÿ\u0002\u0010\u0080\u0003J4\u0010\u0083\u0003\u001a\t\u0012\u0005\u0012\u00030\u0082\u00030\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030\u0081\u0003H'¢\u0006\u0006\b\u0083\u0003\u0010\u0084\u0003J@\u0010\u0087\u0003\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010\u0085\u0003\u001a\u0004\u0018\u00010?2\t\b\u0001\u0010\u0003\u001a\u00030\u0086\u0003H'¢\u0006\u0006\b\u0087\u0003\u0010\u0088\u0003J\u0097\u0001\u0010\u0090\u0003\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0089\u0003\u001a\u00020?2\t\b\u0001\u0010ö\u0002\u001a\u00020?2\u0014\b\u0001\u0010\u008b\u0003\u001a\r\u0012\t\u0012\u00070;j\u0003`\u008a\u0003082\u0014\b\u0001\u0010\u008d\u0003\u001a\r\u0012\t\u0012\u00070;j\u0003`\u008c\u0003082\n\b\u0001\u0010\u008e\u0003\u001a\u00030µ\u00012\f\b\u0001\u0010\u008f\u0003\u001a\u0005\u0018\u00010µ\u00012\u0011\b\u0001\u0010\u009e\u0002\u001a\n\u0012\u0005\u0012\u00030\u009d\u00020\u009c\u0002H'¢\u0006\u0006\b\u0090\u0003\u0010\u0091\u0003JP\u0010\u0092\u0003\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000e\b\u0001\u0010Ç\u0001\u001a\u00070;j\u0003`Æ\u00012\u000b\b\u0001\u0010\u0085\u0003\u001a\u0004\u0018\u00010?2\t\b\u0001\u0010\u0003\u001a\u00030\u0086\u0003H'¢\u0006\u0006\b\u0092\u0003\u0010\u0093\u0003J3\u0010\u0095\u0003\u001a\b\u0012\u0004\u0012\u00020[0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030\u0094\u0003H'¢\u0006\u0006\b\u0095\u0003\u0010\u0096\u0003J7\u0010\u0097\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010\u0085\u0003\u001a\u0004\u0018\u00010?H'¢\u0006\u0006\b\u0097\u0003\u0010¯\u0001JA\u0010\u0098\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010\u0085\u0003\u001a\u0004\u0018\u00010?2\b\b\u0001\u0010\u0003\u001a\u00020\u0002H'¢\u0006\u0006\b\u0098\u0003\u0010\u0099\u0003J=\u0010\u009c\u0003\u001a\t\u0012\u0005\u0012\u00030\u009b\u00030\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u0012\b\u0001\u0010¹\u0001\u001a\u000b\u0018\u00010;j\u0005\u0018\u0001`\u009a\u0003H'¢\u0006\u0006\b\u009c\u0003\u0010¿\u0002J6\u0010\u009d\u0003\u001a\t\u0012\u0005\u0012\u00030\u009b\u00030\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010¹\u0001\u001a\u0004\u0018\u00010?H'¢\u0006\u0006\b\u009d\u0003\u0010¯\u0001J6\u0010\u009e\u0003\u001a\t\u0012\u0005\u0012\u00030\u009b\u00030\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\u000b\b\u0001\u0010¹\u0001\u001a\u0004\u0018\u00010?H'¢\u0006\u0006\b\u009e\u0003\u0010¯\u0001J4\u0010¡\u0003\u001a\t\u0012\u0005\u0012\u00030 \u00030\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030\u009f\u0003H'¢\u0006\u0006\b¡\u0003\u0010¢\u0003J'\u0010£\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b£\u0003\u0010>J7\u0010¥\u0003\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020[0\t0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030¤\u0003H'¢\u0006\u0006\b¥\u0003\u0010¦\u0003J*\u0010©\u0003\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030¨\u00030\t0\u00042\t\b\u0001\u0010\u0003\u001a\u00030§\u0003H'¢\u0006\u0006\b©\u0003\u0010ª\u0003J3\u0010¬\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030«\u0003H'¢\u0006\u0006\b¬\u0003\u0010\u00ad\u0003J,\u0010¯\u0003\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030®\u0003080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b¯\u0003\u0010>J6\u0010°\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\f\b\u0001\u0010W\u001a\u00060;j\u0002`VH'¢\u0006\u0006\b°\u0003\u0010¥\u0002J,\u0010²\u0003\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030±\u0003080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b²\u0003\u0010>J,\u0010´\u0003\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030³\u0003080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b´\u0003\u0010>J2\u0010¶\u0003\u001a\t\u0012\u0005\u0012\u00030³\u00030\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030µ\u0003H'¢\u0006\u0006\b¶\u0003\u0010·\u0003J=\u0010º\u0003\u001a\t\u0012\u0005\u0012\u00030³\u00030\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010¸\u0003\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030¹\u0003H'¢\u0006\u0006\bº\u0003\u0010»\u0003J3\u0010¼\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010¸\u0003\u001a\u00020;H'¢\u0006\u0006\b¼\u0003\u0010¥\u0002J#\u0010½\u0003\u001a\t\u0012\u0005\u0012\u00030¨\u00030\u00042\t\b\u0001\u0010¸\u0003\u001a\u00020;H'¢\u0006\u0005\b½\u0003\u0010>J2\u0010¿\u0003\u001a\t\u0012\u0005\u0012\u00030¨\u00030\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030¾\u0003H'¢\u0006\u0006\b¿\u0003\u0010À\u0003Jm\u0010Ä\u0003\u001a\t\u0012\u0005\u0012\u00030¨\u00030\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010Á\u0003\u001a\u00020z2\u0012\b\u0001\u0010¾\u0001\u001a\u000b\u0018\u00010?j\u0005\u0018\u0001`½\u00012\u000b\b\u0003\u0010Â\u0003\u001a\u0004\u0018\u00010;2\u000b\b\u0003\u0010\u0003\u001a\u0005\u0018\u00010Ã\u00032\u000b\b\u0003\u0010§\u0001\u001a\u0004\u0018\u00010?H'¢\u0006\u0006\bÄ\u0003\u0010Å\u0003J3\u0010Ç\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030Æ\u0003H'¢\u0006\u0006\bÇ\u0003\u0010È\u0003J2\u0010Ë\u0003\u001a\t\u0012\u0005\u0012\u00030Ê\u00030\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030É\u0003H'¢\u0006\u0006\bË\u0003\u0010Ì\u0003JN\u0010Ï\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\t\b\u0001\u0010\u0003\u001a\u00030Í\u00032\u000b\b\u0001\u0010Î\u0003\u001a\u0004\u0018\u00010?H'¢\u0006\u0006\bÏ\u0003\u0010Ð\u0003JC\u0010Ñ\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\u000b\b\u0001\u0010Î\u0003\u001a\u0004\u0018\u00010?H'¢\u0006\u0006\bÑ\u0003\u0010ê\u0002JT\u0010Ó\u0003\u001a\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\t0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\t\b\u0001\u0010\u0003\u001a\u00030Ò\u00032\u000b\b\u0001\u0010Î\u0003\u001a\u0004\u0018\u00010?H'¢\u0006\u0006\bÓ\u0003\u0010Ô\u0003JA\u0010Ö\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\t\b\u0001\u0010\u0003\u001a\u00030Õ\u0003H'¢\u0006\u0006\bÖ\u0003\u0010×\u0003JA\u0010Ù\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\t\b\u0001\u0010\u0003\u001a\u00030Ø\u0003H'¢\u0006\u0006\bÙ\u0003\u0010Ú\u0003J&\u0010Ü\u0003\u001a\t\u0012\u0005\u0012\u00030Û\u00030\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\bÜ\u0003\u0010>J>\u0010ß\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010Ý\u0003\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030Þ\u0003H'¢\u0006\u0006\bß\u0003\u0010à\u0003J9\u0010á\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000f\b\u0001\u0010\u0003\u001a\t\u0012\u0005\u0012\u00030Þ\u000308H'¢\u0006\u0006\bá\u0003\u0010â\u0003J3\u0010ã\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010Ý\u0003\u001a\u00020;H'¢\u0006\u0006\bã\u0003\u0010¥\u0002J@\u0010å\u0003\u001a\u0012\u0012\u000e\u0012\f\u0012\b\u0012\u00060;j\u0002`V080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010Ý\u0003\u001a\u00070;j\u0003`ä\u0003H'¢\u0006\u0006\bå\u0003\u0010¥\u0002J9\u0010æ\u0003\u001a\u001c\u0012\u0018\u0012\u0016\u0012\t\u0012\u00070;j\u0003`ä\u0003\u0012\u0005\u0012\u00030µ\u0001\u0018\u00010L0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\bæ\u0003\u0010>J3\u0010è\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030ç\u0003H'¢\u0006\u0006\bè\u0003\u0010é\u0003J3\u0010ì\u0003\u001a\t\u0012\u0005\u0012\u00030ë\u00030\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\n\b\u0001\u0010ê\u0003\u001a\u00030µ\u0001H'¢\u0006\u0006\bì\u0003\u0010í\u0003J3\u0010ï\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030î\u0003H'¢\u0006\u0006\bï\u0003\u0010ð\u0003J4\u0010ò\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\n\b\u0001\u0010ò\u0003\u001a\u00030ñ\u0003H'¢\u0006\u0006\bò\u0003\u0010ó\u0003J,\u0010õ\u0003\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ô\u0003080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\bõ\u0003\u0010>J3\u0010ö\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008f\u0002\u001a\u00020;H'¢\u0006\u0006\bö\u0003\u0010¥\u0002J>\u0010ø\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008f\u0002\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030÷\u0003H'¢\u0006\u0006\bø\u0003\u0010ù\u0003J3\u0010û\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030ú\u0003H'¢\u0006\u0006\bû\u0003\u0010ü\u0003J3\u0010ý\u0003\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008f\u0002\u001a\u00020;H'¢\u0006\u0006\bý\u0003\u0010¥\u0002J,\u0010þ\u0003\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Á\u0002080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\bþ\u0003\u0010>J$\u0010\u0080\u0004\u001a\t\u0012\u0005\u0012\u00030Á\u00020\u00042\t\b\u0001\u0010ÿ\u0003\u001a\u00020?H'¢\u0006\u0006\b\u0080\u0004\u0010Ð\u0001J&\u0010\u0082\u0004\u001a\t\u0012\u0005\u0012\u00030\u0081\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0082\u0004\u0010>J2\u0010\u0084\u0004\u001a\t\u0012\u0005\u0012\u00030\u0081\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030\u0083\u0004H'¢\u0006\u0006\b\u0084\u0004\u0010\u0085\u0004J9\u0010\u0087\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000f\b\u0001\u0010\u0003\u001a\t\u0012\u0005\u0012\u00030\u0086\u000408H'¢\u0006\u0006\b\u0087\u0004\u0010â\u0003J®\u0001\u0010\u0089\u0004\u001a\t\u0012\u0005\u0012\u00030ù\u00020\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000b\b\u0001\u0010ò\u0002\u001a\u0004\u0018\u00010;2\u0011\b\u0001\u0010ó\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\u0011\b\u0001\u0010ô\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\u0011\b\u0001\u0010\u0088\u0004\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\u0011\b\u0001\u0010õ\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\u0011\b\u0001\u0010ö\u0002\u001a\n\u0012\u0004\u0012\u00020?\u0018\u0001082\f\b\u0001\u0010÷\u0002\u001a\u0005\u0018\u00010µ\u00012\u000b\b\u0001\u0010ø\u0002\u001a\u0004\u0018\u00010zH'¢\u0006\u0006\b\u0089\u0004\u0010\u008a\u0004J`\u0010\u008c\u0004\u001a\t\u0012\u0005\u0012\u00030\u008b\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u00012\u000b\b\u0001\u0010¹\u0001\u001a\u0004\u0018\u00010;2\u0010\b\u0001\u0010W\u001a\n\u0018\u00010;j\u0004\u0018\u0001`V2\f\b\u0001\u0010Ã\u0001\u001a\u0005\u0018\u00010µ\u0001H'¢\u0006\u0006\b\u008c\u0004\u0010\u008d\u0004J&\u0010\u008f\u0004\u001a\t\u0012\u0005\u0012\u00030\u008e\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u008f\u0004\u0010>J&\u0010\u0091\u0004\u001a\t\u0012\u0005\u0012\u00030\u0090\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0091\u0004\u0010>J&\u0010\u0093\u0004\u001a\t\u0012\u0005\u0012\u00030\u0092\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0093\u0004\u0010>J2\u0010\u0096\u0004\u001a\t\u0012\u0005\u0012\u00030\u0095\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030\u0094\u0004H'¢\u0006\u0006\b\u0096\u0004\u0010\u0097\u0004J&\u0010\u0098\u0004\u001a\t\u0012\u0005\u0012\u00030\u0095\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0098\u0004\u0010>J(\u0010\u0099\u0004\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010\u0095\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0099\u0004\u0010>J'\u0010\u009a\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u009a\u0004\u0010>J\u001e\u0010\u009b\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030¨\u0003080\u0004H'¢\u0006\u0005\b\u009b\u0004\u00107JA\u0010\u009d\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\f\b\u0001\u0010W\u001a\u00060;j\u0002`V2\t\b\u0001\u0010\u0003\u001a\u00030\u009c\u0004H'¢\u0006\u0006\b\u009d\u0004\u0010\u009e\u0004J3\u0010\u009f\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030\u009c\u0004H'¢\u0006\u0006\b\u009f\u0004\u0010 \u0004J7\u0010¤\u0004\u001a\t\u0012\u0005\u0012\u00030£\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010¢\u0004\u001a\u00070;j\u0003`¡\u0004H'¢\u0006\u0006\b¤\u0004\u0010¥\u0002JB\u0010§\u0004\u001a\t\u0012\u0005\u0012\u00030¦\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010¢\u0004\u001a\u00070;j\u0003`¡\u00042\t\b\u0001\u0010\u0003\u001a\u00030¥\u0004H'¢\u0006\u0006\b§\u0004\u0010¨\u0004J8\u0010ª\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030£\u0004080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010©\u0004\u001a\u00020zH'¢\u0006\u0006\bª\u0004\u0010«\u0004J-\u0010®\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030\u00ad\u0004080\u00042\r\b\u0001\u0010¬\u0004\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b®\u0004\u0010>J7\u0010¯\u0004\u001a\t\u0012\u0005\u0012\u00030¦\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010¢\u0004\u001a\u00070;j\u0003`¡\u0004H'¢\u0006\u0006\b¯\u0004\u0010¥\u0002J8\u0010°\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010¢\u0004\u001a\u00070;j\u0003`¡\u0004H'¢\u0006\u0006\b°\u0004\u0010¥\u0002J5\u0010³\u0004\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010£\u00040\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\n\b\u0001\u0010²\u0004\u001a\u00030±\u0004H'¢\u0006\u0006\b³\u0004\u0010´\u0004J8\u0010µ\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010¢\u0004\u001a\u00070;j\u0003`¡\u0004H'¢\u0006\u0006\bµ\u0004\u0010¥\u0002J_\u0010¹\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030¸\u0004080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010¢\u0004\u001a\u00070;j\u0003`¡\u00042\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u00012\t\b\u0001\u0010¶\u0004\u001a\u00020z2\t\b\u0001\u0010·\u0004\u001a\u00020zH'¢\u0006\u0006\b¹\u0004\u0010º\u0004J:\u0010¼\u0004\u001a\t\u0012\u0005\u0012\u00030Á\u00020\u00042\t\b\u0001\u0010»\u0004\u001a\u00020?2\t\b\u0001\u0010\u0003\u001a\u00030Ã\u00032\t\b\u0001\u0010§\u0001\u001a\u00020?H'¢\u0006\u0006\b¼\u0004\u0010½\u0004JI\u0010À\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Á\u00020\t0\u00042\t\b\u0001\u0010»\u0004\u001a\u00020?2\t\b\u0001\u0010¾\u0004\u001a\u00020z2\u0012\b\u0003\u0010¿\u0004\u001a\u000b\u0018\u00010;j\u0005\u0018\u0001`¡\u0004H'¢\u0006\u0006\bÀ\u0004\u0010Á\u0004J$\u0010Ä\u0004\u001a\t\u0012\u0005\u0012\u00030Ã\u00040\u00042\t\b\u0001\u0010Â\u0004\u001a\u00020?H'¢\u0006\u0006\bÄ\u0004\u0010Ð\u0001J/\u0010Æ\u0004\u001a\t\u0012\u0005\u0012\u00030¨\u00030\u00042\t\b\u0001\u0010Â\u0004\u001a\u00020?2\t\b\u0001\u0010\u0003\u001a\u00030Å\u0004H'¢\u0006\u0006\bÆ\u0004\u0010Ç\u0004J-\u0010Ê\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030É\u0004080\u00042\r\b\u0001\u0010È\u0004\u001a\u00060;j\u0002`RH'¢\u0006\u0005\bÊ\u0004\u0010>J8\u0010Ì\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030É\u0004080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010Ë\u0004\u001a\u00020zH'¢\u0006\u0006\bÌ\u0004\u0010«\u0004J,\u0010Î\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Í\u0004080\u00042\f\b\u0001\u0010S\u001a\u00060;j\u0002`RH'¢\u0006\u0005\bÎ\u0004\u0010>J%\u0010Ð\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010\u0003\u001a\u00030Ï\u0004H'¢\u0006\u0006\bÐ\u0004\u0010Ñ\u0004J\u001e\u0010Ó\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Ò\u0004080\u0004H'¢\u0006\u0005\bÓ\u0004\u00107J:\u0010×\u0004\u001a\t\u0012\u0005\u0012\u00030Ö\u00040\u00042\t\b\u0001\u0010»\u0004\u001a\u00020?2\t\b\u0001\u0010Ô\u0004\u001a\u00020z2\t\b\u0001\u0010Õ\u0004\u001a\u00020zH'¢\u0006\u0006\b×\u0004\u0010Ø\u0004J0\u0010Ú\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010Ù\u0004\u001a\u00020?2\t\b\u0001\u0010ö\u0002\u001a\u00020?H'¢\u0006\u0006\bÚ\u0004\u0010ß\u0001J-\u0010Û\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u0011\b\u0001\u0010\u009e\u0002\u001a\n\u0012\u0005\u0012\u00030\u009d\u00020\u009c\u0002H'¢\u0006\u0006\bÛ\u0004\u0010Ü\u0004JC\u0010á\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Ö\u0004080\u00042\u000e\b\u0001\u0010Þ\u0004\u001a\u00070;j\u0003`Ý\u00042\u0012\b\u0001\u0010à\u0004\u001a\u000b\u0018\u00010;j\u0005\u0018\u0001`ß\u0004H'¢\u0006\u0006\bá\u0004\u0010¿\u0002J%\u0010â\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010»\u0004\u001a\u00020?H'¢\u0006\u0006\bâ\u0004\u0010Ð\u0001J$\u0010ä\u0004\u001a\t\u0012\u0005\u0012\u00030Ö\u00040\u00042\t\b\u0001\u0010\u0003\u001a\u00030ã\u0004H'¢\u0006\u0006\bä\u0004\u0010å\u0004J%\u0010æ\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010»\u0004\u001a\u00020?H'¢\u0006\u0006\bæ\u0004\u0010Ð\u0001J\u001e\u0010è\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ç\u0004080\u0004H'¢\u0006\u0005\bè\u0004\u00107J8\u0010ê\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ç\u0004080\u00042\f\b\u0001\u0010S\u001a\u00060;j\u0002`R2\t\b\u0003\u0010é\u0004\u001a\u00020zH'¢\u0006\u0006\bê\u0004\u0010«\u0004J\u001e\u0010ì\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ë\u0004080\u0004H'¢\u0006\u0005\bì\u0004\u00107J\u001e\u0010í\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ë\u0004080\u0004H'¢\u0006\u0005\bí\u0004\u00107J\u001e\u0010ï\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030î\u0004080\u0004H'¢\u0006\u0005\bï\u0004\u00107J#\u0010ñ\u0004\u001a\t\u0012\u0005\u0012\u00030î\u00040\u00042\t\b\u0001\u0010ð\u0004\u001a\u00020;H'¢\u0006\u0005\bñ\u0004\u0010>J$\u0010ô\u0004\u001a\t\u0012\u0005\u0012\u00030ó\u00040\u00042\t\b\u0001\u0010ò\u0004\u001a\u00020?H'¢\u0006\u0006\bô\u0004\u0010Ð\u0001J\u001e\u0010ö\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030õ\u0004080\u0004H'¢\u0006\u0005\bö\u0004\u00107J1\u0010ú\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010÷\u0004\u001a\u00020?2\n\b\u0001\u0010ù\u0004\u001a\u00030ø\u0004H'¢\u0006\u0006\bú\u0004\u0010û\u0004J%\u0010ü\u0004\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010÷\u0004\u001a\u00020?H'¢\u0006\u0006\bü\u0004\u0010Ð\u0001J\u001e\u0010þ\u0004\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ý\u0004080\u0004H'¢\u0006\u0005\bþ\u0004\u00107J1\u0010\u0081\u0005\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010ÿ\u0004\u001a\u00020?2\n\b\u0001\u0010\u0081\u0005\u001a\u00030\u0080\u0005H'¢\u0006\u0006\b\u0081\u0005\u0010\u0082\u0005J%\u0010\u0083\u0005\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\t\b\u0001\u0010ÿ\u0004\u001a\u00020?H'¢\u0006\u0006\b\u0083\u0005\u0010Ð\u0001J'\u0010\u0087\u0005\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010\u0086\u00050\u00042\n\b\u0001\u0010\u0085\u0005\u001a\u00030\u0084\u0005H'¢\u0006\u0006\b\u0087\u0005\u0010\u0088\u0005J'\u0010\u008c\u0005\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010\u008b\u00050\u00042\n\b\u0001\u0010\u008a\u0005\u001a\u00030\u0089\u0005H'¢\u0006\u0006\b\u008c\u0005\u0010\u008d\u0005J&\u0010\u0090\u0005\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u00010\u00042\n\b\u0001\u0010\u008f\u0005\u001a\u00030\u008e\u0005H'¢\u0006\u0006\b\u0090\u0005\u0010\u0091\u0005J'\u0010\u0094\u0005\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010¦\u00040\u00042\n\b\u0001\u0010\u0093\u0005\u001a\u00030\u0092\u0005H'¢\u0006\u0006\b\u0094\u0005\u0010\u0095\u0005J4\u0010\u009a\u0005\u001a\t\u0012\u0005\u0012\u00030\u0099\u00050\u00042\u000e\b\u0001\u0010\u0097\u0005\u001a\u00070?j\u0003`\u0096\u00052\t\b\u0001\u0010\u0098\u0005\u001a\u00020;H'¢\u0006\u0006\b\u009a\u0005\u0010\u009b\u0005J6\u0010\u009e\u0005\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\u000e\b\u0001\u0010\u0097\u0005\u001a\u00070?j\u0003`\u0096\u00052\n\b\u0001\u0010\u009d\u0005\u001a\u00030\u009c\u0005H'¢\u0006\u0006\b\u009e\u0005\u0010\u009f\u0005J9\u0010£\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030¢\u0005080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\n\b\u0001\u0010¡\u0005\u001a\u00030 \u0005H'¢\u0006\u0006\b£\u0005\u0010¤\u0005J3\u0010¥\u0005\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010ÿ\u0004\u001a\u00020;H'¢\u0006\u0006\b¥\u0005\u0010¥\u0002J\u001e\u0010§\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030¦\u0005080\u0004H'¢\u0006\u0005\b§\u0005\u00107J(\u0010ª\u0005\u001a\t\u0012\u0005\u0012\u00030¦\u00050\u00042\u000e\b\u0001\u0010©\u0005\u001a\u00070;j\u0003`¨\u0005H'¢\u0006\u0005\bª\u0005\u0010>J(\u0010«\u0005\u001a\t\u0012\u0005\u0012\u00030¦\u00050\u00042\u000e\b\u0001\u0010©\u0005\u001a\u00070;j\u0003`¨\u0005H'¢\u0006\u0005\b«\u0005\u0010>J:\u0010°\u0005\u001a\t\u0012\u0005\u0012\u00030¯\u00050\u00042\t\b\u0001\u0010¬\u0005\u001a\u00020?2\t\b\u0001\u0010\u00ad\u0005\u001a\u00020?2\t\b\u0001\u0010®\u0005\u001a\u00020?H'¢\u0006\u0006\b°\u0005\u0010±\u0005JL\u0010³\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030²\u0005080\u00042\t\b\u0001\u0010¬\u0005\u001a\u00020?2\t\b\u0001\u0010\u00ad\u0005\u001a\u00020?2\t\b\u0001\u0010®\u0005\u001a\u00020?2\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u0001H'¢\u0006\u0006\b³\u0005\u0010´\u0005JW\u0010¶\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030²\u0005080\u00042\t\b\u0001\u0010µ\u0005\u001a\u00020?2\t\b\u0001\u0010¬\u0005\u001a\u00020?2\t\b\u0001\u0010\u00ad\u0005\u001a\u00020?2\t\b\u0001\u0010®\u0005\u001a\u00020?2\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u0001H'¢\u0006\u0006\b¶\u0005\u0010·\u0005J@\u0010¸\u0005\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020?080\u00042\t\b\u0001\u0010¬\u0005\u001a\u00020?2\t\b\u0001\u0010\u00ad\u0005\u001a\u00020?2\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u0001H'¢\u0006\u0006\b¸\u0005\u0010¹\u0005JK\u0010º\u0005\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020?080\u00042\t\b\u0001\u0010¬\u0005\u001a\u00020?2\t\b\u0001\u0010µ\u0005\u001a\u00020?2\t\b\u0001\u0010\u00ad\u0005\u001a\u00020?2\n\b\u0001\u0010¶\u0001\u001a\u00030µ\u0001H'¢\u0006\u0006\bº\u0005\u0010´\u0005J$\u0010½\u0005\u001a\t\u0012\u0005\u0012\u00030¼\u00050\u00042\t\b\u0001\u0010»\u0005\u001a\u00020?H'¢\u0006\u0006\b½\u0005\u0010Ð\u0001J/\u0010¿\u0005\u001a\t\u0012\u0005\u0012\u00030¦\u00040\u00042\t\b\u0001\u0010»\u0005\u001a\u00020?2\t\b\u0001\u0010\u0003\u001a\u00030¾\u0005H'¢\u0006\u0006\b¿\u0005\u0010À\u0005J\u0018\u0010Â\u0005\u001a\t\u0012\u0005\u0012\u00030Á\u00050\u0004H'¢\u0006\u0005\bÂ\u0005\u00107J(\u0010Æ\u0005\u001a\t\u0012\u0005\u0012\u00030Å\u00050\u00042\u000e\b\u0001\u0010Ä\u0005\u001a\u00070;j\u0003`Ã\u0005H'¢\u0006\u0005\bÆ\u0005\u0010>J*\u0010É\u0005\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010È\u00050\u00042\u000e\b\u0001\u0010Ç\u0005\u001a\u00070;j\u0003`\u008c\u0003H'¢\u0006\u0005\bÉ\u0005\u0010>J#\u0010Ê\u0005\u001a\t\u0012\u0005\u0012\u00030¨\u00030\u00042\t\b\u0001\u0010Ç\u0005\u001a\u00020;H'¢\u0006\u0005\bÊ\u0005\u0010>J4\u0010Ì\u0005\u001a\t\u0012\u0005\u0012\u00030¦\u00040\u00042\u000e\b\u0001\u0010Þ\u0004\u001a\u00070;j\u0003`Ý\u00042\t\b\u0001\u0010Ë\u0005\u001a\u00020\u0002H'¢\u0006\u0006\bÌ\u0005\u0010Ø\u0002Jk\u0010Î\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Í\u0005080\u00042\u0012\b\u0003\u0010Å\u0001\u001a\u000b\u0018\u00010;j\u0005\u0018\u0001`Ä\u00012\u0010\b\u0003\u0010}\u001a\n\u0018\u00010;j\u0004\u0018\u0001`|2\u0012\b\u0003\u0010Ç\u0001\u001a\u000b\u0018\u00010;j\u0005\u0018\u0001`Æ\u00012\u0010\b\u0003\u0010W\u001a\n\u0018\u00010;j\u0004\u0018\u0001`VH'¢\u0006\u0006\bÎ\u0005\u0010Ï\u0005J$\u0010Î\u0005\u001a\t\u0012\u0005\u0012\u00030¦\u00040\u00042\t\b\u0001\u0010\u0003\u001a\u00030Ð\u0005H'¢\u0006\u0006\bÎ\u0005\u0010Ñ\u0005J6\u0010Õ\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Ô\u0005080\u00042\u0015\b\u0001\u0010Ó\u0005\u001a\u000e\u0012\t\u0012\u00070;j\u0003`Ä\u00010Ò\u0005H'¢\u0006\u0006\bÕ\u0005\u0010Ö\u0005J$\u0010×\u0005\u001a\u0015\u0012\u0011\u0012\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030Ô\u0005080\t0\u0004H'¢\u0006\u0005\b×\u0005\u00107J$\u0010Ú\u0005\u001a\t\u0012\u0005\u0012\u00030Ù\u00050\u00042\t\b\u0001\u0010\u0003\u001a\u00030Ø\u0005H'¢\u0006\u0006\bÚ\u0005\u0010Û\u0005J4\u0010Ý\u0005\u001a\t\u0012\u0005\u0012\u00030Ù\u00050\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010\u0003\u001a\u00030Ü\u0005H'¢\u0006\u0006\bÝ\u0005\u0010Þ\u0005J(\u0010ß\u0005\u001a\t\u0012\u0005\u0012\u00030¦\u00040\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\bß\u0005\u0010>J*\u0010â\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030á\u00050\t0\u00042\t\b\u0001\u0010\u0003\u001a\u00030à\u0005H'¢\u0006\u0006\bâ\u0005\u0010ã\u0005J*\u0010æ\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030å\u00050\t0\u00042\t\b\u0001\u0010\u0003\u001a\u00030ä\u0005H'¢\u0006\u0006\bæ\u0005\u0010ç\u0005J$\u0010ê\u0005\u001a\t\u0012\u0005\u0012\u00030é\u00050\u00042\t\b\u0001\u0010\u0003\u001a\u00030è\u0005H'¢\u0006\u0006\bê\u0005\u0010ë\u0005JZ\u0010ð\u0005\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010¦\u00040\u00042\t\b\u0001\u0010\u0089\u0003\u001a\u00020?2\u000b\b\u0001\u0010ì\u0005\u001a\u0004\u0018\u00010?2\n\b\u0001\u0010í\u0005\u001a\u00030µ\u00012\u000b\b\u0001\u0010î\u0005\u001a\u0004\u0018\u00010;2\f\b\u0001\u0010ï\u0005\u001a\u0005\u0018\u00010\u009d\u0002H'¢\u0006\u0006\bð\u0005\u0010ñ\u0005J\u0018\u0010ó\u0005\u001a\t\u0012\u0005\u0012\u00030ò\u00050\u0004H'¢\u0006\u0005\bó\u0005\u00107J.\u0010õ\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ô\u0005080\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\bõ\u0005\u0010>J;\u0010÷\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ö\u0005080\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\n\b\u0001\u0010\u008e\u0003\u001a\u00030µ\u0001H'¢\u0006\u0006\b÷\u0005\u0010í\u0003J@\u0010ú\u0005\u001a\t\u0012\u0005\u0012\u00030ù\u00050\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000b\b\u0001\u0010ø\u0005\u001a\u0004\u0018\u00010;2\n\b\u0001\u0010\u008e\u0003\u001a\u00030µ\u0001H'¢\u0006\u0006\bú\u0005\u0010û\u0005JH\u0010ý\u0005\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ô\u00050\t0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030ü\u0005H'¢\u0006\u0006\bý\u0005\u0010þ\u0005JB\u0010ÿ\u0005\u001a\t\u0012\u0005\u0012\u00030ô\u00050\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030ü\u0005H'¢\u0006\u0006\bÿ\u0005\u0010þ\u0005J=\u0010\u0080\u0006\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ô\u00050\t0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0006\b\u0080\u0006\u0010¥\u0002J:\u0010\u0081\u0006\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030ô\u0005080\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u00012\t\b\u0001\u0010µ\u0005\u001a\u00020?H'¢\u0006\u0006\b\u0081\u0006\u0010¯\u0001J5\u0010\u0082\u0006\u001a\u0016\u0012\u0012\u0012\u0010\u0012\u0005\u0012\u00030µ\u0001\u0012\u0005\u0012\u00030µ\u00010L0\u00042\u000e\b\u0001\u0010Å\u0001\u001a\u00070;j\u0003`Ä\u0001H'¢\u0006\u0005\b\u0082\u0006\u0010>J&\u0010\u0084\u0006\u001a\t\u0012\u0005\u0012\u00030\u0083\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0084\u0006\u0010>J&\u0010\u0086\u0006\u001a\t\u0012\u0005\u0012\u00030\u0085\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u0086\u0006\u0010>J7\u0010\u0088\u0006\u001a\t\u0012\u0005\u0012\u00030\u0085\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\u000e\b\u0001\u0010\u0087\u0006\u001a\u00070;j\u0003`\u009a\u0003H'¢\u0006\u0006\b\u0088\u0006\u0010¥\u0002J2\u0010\u008b\u0006\u001a\t\u0012\u0005\u0012\u00030\u008a\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u0003\u001a\u00030\u0089\u0006H'¢\u0006\u0006\b\u008b\u0006\u0010\u008c\u0006J,\u0010\u008d\u0006\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030\u008a\u0006080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b\u008d\u0006\u0010>J4\u0010\u008f\u0006\u001a\u000b\u0012\u0007\u0012\u0005\u0018\u00010\u008a\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008e\u0006\u001a\u00020;H'¢\u0006\u0006\b\u008f\u0006\u0010¥\u0002J=\u0010\u0091\u0006\u001a\t\u0012\u0005\u0012\u00030\u008a\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008e\u0006\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030\u0090\u0006H'¢\u0006\u0006\b\u0091\u0006\u0010\u0092\u0006J=\u0010\u0095\u0006\u001a\t\u0012\u0005\u0012\u00030\u0094\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008e\u0006\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030\u0093\u0006H'¢\u0006\u0006\b\u0095\u0006\u0010\u0096\u0006JH\u0010\u0099\u0006\u001a\t\u0012\u0005\u0012\u00030\u0094\u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008e\u0006\u001a\u00020;2\t\b\u0001\u0010\u0097\u0006\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030\u0098\u0006H'¢\u0006\u0006\b\u0099\u0006\u0010\u009a\u0006J>\u0010\u009b\u0006\u001a\n\u0012\u0006\u0012\u0004\u0018\u00010\u000e0\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010\u008e\u0006\u001a\u00020;2\t\b\u0001\u0010\u0097\u0006\u001a\u00020;H'¢\u0006\u0006\b\u009b\u0006\u0010\u009c\u0006J+\u0010\u009e\u0006\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030µ\u0001080\u00042\n\b\u0001\u0010\u009d\u0006\u001a\u00030µ\u0001H'¢\u0006\u0006\b\u009e\u0006\u0010\u009f\u0006J,\u0010¡\u0006\u001a\u000f\u0012\u000b\u0012\t\u0012\u0005\u0012\u00030 \u0006080\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|H'¢\u0006\u0005\b¡\u0006\u0010>J=\u0010¤\u0006\u001a\t\u0012\u0005\u0012\u00030 \u00060\u00042\f\b\u0001\u0010}\u001a\u00060;j\u0002`|2\t\b\u0001\u0010¢\u0006\u001a\u00020;2\t\b\u0001\u0010\u0003\u001a\u00030£\u0006H'¢\u0006\u0006\b¤\u0006\u0010¥\u0006J$\u0010¨\u0006\u001a\t\u0012\u0005\u0012\u00030§\u00060\u00042\t\b\u0001\u0010\u0003\u001a\u00030¦\u0006H'¢\u0006\u0006\b¨\u0006\u0010©\u0006R\u001f\u0010¬\u0006\u001a\t\u0012\u0005\u0012\u00030ª\u00060\u00048g@&X¦\u0004¢\u0006\u0007\u001a\u0005\b«\u0006\u00107¨\u0006±\u0006"}, d2 = {"Lcom/discord/restapi/RestAPIInterface;", "", "Lcom/discord/restapi/RestAPIParams$EmptyBody;", "body", "Lrx/Observable;", "Lcom/discord/api/fingerprint/FingerprintResponse;", "postAuthFingerprint", "(Lcom/discord/restapi/RestAPIParams$EmptyBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$AuthRegister;", "Lretrofit2/Response;", "Lcom/discord/api/auth/RegisterResponse;", "postAuthRegister", "(Lcom/discord/restapi/RestAPIParams$AuthRegister;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$AuthRegisterPhone;", "Ljava/lang/Void;", "postAuthRegisterPhone", "(Lcom/discord/restapi/RestAPIParams$AuthRegisterPhone;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$AuthLogin;", "Lcom/discord/models/domain/auth/ModelLoginResult;", "postAuthLogin", "(Lcom/discord/restapi/RestAPIParams$AuthLogin;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserDevices;", "logout", "(Lcom/discord/restapi/RestAPIParams$UserDevices;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ForgotPassword;", "forgotPassword", "(Lcom/discord/restapi/RestAPIParams$ForgotPassword;)Lrx/Observable;", "postAuthVerifyResend", "Lcom/discord/restapi/RestAPIParams$MFALogin;", "postMFACode", "(Lcom/discord/restapi/RestAPIParams$MFALogin;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$AuthorizeIP;", "authorizeIP", "(Lcom/discord/restapi/RestAPIParams$AuthorizeIP;)Lrx/Observable;", "Lcom/discord/api/auth/mfa/GetBackupCodesRequestBody;", "Lcom/discord/api/auth/mfa/GetBackupCodesResponse;", "getBackupCodes", "(Lcom/discord/api/auth/mfa/GetBackupCodesRequestBody;)Lrx/Observable;", "Lcom/discord/api/auth/mfa/GetBackupCodesSendVerificationKeyRequestBody;", "Lcom/discord/api/auth/mfa/GetBackupCodesSendVerificationKeyResponse;", "getBackupCodesSendVerificationKey", "(Lcom/discord/api/auth/mfa/GetBackupCodesSendVerificationKeyRequestBody;)Lrx/Observable;", "Lcom/discord/api/auth/mfa/GetBackupCodesVerificationRequestBody;", "getBackupCodesVerification", "(Lcom/discord/api/auth/mfa/GetBackupCodesVerificationRequestBody;)Lrx/Observable;", "Lcom/discord/api/auth/mfa/DisableMfaRequestBody;", "Lcom/discord/api/auth/mfa/DisableMfaResponse;", "disableMFA", "(Lcom/discord/api/auth/mfa/DisableMfaRequestBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$EnableMFA;", "Lcom/discord/api/auth/mfa/EnableMfaResponse;", "enableMFA", "(Lcom/discord/restapi/RestAPIParams$EnableMFA;)Lrx/Observable;", "Lcom/discord/models/domain/ModelLocationMetadata;", "getLocationMetadata", "()Lrx/Observable;", "", "Lcom/discord/models/domain/ModelOAuth2Token;", "getOAuthTokens", "", "oauthId", "deleteOAuthToken", "(J)Lrx/Observable;", "", "clientId", "state", "responseType", "redirectUrl", "prompt", "scope", ModelAuditLogEntry.CHANGE_KEY_PERMISSIONS, "Lcom/discord/restapi/RestAPIParams$OAuth2Authorize$ResponseGet;", "getOauth2Authorize", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lrx/Observable;", "codeChallenge", "codeChallengeMethod", "", "Lcom/discord/restapi/RestAPIParams$OAuth2Authorize$ResponsePost;", "postOauth2Authorize", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lrx/Observable;", "getOauth2SamsungAuthorize", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lrx/Observable;", "Lcom/discord/primitives/ApplicationId;", "applicationId", "Lcom/discord/api/application/ApplicationAsset;", "getApplicationAssets", "Lcom/discord/primitives/UserId;", "userId", "Lcom/discord/api/user/User;", "userGet", "Lcom/discord/restapi/RestAPIParams$CreateChannel;", "Lcom/discord/api/channel/Channel;", "userCreateChannel", "(Lcom/discord/restapi/RestAPIParams$CreateChannel;)Lrx/Observable;", "userCreateDevice", "Lcom/discord/restapi/RestAPIParams$Phone;", "userAddPhone", "(Lcom/discord/restapi/RestAPIParams$Phone;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$VerificationCodeOnly;", "userAddPhoneNoPassword", "(Lcom/discord/restapi/RestAPIParams$VerificationCodeOnly;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$VerificationCode;", "Lcom/discord/models/domain/ModelPhoneVerificationToken;", "phoneVerificationsVerify", "(Lcom/discord/restapi/RestAPIParams$VerificationCode;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$VerificationCodeResend;", "phoneVerificationsResend", "(Lcom/discord/restapi/RestAPIParams$VerificationCodeResend;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$VerificationPhoneCode;", "userPhoneWithToken", "(Lcom/discord/restapi/RestAPIParams$VerificationPhoneCode;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$DeletePhone;", "userPhoneDelete", "(Lcom/discord/restapi/RestAPIParams$DeletePhone;)Lrx/Observable;", "userEmail", "Lcom/discord/restapi/RestAPIParams$UserEmailConfirmCode;", "Lcom/discord/models/domain/ModelEmailChangeConfirm;", "userEmailVerifyCode", "(Lcom/discord/restapi/RestAPIParams$UserEmailConfirmCode;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$CaptchaCode;", "userCaptchaVerify", "(Lcom/discord/restapi/RestAPIParams$CaptchaCode;)Lrx/Observable;", "", "withMutualGuilds", "Lcom/discord/primitives/GuildId;", "guildId", "Lcom/discord/api/user/UserProfile;", "userProfileGet", "(JZLjava/lang/Long;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserAgreements;", "userAgreements", "(Lcom/discord/restapi/RestAPIParams$UserAgreements;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserInfo;", "userInfo", "patchUser", "(Lcom/discord/restapi/RestAPIParams$UserInfo;)Lrx/Observable;", "Lcom/discord/api/user/PatchUserBody;", "patchUserBody", "(Lcom/discord/api/user/PatchUserBody;)Lrx/Observable;", "Lcom/discord/models/domain/ModelUserNote;", "getUserNote", "Lcom/discord/restapi/RestAPIParams$UserNoteUpdate;", "userNoteUpdate", "updateUserNotes", "(JLcom/discord/restapi/RestAPIParams$UserNoteUpdate;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserGuildSettings;", "userGuildSettings", "Lcom/discord/models/domain/ModelNotificationSettings;", "updateUserGuildSettings", "(JLcom/discord/restapi/RestAPIParams$UserGuildSettings;)Lrx/Observable;", "updatePrivateChannelSettings", "(Lcom/discord/restapi/RestAPIParams$UserGuildSettings;)Lrx/Observable;", "leaveGuild", "Lcom/discord/restapi/RestAPIParams$LeaveGuildBody;", "leaveGuildBody", "(JLcom/discord/restapi/RestAPIParams$LeaveGuildBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserSettings;", "userSettings", "Lcom/discord/models/domain/ModelUserSettings;", "updateUserSettings", "(Lcom/discord/restapi/RestAPIParams$UserSettings;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserSettingsCustomStatus;", "userSettingsCustomStatus", "updateUserSettingsCustomStatus", "(Lcom/discord/restapi/RestAPIParams$UserSettingsCustomStatus;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserRelationship$Add;", "relationship", "context", "sendRelationshipRequest", "(Lcom/discord/restapi/RestAPIParams$UserRelationship$Add;Ljava/lang/String;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserBulkRelationship;", "Lcom/discord/api/friendsuggestions/BulkAddFriendsResponse;", "bulkAddRelationships", "(Lcom/discord/restapi/RestAPIParams$UserBulkRelationship;)Lrx/Observable;", "removeRelationship", "(JLjava/lang/String;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UserRelationship;", "addRelationship", "(JLcom/discord/restapi/RestAPIParams$UserRelationship;Ljava/lang/String;)Lrx/Observable;", "Lcom/discord/models/domain/ModelUserRelationship;", "getRelationships", "", "limit", "roles", ModelGuildMemberListUpdate.EVERYONE_ID, "before", "Lcom/discord/api/message/Message;", "getMentions", "(IZZLjava/lang/Long;Ljava/lang/Long;)Lrx/Observable;", "Lcom/discord/primitives/SessionId;", "sessionId", "Lcom/discord/api/activity/ActivityMetadata;", "getActivityMetadata", "(JLjava/lang/String;J)Lrx/Observable;", "application", "actionType", "Lcom/discord/primitives/ChannelId;", "channelId", "Lcom/discord/primitives/MessageId;", "messageId", "Lcom/discord/api/activity/ActivityActionConfirmation;", "userActivityAction", "(JJLjava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Long;)Lrx/Observable;", "Lcom/discord/api/connectedaccounts/ConnectedAccount;", "getConnections", "connection", "Lcom/discord/models/domain/ModelUrl;", "authorizeConnection", "(Ljava/lang/String;)Lrx/Observable;", "connectionId", "Lcom/discord/restapi/RestAPIParams$ConnectedAccount;", "connectedAccount", "updateConnection", "(Ljava/lang/String;Ljava/lang/String;Lcom/discord/restapi/RestAPIParams$ConnectedAccount;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ConnectedAccountContacts;", "connectedAccountContacts", "createConnectionContacts", "(Lcom/discord/restapi/RestAPIParams$ConnectedAccountContacts;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ConnectedAccountNameOnly;", "connectedAccountName", "updateConnectionName", "(Ljava/lang/String;Ljava/lang/String;Lcom/discord/restapi/RestAPIParams$ConnectedAccountNameOnly;)Lrx/Observable;", "deleteConnection", "(Ljava/lang/String;Ljava/lang/String;)Lrx/Observable;", "platformType", "accountId", "Lcom/discord/models/domain/ModelConnectionAccessToken;", "getConnectionAccessToken", "Lcom/discord/restapi/RestAPIParams$UploadContacts;", "uploadContacts", "Lcom/discord/api/friendsuggestions/BulkFriendSuggestions;", "(Lcom/discord/restapi/RestAPIParams$UploadContacts;)Lrx/Observable;", "Lcom/discord/api/friendsuggestions/FriendSuggestion;", "getFriendSuggestions", "ignoreFriendSuggestion", "Lcom/discord/models/domain/Consents;", "getConsents", "Lcom/discord/restapi/RestAPIParams$Consents;", "setConsents", "(Lcom/discord/restapi/RestAPIParams$Consents;)Lrx/Observable;", "pinNumber", "Lcom/discord/models/domain/ModelConnectionState;", "getConnectionState", "Lcom/discord/models/domain/Harvest;", "getHarvestStatus", "requestHarvest", "Lcom/discord/restapi/RestAPIParams$ConnectionState;", "submitConnectionState", "(Ljava/lang/String;Lcom/discord/restapi/RestAPIParams$ConnectionState;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$DisableAccount;", "deleteAccount", "(Lcom/discord/restapi/RestAPIParams$DisableAccount;)Lrx/Observable;", "disableAccount", "Lcom/discord/restapi/RestAPIParams$ActivateMfaSMS;", "enableMfaSMS", "(Lcom/discord/restapi/RestAPIParams$ActivateMfaSMS;)Lrx/Observable;", "disableMfaSMS", "Lcom/discord/restapi/RestAPIParams$RemoteAuthInitialize;", "Lcom/discord/models/domain/ModelRemoteAuthHandshake;", "postRemoteAuthInitialize", "(Lcom/discord/restapi/RestAPIParams$RemoteAuthInitialize;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$RemoteAuthCancel;", "postRemoteAuthCancel", "(Lcom/discord/restapi/RestAPIParams$RemoteAuthCancel;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$RemoteAuthFinish;", "postRemoteAuthFinish", "(Lcom/discord/restapi/RestAPIParams$RemoteAuthFinish;)Lrx/Observable;", "Lcom/discord/models/domain/ModelUserAffinities;", "getUserAffinities", "Lcom/discord/api/user/UserSurveyFetchResponse;", "getUserSurvey", "integrationId", "joinGuildFromIntegration", "Lcom/discord/restapi/RestAPIParams$ComponentInteraction;", "sendComponentInteraction", "(Lcom/discord/restapi/RestAPIParams$ComponentInteraction;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ApplicationCommand;", "sendApplicationCommand", "(Lcom/discord/restapi/RestAPIParams$ApplicationCommand;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ModalInteraction;", "sendModalInteraction", "(Lcom/discord/restapi/RestAPIParams$ModalInteraction;)Lrx/Observable;", "Lcom/discord/restapi/PayloadJSON;", "payloadJson", "", "Lokhttp3/MultipartBody$Part;", ChatInputComponentTypes.FILES, "(Lcom/discord/restapi/PayloadJSON;[Lokhttp3/MultipartBody$Part;)Lrx/Observable;", "botId", "Lcom/discord/api/commands/ApplicationCommand;", "getApplicationCommands", "Lcom/discord/api/commands/ApplicationCommandData;", "getInteractionData", "(JJ)Lrx/Observable;", "after", "getChannelMessages", "(JLjava/lang/Long;Ljava/lang/Long;Ljava/lang/Integer;)Lrx/Observable;", "around", "getChannelMessagesAround", "(JIJ)Lrx/Observable;", "recipientId", "convertDMToGroup", "Lcom/discord/restapi/RestAPIParams$Message;", "message", "sendMessage", "(JLcom/discord/restapi/RestAPIParams$Message;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$GreetMessage;", "sendGreetMessage", "(JLcom/discord/restapi/RestAPIParams$GreetMessage;)Lrx/Observable;", "(JLcom/discord/restapi/PayloadJSON;[Lokhttp3/MultipartBody$Part;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ChannelMessagesAck;", "postChannelMessagesAck", "(JLjava/lang/Long;Lcom/discord/restapi/RestAPIParams$ChannelMessagesAck;)Lrx/Observable;", "ackType", "ackedId", "Lcom/discord/restapi/RestAPIParams$GuildFeatureAck;", "postGuildFeatureAck", "(JIJLcom/discord/restapi/RestAPIParams$GuildFeatureAck;)Lrx/Observable;", "crosspostMessage", "(JLjava/lang/Long;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$Invite;", "Lcom/discord/models/domain/ModelInvite;", "postChannelInvite", "(JLcom/discord/restapi/RestAPIParams$Invite;)Lrx/Observable;", "deleteMessage", "editMessage", "(JJLcom/discord/restapi/RestAPIParams$Message;)Lrx/Observable;", "getChannel", "Lcom/discord/restapi/RestAPIParams$TextChannel;", "editTextChannel", "(JLcom/discord/restapi/RestAPIParams$TextChannel;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$TopicalChannel;", "editTopicalChannel", "(JLcom/discord/restapi/RestAPIParams$TopicalChannel;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$VoiceChannel;", "editVoiceChannel", "(JLcom/discord/restapi/RestAPIParams$VoiceChannel;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$GroupDM;", "editGroupDM", "(JLcom/discord/restapi/RestAPIParams$GroupDM;)Lrx/Observable;", "addChannelRecipient", "removeChannelRecipient", "Lcom/discord/models/domain/ModelTypingResponse;", "setUserTyping", "(JLcom/discord/restapi/RestAPIParams$EmptyBody;)Lrx/Observable;", "deleteChannel", "Lcom/discord/models/domain/ModelCall$Ringable;", NotificationCompat.CATEGORY_CALL, "Lcom/discord/restapi/RestAPIParams$Ring;", "stopRinging", "(JLcom/discord/restapi/RestAPIParams$Ring;Ljava/lang/String;)Lrx/Observable;", "ring", "targetId", "Lcom/discord/restapi/RestAPIParams$ChannelPermissionOverwrites;", "updatePermissionOverwrites", "(JJLcom/discord/restapi/RestAPIParams$ChannelPermissionOverwrites;)Lrx/Observable;", "deletePermissionOverwrites", "getChannelPins", "addChannelPin", "deleteChannelPin", "reaction", "addReaction", "(JJLjava/lang/String;)Lrx/Observable;", "removeSelfReaction", "removeReaction", "(JJLjava/lang/String;J)Lrx/Observable;", "removeAllReactions", "emoji", "getReactionUsers", "(JJLjava/lang/String;Ljava/lang/Integer;)Lrx/Observable;", "oldestMessageId", "authorIds", "mentionsIds", "has", "content", "attempts", "includeNsfw", "Lcom/discord/models/domain/ModelSearchResponse;", "searchChannelMessages", "(JLjava/lang/Long;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/Integer;Ljava/lang/Boolean;)Lrx/Observable;", "Lcom/discord/models/domain/ModelChannelFollowerStatsDto;", "getChannelFollowerStats", "Lcom/discord/restapi/RestAPIParams$ChannelFollowerPost;", "createChannelFollower", "(JLcom/discord/restapi/RestAPIParams$ChannelFollowerPost;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ThreadMemberSettings;", "Lcom/discord/api/thread/ThreadMember;", "updateThreadMemberSettings", "(JLcom/discord/restapi/RestAPIParams$ThreadMemberSettings;)Lrx/Observable;", ModelAuditLogEntry.CHANGE_KEY_LOCATION, "Lcom/discord/restapi/RestAPIParams$ThreadCreationSettings;", "createThread", "(JLjava/lang/String;Lcom/discord/restapi/RestAPIParams$ThreadCreationSettings;)Lrx/Observable;", ModelAuditLogEntry.CHANGE_KEY_NAME, "Lcom/discord/primitives/ForumTagId;", "appliedTags", "Lcom/discord/primitives/StickerId;", "stickerIds", "type", "autoArchiveDuration", "createThreadWithMessage", "(JLjava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;ILjava/lang/Integer;[Lokhttp3/MultipartBody$Part;)Lrx/Observable;", "createThreadFromMessage", "(JJLjava/lang/String;Lcom/discord/restapi/RestAPIParams$ThreadCreationSettings;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ThreadSettings;", "editThread", "(JLcom/discord/restapi/RestAPIParams$ThreadSettings;)Lrx/Observable;", "leaveThread", "joinThread", "(JLjava/lang/String;Lcom/discord/restapi/RestAPIParams$EmptyBody;)Lrx/Observable;", "Lcom/discord/primitives/Snowflake;", "Lcom/discord/api/thread/ThreadListing;", "getMyPrivateArchivedThreads", "getAllPublicArchivedThreads", "getAllPrivateArchivedThreads", "Lcom/discord/restapi/RestAPIParams$GetForumPostData;", "Lcom/discord/api/forum/ForumPostFirstMessages;", "getForumPostData", "(JLcom/discord/restapi/RestAPIParams$GetForumPostData;)Lrx/Observable;", "ackGuild", "Lcom/discord/restapi/RestAPIParams$CreateGuildChannel;", "createGuildChannel", "(JLcom/discord/restapi/RestAPIParams$CreateGuildChannel;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$CreateGuild;", "Lcom/discord/api/guild/Guild;", "createGuild", "(Lcom/discord/restapi/RestAPIParams$CreateGuild;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$DeleteGuild;", "deleteGuild", "(JLcom/discord/restapi/RestAPIParams$DeleteGuild;)Lrx/Observable;", "Lcom/discord/models/domain/ModelBan;", "getBans", "unbanUser", "Lcom/discord/models/domain/ModelVoiceRegion;", "getGuildVoiceRegions", "Lcom/discord/models/domain/emoji/ModelEmojiGuild;", "getGuildEmojis", "Lcom/discord/restapi/RestAPIParams$PostGuildEmoji;", "postGuildEmoji", "(JLcom/discord/restapi/RestAPIParams$PostGuildEmoji;)Lrx/Observable;", "emojiId", "Lcom/discord/restapi/RestAPIParams$PatchGuildEmoji;", "patchGuildEmoji", "(JJLcom/discord/restapi/RestAPIParams$PatchGuildEmoji;)Lrx/Observable;", "deleteGuildEmoji", "getEmojiGuild", "Lcom/discord/restapi/RestAPIParams$UpdateGuild;", "updateGuild", "(JLcom/discord/restapi/RestAPIParams$UpdateGuild;)Lrx/Observable;", "isLurker", "directoryChannelId", "Lcom/discord/restapi/RestAPIParams$InviteCode;", "joinGuild", "(JZLjava/lang/String;Ljava/lang/Long;Lcom/discord/restapi/RestAPIParams$InviteCode;Ljava/lang/String;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$Nick;", "changeGuildNickname", "(JLcom/discord/restapi/RestAPIParams$Nick;)Lrx/Observable;", "Lcom/discord/api/guildmember/PatchGuildMemberBody;", "Lcom/discord/api/guildmember/GuildMember;", "updateMeGuildMember", "(JLcom/discord/api/guildmember/PatchGuildMemberBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$BanGuildMember;", ModelAuditLogEntry.CHANGE_KEY_REASON, "banGuildMember", "(JJLcom/discord/restapi/RestAPIParams$BanGuildMember;Ljava/lang/String;)Lrx/Observable;", "kickGuildMember", "Lcom/discord/restapi/RestAPIParams$DisableGuildCommunication;", "disableGuildCommunication", "(JJLcom/discord/restapi/RestAPIParams$DisableGuildCommunication;Ljava/lang/String;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$GuildMember;", "changeGuildMember", "(JJLcom/discord/restapi/RestAPIParams$GuildMember;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$GuildMemberDisconnect;", "disconnectGuildMember", "(JJLcom/discord/restapi/RestAPIParams$GuildMemberDisconnect;)Lrx/Observable;", "Lcom/discord/api/role/GuildRole;", "createRole", "roleId", "Lcom/discord/restapi/RestAPIParams$Role;", "updateRole", "(JJLcom/discord/restapi/RestAPIParams$Role;)Lrx/Observable;", "batchUpdateRole", "(JLjava/util/List;)Lrx/Observable;", "deleteRole", "Lcom/discord/primitives/RoleId;", "getGuildRoleMemberIds", "getGuildRoleMemberCounts", "Lcom/discord/restapi/RestAPIParams$GuildMFA;", "setMfaLevel", "(JLcom/discord/restapi/RestAPIParams$GuildMFA;)Lrx/Observable;", "days", "Lcom/discord/api/guild/PruneCountResponse;", "getPruneCount", "(JI)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$PruneGuild;", "pruneMembers", "(JLcom/discord/restapi/RestAPIParams$PruneGuild;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$TransferGuildOwnership;", "transferGuildOwnership", "(JLcom/discord/restapi/RestAPIParams$TransferGuildOwnership;)Lrx/Observable;", "Lcom/discord/models/domain/ModelGuildIntegration;", "getGuildIntegrations", "syncIntegration", "Lcom/discord/restapi/RestAPIParams$GuildIntegration;", "updateGuildIntegration", "(JJLcom/discord/restapi/RestAPIParams$GuildIntegration;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$EnableIntegration;", "enableIntegration", "(JLcom/discord/restapi/RestAPIParams$EnableIntegration;)Lrx/Observable;", "deleteGuildIntegration", "getGuildInvites", "inviteCode", "revokeInvite", "Lcom/discord/api/guild/VanityUrlResponse;", "getVanityUrl", "Lcom/discord/restapi/RestAPIParams$VanityUrl;", "updateVanityUrl", "(JLcom/discord/restapi/RestAPIParams$VanityUrl;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$ChannelPosition;", "reorderChannels", "inChannelIds", "searchGuildMessages", "(JLjava/lang/Long;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/Integer;Ljava/lang/Boolean;)Lrx/Observable;", "Lcom/discord/models/domain/ModelAuditLog;", "getAuditLogs", "(JILjava/lang/Long;Ljava/lang/Long;Ljava/lang/Integer;)Lrx/Observable;", "Lcom/discord/api/guild/preview/GuildPreview;", "getGuildPreview", "Lcom/discord/api/guild/welcome/GuildWelcomeScreen;", "getGuildWelcomeScreen", "Lcom/discord/models/domain/ModelMemberVerificationForm;", "getGuildMemberVerificationForm", "Lcom/discord/restapi/RestAPIParams$MemberVerificationForm;", "Lcom/discord/models/domain/ModelMemberVerificationFormResponse;", "createGuildJoinRequest", "(JLcom/discord/restapi/RestAPIParams$MemberVerificationForm;)Lrx/Observable;", "resetGuildJoinRequest", "deleteGuildJoinRequest", "ackGuildJoinRequest", "getUserJoinRequestGuilds", "Lcom/discord/restapi/RestAPIParams$ChannelVoiceStateUpdate;", "updateUserVoiceStates", "(JJLcom/discord/restapi/RestAPIParams$ChannelVoiceStateUpdate;)Lrx/Observable;", "updateMyVoiceStates", "(JLcom/discord/restapi/RestAPIParams$ChannelVoiceStateUpdate;)Lrx/Observable;", "Lcom/discord/primitives/GuildScheduledEventId;", "eventId", "Lcom/discord/api/guildscheduledevent/GuildScheduledEvent;", "getGuildScheduledEvent", "Lcom/discord/restapi/RestAPIParams$UpdateGuildScheduledEventBody;", "", "updateGuildScheduledEvent", "(JJLcom/discord/restapi/RestAPIParams$UpdateGuildScheduledEventBody;)Lrx/Observable;", "withUserCount", "getGuildScheduledEvents", "(JZ)Lrx/Observable;", "guildIds", "Lcom/discord/api/guildscheduledevent/GuildScheduledEventMeUser;", "getMeGuildScheduledEvents", "createGuildScheduledEventRsvp", "deleteGuildScheduledEventRsvp", "Lcom/discord/restapi/RestAPIParams$CreateGuildScheduledEventBody;", "event", "createGuildScheduledEvent", "(JLcom/discord/restapi/RestAPIParams$CreateGuildScheduledEventBody;)Lrx/Observable;", "deleteGuildScheduledEvent", "withMember", "upgradeResponseType", "Lcom/discord/api/guildscheduledevent/ApiGuildScheduledEventUser;", "getGuildScheduledEventUsers", "(JJIZZ)Lrx/Observable;", ModelAuditLogEntry.CHANGE_KEY_CODE, "postInviteCode", "(Ljava/lang/String;Lcom/discord/restapi/RestAPIParams$InviteCode;Ljava/lang/String;)Lrx/Observable;", "withCounts", "guildScheduledEventId", "getInviteCode", "(Ljava/lang/String;ZLjava/lang/Long;)Lrx/Observable;", "guildTemplateCode", "Lcom/discord/models/domain/ModelGuildTemplate;", "getGuildTemplateCode", "Lcom/discord/restapi/RestAPIParams$CreateGuildFromTemplate;", "createGuildFromTemplate", "(Ljava/lang/String;Lcom/discord/restapi/RestAPIParams$CreateGuildFromTemplate;)Lrx/Observable;", "appIds", "Lcom/discord/api/application/Application;", "getApplications", "includeTeam", "getGuildApplications", "Lcom/discord/api/guildrolesubscription/PayoutGroup;", "getPaymentPayoutGroups", "Lcom/discord/api/science/Science;", "science", "(Lcom/discord/api/science/Science;)Lrx/Observable;", "Lcom/discord/models/domain/ModelLibraryApplication;", "getLibrary", "withApplication", "withSubscription", "Lcom/discord/models/domain/ModelGift;", "resolveGiftCode", "(Ljava/lang/String;ZZ)Lrx/Observable;", "filename", "uploadLog", "uploadLogs", "([Lokhttp3/MultipartBody$Part;)Lrx/Observable;", "Lcom/discord/primitives/SkuId;", "skuId", "Lcom/discord/primitives/PlanId;", "subscriptionPlanId", "resolveSkuIdGift", "revokeGiftCode", "Lcom/discord/restapi/RestAPIParams$GenerateGiftCode;", "generateGiftCode", "(Lcom/discord/restapi/RestAPIParams$GenerateGiftCode;)Lrx/Observable;", "acceptGift", "Lcom/discord/models/domain/ModelEntitlement;", "getGifts", "excludeConsumed", "getMyEntitlements", "Lcom/discord/api/premium/OutboundPromotion;", "getAllActiveOutboundPromotions", "getAllPreviewPromotions", "Lcom/discord/api/premium/ClaimedOutboundPromotion;", "getClaimedOutboundPromotions", "promotionId", "claimOutboundPromotion", ModelAuditLogEntry.CHANGE_KEY_ID, "Lcom/discord/models/domain/spotify/ModelSpotifyTrack;", "getSpotifyTrack", "Lcom/discord/models/domain/PaymentSourceRaw;", "getPaymentSources", "paymentSourceId", "Lcom/discord/models/domain/PatchPaymentSourceRaw;", "PatchPaymentSourceRaw", "updatePaymentSource", "(Ljava/lang/String;Lcom/discord/models/domain/PatchPaymentSourceRaw;)Lrx/Observable;", "deletePaymentSource", "Lcom/discord/models/domain/ModelSubscription;", "getSubscriptions", "subscriptionId", "Lcom/discord/restapi/RestAPIParams$UpdateSubscription;", "updateSubscription", "(Ljava/lang/String;Lcom/discord/restapi/RestAPIParams$UpdateSubscription;)Lrx/Observable;", "deleteSubscription", "Lcom/discord/restapi/RestAPIParams$InvoicePreviewBody;", "invoicePreviewBody", "Lcom/discord/models/domain/billing/ModelInvoicePreview;", "getInvoicePreview", "(Lcom/discord/restapi/RestAPIParams$InvoicePreviewBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$VerifyPurchaseTokenBody;", "verifyPurchaseBody", "Lcom/discord/restapi/RestAPIParams$VerifyPurchaseResponse;", "verifyPurchaseToken", "(Lcom/discord/restapi/RestAPIParams$VerifyPurchaseTokenBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$DowngradeSubscriptionBody;", "downgradeSubscriptionBody", "downgradeSubscription", "(Lcom/discord/restapi/RestAPIParams$DowngradeSubscriptionBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$PurchaseMetadataBody;", "purchaseMetadataBody", "createPurchaseMetadata", "(Lcom/discord/restapi/RestAPIParams$PurchaseMetadataBody;)Lrx/Observable;", "Lcom/discord/primitives/StreamKey;", "streamKey", "version", "Lcom/discord/models/domain/ModelApplicationStreamPreview;", "getStreamPreview", "(Ljava/lang/String;J)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$Thumbnail;", "thumbnail", "postStreamPreview", "(Ljava/lang/String;Lcom/discord/restapi/RestAPIParams$Thumbnail;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$GuildBoosting;", "guildBoosting", "Lcom/discord/models/domain/ModelAppliedGuildBoost;", "subscribeToGuild", "(JLcom/discord/restapi/RestAPIParams$GuildBoosting;)Lrx/Observable;", "unsubscribeToGuild", "Lcom/discord/models/domain/ModelGuildBoostSlot;", "getSubscriptionSlots", "Lcom/discord/primitives/GuildBoostSlotId;", "slotId", "cancelSubscriptionSlot", "uncancelSubscriptionSlot", "provider", "locale", "mediaFormat", "Lcom/discord/models/gifpicker/dto/TrendingGifCategoriesResponseDto;", "getTrendingGifCategories", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lrx/Observable;", "Lcom/discord/models/gifpicker/dto/GifDto;", "getTrendingGifCategory", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lrx/Observable;", "query", "getGifSearchResults", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lrx/Observable;", "getGifTrendingSearchTerms", "(Ljava/lang/String;Ljava/lang/String;I)Lrx/Observable;", "getGifSuggestedSearchTerms", "reportType", "Lcom/discord/api/report/MenuAPIResponse;", "getReportMenu", "Lcom/discord/api/report/ReportSubmissionBody;", "submitReport", "(Ljava/lang/String;Lcom/discord/api/report/ReportSubmissionBody;)Lrx/Observable;", "Lcom/discord/models/sticker/dto/ModelStickerStoreDirectory;", "getStickerPacks", "Lcom/discord/primitives/StickerPackId;", "packId", "Lcom/discord/models/sticker/dto/ModelStickerPack;", "getStickerPack", "stickerId", "Lcom/discord/api/sticker/Sticker;", "getSticker", "getStickerGuild", "emptyBody", "claimSku", "Lcom/discord/api/report/ReportReason;", "report", "(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$Report;", "(Lcom/discord/restapi/RestAPIParams$Report;)Lrx/Observable;", "", "channelIds", "Lcom/discord/api/stageinstance/RecommendedStageInstance;", "getStageInstancesForChannels", "(Ljava/util/Set;)Lrx/Observable;", "getRecommendedStageInstances", "Lcom/discord/restapi/RestAPIParams$StartStageInstanceBody;", "Lcom/discord/api/stageinstance/StageInstance;", "startStageInstance", "(Lcom/discord/restapi/RestAPIParams$StartStageInstanceBody;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$UpdateStageInstanceBody;", "updateStageInstance", "(JLcom/discord/restapi/RestAPIParams$UpdateStageInstanceBody;)Lrx/Observable;", "endStageInstance", "Lcom/discord/restapi/RestAPIParams$VerifyEmail;", "Lcom/discord/api/hubs/EmailVerification;", "verifyEmail", "(Lcom/discord/restapi/RestAPIParams$VerifyEmail;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$VerifyEmailCode;", "Lcom/discord/api/hubs/EmailVerificationCode;", "verifyEmailCode", "(Lcom/discord/restapi/RestAPIParams$VerifyEmailCode;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$HubWaitlist;", "Lcom/discord/api/hubs/WaitlistSignup;", "joinHubWaitlist", "(Lcom/discord/restapi/RestAPIParams$HubWaitlist;)Lrx/Observable;", ModelAuditLogEntry.CHANGE_KEY_DESCRIPTION, "priority", "asanaInboxId", "screenshot", "sendBugReport", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/Long;Lokhttp3/MultipartBody$Part;)Lrx/Observable;", "Lcom/discord/api/bugreport/BugReportConfig;", "getBugReportConfig", "Lcom/discord/api/directory/DirectoryEntryGuild;", "getDirectoryEntries", "Lcom/discord/api/directory/DirectoryEntryEvent;", "getDirectoryGuildScheduledEvents", "entityId", "Lcom/discord/api/guildscheduledevent/GuildScheduledEventBroadcast;", "getDirectoryEntryBroadcastInfo", "(JLjava/lang/Long;I)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$AddServerBody;", "addServerToHub", "(JJLcom/discord/restapi/RestAPIParams$AddServerBody;)Lrx/Observable;", "modifyServerInHub", "removeServerFromHub", "searchServers", "getEntryCounts", "Lcom/discord/api/creatormonetization/CreatorMonetizationEligibilityRequirements;", "getCreatorMonetizationEligibilityRequirements", "Lcom/discord/api/creatormonetization/CreatorMonetizationEnableRequest;", "createCreatorMonetizationEnableRequest", "requestId", "acceptCreatorMonetizationTerms", "Lcom/discord/restapi/RestAPIParams$CreateGuildRoleSubscriptionGroupListing;", "Lcom/discord/api/guildrolesubscription/GuildRoleSubscriptionGroupListing;", "createGuildRoleSubscriptionGroupListing", "(JLcom/discord/restapi/RestAPIParams$CreateGuildRoleSubscriptionGroupListing;)Lrx/Observable;", "getGuildRoleSubscriptionGroupListings", "groupListingId", "getGuildRoleSubscriptionGroupListing", "Lcom/discord/restapi/RestAPIParams$UpdateGuildRoleSubscriptionGroupListing;", "updateGuildRoleSubscriptionGroupListing", "(JJLcom/discord/restapi/RestAPIParams$UpdateGuildRoleSubscriptionGroupListing;)Lrx/Observable;", "Lcom/discord/restapi/RestAPIParams$CreateGuildRoleSubscriptionTierListing;", "Lcom/discord/api/guildrolesubscription/GuildRoleSubscriptionTierListing;", "createGuildRoleSubscriptionTier", "(JJLcom/discord/restapi/RestAPIParams$CreateGuildRoleSubscriptionTierListing;)Lrx/Observable;", "tierListingId", "Lcom/discord/restapi/RestAPIParams$UpdateGuildRoleSubscriptionTierListing;", "updateGuildRoleSubscriptionTierListing", "(JJJLcom/discord/restapi/RestAPIParams$UpdateGuildRoleSubscriptionTierListing;)Lrx/Observable;", "deleteGuildRoleSubscriptionTierListing", "(JJJ)Lrx/Observable;", "priceTierType", "getPriceTiers", "(I)Lrx/Observable;", "Lcom/discord/api/guildrolesubscription/GuildRoleSubscriptionTierFreeTrial;", "getGuildRoleSubscriptionFreeTrials", "listingId", "Lcom/discord/restapi/RestAPIParams$UpdateGuildRoleSubscriptionTierFreeTrial;", "updateGuildRoleSubscriptionTierFreeTrial", "(JJLcom/discord/restapi/RestAPIParams$UpdateGuildRoleSubscriptionTierFreeTrial;)Lrx/Observable;", "Lcom/discord/api/handoff/CreateHandoffTokenRequest;", "Lcom/discord/api/handoff/HandoffToken;", "createHandoffToken", "(Lcom/discord/api/handoff/CreateHandoffTokenRequest;)Lrx/Observable;", "Lcom/discord/models/experiments/dto/UnauthenticatedUserExperimentsDto;", "getExperiments", "experiments", "Companion", "Dynamic", "Files", "RtcLatency", "restapi_release"}, k = 1, mv = {1, 4, 2})
/* loaded from: classes.dex */
public interface RestAPIInterface {

    /* renamed from: Companion, reason: from kotlin metadata */
    public static final Companion INSTANCE = Companion.$$INSTANCE;

    /* compiled from: RestAPIInterface.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0010\u000e\n\u0002\b\u0005\b\u0086\u0003\u0018\u00002\u00020\u0001B\t\b\u0002¢\u0006\u0004\b\u0005\u0010\u0006R\u0016\u0010\u0003\u001a\u00020\u00028\u0002@\u0002X\u0082T¢\u0006\u0006\n\u0004\b\u0003\u0010\u0004¨\u0006\u0007"}, d2 = {"Lcom/discord/restapi/RestAPIInterface$Companion;", "", "", "X_CONTEXT_PROPERTIES", "Ljava/lang/String;", "<init>", "()V", "restapi_release"}, k = 1, mv = {1, 4, 2})
    public static final class Companion {
        public static final /* synthetic */ Companion $$INSTANCE = new Companion();
        private static final String X_CONTEXT_PROPERTIES = "X-Context-Properties";

        private Companion() {
        }
    }

    /* compiled from: RestAPIInterface.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {}, d2 = {}, k = 3, mv = {1, 4, 2})
    public static final class DefaultImpls {
        public static /* synthetic */ Observable getInviteCode$default(RestAPIInterface restAPIInterface, String str, boolean z2, Long l, int i, Object obj) {
            if (obj != null) {
                throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: getInviteCode");
            }
            if ((i & 4) != 0) {
                l = null;
            }
            return restAPIInterface.getInviteCode(str, z2, l);
        }

        public static /* synthetic */ Observable getMyEntitlements$default(RestAPIInterface restAPIInterface, long j, boolean z2, int i, Object obj) {
            if (obj != null) {
                throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: getMyEntitlements");
            }
            if ((i & 2) != 0) {
                z2 = true;
            }
            return restAPIInterface.getMyEntitlements(j, z2);
        }

        public static /* synthetic */ Observable getOauth2Authorize$default(RestAPIInterface restAPIInterface, String str, String str2, String str3, String str4, String str5, String str6, String str7, int i, Object obj) {
            if (obj == null) {
                return restAPIInterface.getOauth2Authorize(str, str2, (i & 4) != 0 ? null : str3, str4, (i & 16) != 0 ? "consent" : str5, str6, (i & 64) != 0 ? null : str7);
            }
            throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: getOauth2Authorize");
        }

        public static /* synthetic */ Observable getOauth2SamsungAuthorize$default(RestAPIInterface restAPIInterface, String str, String str2, String str3, String str4, String str5, String str6, int i, Object obj) {
            if (obj != null) {
                throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: getOauth2SamsungAuthorize");
            }
            if ((i & 4) != 0) {
                str3 = null;
            }
            String str7 = str3;
            if ((i & 16) != 0) {
                str5 = "consent";
            }
            return restAPIInterface.getOauth2SamsungAuthorize(str, str2, str7, str4, str5, str6);
        }

        public static /* synthetic */ Observable joinGuild$default(RestAPIInterface restAPIInterface, long j, boolean z2, String str, Long l, RestAPIParams.InviteCode inviteCode, String str2, int i, Object obj) {
            if (obj == null) {
                return restAPIInterface.joinGuild(j, z2, str, (i & 8) != 0 ? null : l, (i & 16) != 0 ? null : inviteCode, (i & 32) != 0 ? null : str2);
            }
            throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: joinGuild");
        }

        public static /* synthetic */ Observable postOauth2Authorize$default(RestAPIInterface restAPIInterface, String str, String str2, String str3, String str4, String str5, String str6, String str7, String str8, String str9, Map map, int i, Object obj) {
            if (obj == null) {
                return restAPIInterface.postOauth2Authorize(str, str2, (i & 4) != 0 ? null : str3, str4, (i & 16) != 0 ? "consent" : str5, str6, (i & 64) != 0 ? null : str7, (i & 128) != 0 ? null : str8, (i & 256) != 0 ? null : str9, (i & 512) != 0 ? MapsJVM.mapOf(Tuples.to("authorize", "true")) : map);
            }
            throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: postOauth2Authorize");
        }

        public static /* synthetic */ Observable report$default(RestAPIInterface restAPIInterface, Long l, Long l2, Long l3, Long l4, int i, Object obj) {
            if (obj != null) {
                throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: report");
            }
            if ((i & 1) != 0) {
                l = null;
            }
            if ((i & 2) != 0) {
                l2 = null;
            }
            if ((i & 4) != 0) {
                l3 = null;
            }
            if ((i & 8) != 0) {
                l4 = null;
            }
            return restAPIInterface.report(l, l2, l3, l4);
        }

        public static /* synthetic */ Observable userProfileGet$default(RestAPIInterface restAPIInterface, long j, boolean z2, Long l, int i, Object obj) {
            if (obj != null) {
                throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: userProfileGet");
            }
            if ((i & 2) != 0) {
                z2 = false;
            }
            if ((i & 4) != 0) {
                l = null;
            }
            return restAPIInterface.userProfileGet(j, z2, l);
        }
    }

    /* compiled from: RestAPIInterface.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u001a\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\bf\u0018\u00002\u00020\u0001J\u001f\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0002H'¢\u0006\u0004\b\u0006\u0010\u0007¨\u0006\b"}, d2 = {"Lcom/discord/restapi/RestAPIInterface$Dynamic;", "", "", "url", "Lrx/Observable;", "Lcom/google/gson/JsonObject;", "get", "(Ljava/lang/String;)Lrx/Observable;", "restapi_release"}, k = 1, mv = {1, 4, 2})
    public interface Dynamic {
        @GET
        Observable<JsonObject> get(@Url String url);
    }

    /* compiled from: RestAPIInterface.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u001a\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\bf\u0018\u00002\u00020\u0001J\u001f\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0002H'¢\u0006\u0004\b\u0006\u0010\u0007¨\u0006\b"}, d2 = {"Lcom/discord/restapi/RestAPIInterface$Files;", "", "", "url", "Lrx/Observable;", "Lokhttp3/ResponseBody;", "getFile", "(Ljava/lang/String;)Lrx/Observable;", "restapi_release"}, k = 1, mv = {1, 4, 2})
    public interface Files {
        @GET
        Observable<ResponseBody> getFile(@Url String url);
    }

    /* compiled from: RestAPIInterface.kt */
    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u001e\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0003\bf\u0018\u00002\u00020\u0001J%\u0010\u0007\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00060\u00050\u00042\b\b\u0001\u0010\u0003\u001a\u00020\u0002H'¢\u0006\u0004\b\u0007\u0010\b¨\u0006\t"}, d2 = {"Lcom/discord/restapi/RestAPIInterface$RtcLatency;", "", "", "url", "Lrx/Observable;", "", "Lcom/discord/models/domain/ModelRtcLatencyRegion;", "get", "(Ljava/lang/String;)Lrx/Observable;", "restapi_release"}, k = 1, mv = {1, 4, 2})
    public interface RtcLatency {
        @GET
        Observable<List<ModelRtcLatencyRegion>> get(@Url String url);
    }

    @POST("guilds/{guildId}/creator-monetization/{requestId}/accept-terms")
    Observable<CreatorMonetizationEnableRequest> acceptCreatorMonetizationTerms(@Path2("guildId") long guildId, @Path2("requestId") long requestId);

    @POST("entitlements/gift-codes/{code}/redeem")
    Observable<Void> acceptGift(@Path2(ModelAuditLogEntry.CHANGE_KEY_CODE) String code);

    @POST("guilds/{guildId}/ack")
    Observable<Void> ackGuild(@Path2("guildId") long guildId);

    @PATCH("guilds/{guildId}/requests/@me/ack")
    Observable<Void> ackGuildJoinRequest(@Path2("guildId") long guildId);

    @PUT("channels/{channelId}/pins/{messageId}")
    Observable<Void> addChannelPin(@Path2("channelId") long channelId, @Path2("messageId") long messageId);

    @PUT("channels/{channelId}/recipients/{recipientId}")
    Observable<Void> addChannelRecipient(@Path2("channelId") long channelId, @Path2("recipientId") long recipientId);

    @PUT("channels/{channelId}/messages/{messageId}/reactions/{reaction}/@me")
    Observable<Void> addReaction(@Path2("channelId") long channelId, @Path2("messageId") long messageId, @Path2(encoded = GoogleSmartLockManager.SET_DISCORD_ACCOUNT_DETAILS, value = "reaction") String reaction);

    @PUT("users/@me/relationships/{userId}")
    Observable<Void> addRelationship(@Path2("userId") long userId, @Body RestAPIParams.UserRelationship relationship, @Header3("X-Context-Properties") String context);

    @POST("channels/{channelId}/directory-entry/{guildId}")
    Observable<Response<DirectoryEntryGuild>> addServerToHub(@Path2("channelId") long channelId, @Path2("guildId") long guildId, @Body RestAPIParams.AddServerBody body);

    @GET("connections/{connection}/authorize")
    Observable<ModelUrl> authorizeConnection(@Path2("connection") String connection);

    @POST("auth/authorize-ip")
    Observable<Response<Void>> authorizeIP(@Body RestAPIParams.AuthorizeIP body);

    @PUT("guilds/{guildId}/bans/{userId}")
    Observable<Void> banGuildMember(@Path2("guildId") long guildId, @Path2("userId") long userId, @Body RestAPIParams.BanGuildMember body, @Header3("X-Audit-Log-Reason") String reason);

    @PATCH("guilds/{guildId}/roles")
    Observable<Void> batchUpdateRole(@Path2("guildId") long guildId, @Body List<RestAPIParams.Role> body);

    @POST("users/@me/relationships/bulk")
    Observable<Response<BulkAddFriendsResponse>> bulkAddRelationships(@Body RestAPIParams.UserBulkRelationship body);

    @GET("channels/{channelId}/call")
    Observable<ModelCall.Ringable> call(@Path2("channelId") long channelId);

    @POST("users/@me/guilds/premium/subscription-slots/{subscriptionSlotId}/cancel")
    Observable<ModelGuildBoostSlot> cancelSubscriptionSlot(@Path2("subscriptionSlotId") long slotId);

    @PATCH("guilds/{guildId}/members/{userId}")
    Observable<Void> changeGuildMember(@Path2("guildId") long guildId, @Path2("userId") long userId, @Body RestAPIParams.GuildMember body);

    @PATCH("guilds/{guildId}/members/@me/nick")
    Observable<Void> changeGuildNickname(@Path2("guildId") long guildId, @Body RestAPIParams.Nick body);

    @POST("outbound-promotions/{promotionId}/claim")
    Observable<ClaimedOutboundPromotion> claimOutboundPromotion(@Path2("promotionId") long promotionId);

    @POST("store/skus/{skuId}/purchase")
    Observable<Unit> claimSku(@Path2("skuId") long skuId, @Body RestAPIParams.EmptyBody emptyBody);

    @PUT("channels/{channelId}/recipients/{recipientId}")
    Observable<Channel> convertDMToGroup(@Path2("channelId") long channelId, @Path2("recipientId") long recipientId);

    @POST("channels/{channelId}/followers")
    Observable<Void> createChannelFollower(@Path2("channelId") long channelId, @Body RestAPIParams.ChannelFollowerPost body);

    @PUT("users/@me/connections/contacts/@me")
    Observable<ConnectedAccount> createConnectionContacts(@Body RestAPIParams.ConnectedAccountContacts connectedAccountContacts);

    @POST("guilds/{guildId}/creator-monetization/enable-requests")
    Observable<CreatorMonetizationEnableRequest> createCreatorMonetizationEnableRequest(@Path2("guildId") long guildId);

    @POST("guilds")
    Observable<Response<Guild>> createGuild(@Body RestAPIParams.CreateGuild body);

    @POST("guilds/{guildId}/channels")
    Observable<Response<Channel>> createGuildChannel(@Path2("guildId") long guildId, @Body RestAPIParams.CreateGuildChannel body);

    @POST("guilds/templates/{guildTemplateCode}")
    Observable<Guild> createGuildFromTemplate(@Path2("guildTemplateCode") String guildTemplateCode, @Body RestAPIParams.CreateGuildFromTemplate body);

    @PUT("guilds/{guildId}/requests/@me")
    Observable<ModelMemberVerificationFormResponse> createGuildJoinRequest(@Path2("guildId") long guildId, @Body RestAPIParams.MemberVerificationForm body);

    @POST("guilds/{guildId}/role-subscriptions/group-listings")
    Observable<GuildRoleSubscriptionGroupListing> createGuildRoleSubscriptionGroupListing(@Path2("guildId") long guildId, @Body RestAPIParams.CreateGuildRoleSubscriptionGroupListing body);

    @POST("guilds/{guildId}/role-subscriptions/group-listings/{groupListingId}/subscription-listings")
    Observable<GuildRoleSubscriptionTierListing> createGuildRoleSubscriptionTier(@Path2("guildId") long guildId, @Path2("groupListingId") long groupListingId, @Body RestAPIParams.CreateGuildRoleSubscriptionTierListing body);

    @POST("guilds/{guildId}/scheduled-events")
    Observable<GuildScheduledEvent> createGuildScheduledEvent(@Path2("guildId") long guildId, @Body RestAPIParams.CreateGuildScheduledEventBody event);

    @PUT("guilds/{guildId}/scheduled-events/{eventId}/users/@me")
    Observable<Unit> createGuildScheduledEventRsvp(@Path2("guildId") long guildId, @Path2("eventId") long eventId);

    @POST("auth/handoff")
    Observable<HandoffToken> createHandoffToken(@Body CreateHandoffTokenRequest body);

    @POST("google-play/purchase-metadata")
    Observable<Unit> createPurchaseMetadata(@Body RestAPIParams.PurchaseMetadataBody purchaseMetadataBody);

    @POST("guilds/{guildId}/roles")
    Observable<GuildRole> createRole(@Path2("guildId") long guildId);

    @POST("channels/{channelId}/threads")
    Observable<Channel> createThread(@Path2("channelId") long channelId, @Query2(ModelAuditLogEntry.CHANGE_KEY_LOCATION) String location, @Body RestAPIParams.ThreadCreationSettings body);

    @POST("channels/{channelId}/messages/{messageId}/threads")
    Observable<Channel> createThreadFromMessage(@Path2("channelId") long channelId, @Path2("messageId") long messageId, @Query2(ModelAuditLogEntry.CHANGE_KEY_LOCATION) String location, @Body RestAPIParams.ThreadCreationSettings body);

    @POST("channels/{channelId}/threads?has_message=true")
    @Multipart
    Observable<Channel> createThreadWithMessage(@Path2("channelId") long channelId, @Part2(ModelAuditLogEntry.CHANGE_KEY_NAME) String name, @Part2("content") String content, @Part2("applied_tags") List<Long> appliedTags, @Part2("sticker_ids") List<Long> stickerIds, @Part2("type") int type, @Part2(ModelAuditLogEntry.CHANGE_KEY_AUTO_ARCHIVE_DURATION) Integer autoArchiveDuration, @Part2 MultipartBody.Part[] files);

    @POST("channels/{channelId}/messages/{messageId}/crosspost")
    Observable<Void> crosspostMessage(@Path2("channelId") long channelId, @Path2("messageId") Long messageId);

    @POST("users/@me/delete")
    Observable<Void> deleteAccount(@Body RestAPIParams.DisableAccount body);

    @DELETE("channels/{channelId}")
    Observable<Channel> deleteChannel(@Path2("channelId") long channelId);

    @DELETE("channels/{channelId}/pins/{messageId}")
    Observable<Void> deleteChannelPin(@Path2("channelId") long channelId, @Path2("messageId") long messageId);

    @DELETE("users/@me/connections/{connection}/{connectionId}")
    Observable<Response<Void>> deleteConnection(@Path2("connection") String connection, @Path2("connectionId") String connectionId);

    @POST("guilds/{guildId}/delete")
    Observable<Void> deleteGuild(@Path2("guildId") long guildId, @Body RestAPIParams.DeleteGuild body);

    @DELETE("guilds/{guildId}/emojis/{emojiId}")
    Observable<Void> deleteGuildEmoji(@Path2("guildId") long guildId, @Path2("emojiId") long emojiId);

    @DELETE("guilds/{guildId}/integrations/{integrationId}")
    Observable<Void> deleteGuildIntegration(@Path2("guildId") long guildId, @Path2("integrationId") long integrationId);

    @DELETE("guilds/{guildId}/requests/@me")
    Observable<ModelMemberVerificationFormResponse> deleteGuildJoinRequest(@Path2("guildId") long guildId);

    @DELETE("guilds/{guildId}/role-subscriptions/group-listings/{groupListingId}/subscription-listings/{listingId}")
    Observable<Void> deleteGuildRoleSubscriptionTierListing(@Path2("guildId") long guildId, @Path2("groupListingId") long groupListingId, @Path2("listingId") long tierListingId);

    @DELETE("guilds/{guildId}/scheduled-events/{eventId}")
    Observable<Void> deleteGuildScheduledEvent(@Path2("guildId") long guildId, @Path2("eventId") long eventId);

    @DELETE("guilds/{guildId}/scheduled-events/{eventId}/users/@me")
    Observable<Void> deleteGuildScheduledEventRsvp(@Path2("guildId") long guildId, @Path2("eventId") long eventId);

    @DELETE("channels/{channel_id}/messages/{message_id}")
    Observable<Void> deleteMessage(@Path2(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID) long channelId, @Path2("message_id") long messageId);

    @DELETE("oauth2/tokens/{oauthId}")
    Observable<Void> deleteOAuthToken(@Path2("oauthId") long oauthId);

    @DELETE("users/@me/billing/payment-sources/{paymentSourceId}")
    Observable<Void> deletePaymentSource(@Path2("paymentSourceId") String paymentSourceId);

    @DELETE("channels/{channelId}/permissions/{targetId}")
    Observable<Void> deletePermissionOverwrites(@Path2("channelId") long channelId, @Path2("targetId") long targetId);

    @DELETE("guilds/{guildId}/roles/{roleId}")
    Observable<Void> deleteRole(@Path2("guildId") long guildId, @Path2("roleId") long roleId);

    @DELETE("users/@me/billing/subscriptions/{subscriptionId}")
    Observable<Void> deleteSubscription(@Path2("subscriptionId") String subscriptionId);

    @POST("users/@me/disable")
    Observable<Void> disableAccount(@Body RestAPIParams.DisableAccount body);

    @PATCH("guilds/{guildId}/members/{userId}")
    Observable<Response<Void>> disableGuildCommunication(@Path2("guildId") long guildId, @Path2("userId") long userId, @Body RestAPIParams.DisableGuildCommunication body, @Header3("X-Audit-Log-Reason") String reason);

    @POST("users/@me/mfa/totp/disable")
    Observable<DisableMfaResponse> disableMFA(@Body DisableMfaRequestBody body);

    @POST("users/@me/mfa/sms/disable")
    Observable<Void> disableMfaSMS(@Body RestAPIParams.ActivateMfaSMS body);

    @PATCH("guilds/{guildId}/members/{userId}")
    Observable<Void> disconnectGuildMember(@Path2("guildId") long guildId, @Path2("userId") long userId, @Body RestAPIParams.GuildMemberDisconnect body);

    @POST("google-play/downgrade-subscription")
    Observable<Object> downgradeSubscription(@Body RestAPIParams.DowngradeSubscriptionBody downgradeSubscriptionBody);

    @PATCH("channels/{channelId}")
    Observable<Channel> editGroupDM(@Path2("channelId") long channelId, @Body RestAPIParams.GroupDM body);

    @PATCH("channels/{channel_id}/messages/{message_id}")
    Observable<Message> editMessage(@Path2(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID) long channelId, @Path2("message_id") long messageId, @Body RestAPIParams.Message message);

    @PATCH("channels/{channelId}")
    Observable<Channel> editTextChannel(@Path2("channelId") long channelId, @Body RestAPIParams.TextChannel body);

    @PATCH("channels/{channelId}")
    Observable<Channel> editThread(@Path2("channelId") long channelId, @Body RestAPIParams.ThreadSettings body);

    @PATCH("channels/{channelId}")
    Observable<Channel> editTopicalChannel(@Path2("channelId") long channelId, @Body RestAPIParams.TopicalChannel body);

    @PATCH("channels/{channelId}")
    Observable<Channel> editVoiceChannel(@Path2("channelId") long channelId, @Body RestAPIParams.VoiceChannel body);

    @POST("guilds/{guildId}/integrations")
    Observable<Void> enableIntegration(@Path2("guildId") long guildId, @Body RestAPIParams.EnableIntegration body);

    @POST("users/@me/mfa/totp/enable")
    Observable<EnableMfaResponse> enableMFA(@Body RestAPIParams.EnableMFA body);

    @POST("users/@me/mfa/sms/enable")
    Observable<Void> enableMfaSMS(@Body RestAPIParams.ActivateMfaSMS body);

    @DELETE("stage-instances/{channelId}")
    Observable<Unit> endStageInstance(@Path2("channelId") long channelId);

    @POST("auth/forgot")
    Observable<Response<Void>> forgotPassword(@Body RestAPIParams.ForgotPassword body);

    @POST("users/@me/entitlements/gift-codes")
    Observable<ModelGift> generateGiftCode(@Body RestAPIParams.GenerateGiftCode body);

    @GET("users/{userId}/sessions/{sessionId}/activities/{applicationId}/metadata")
    Observable<ActivityMetadata> getActivityMetadata(@Path2("userId") long userId, @Path2("sessionId") String sessionId, @Path2("applicationId") long applicationId);

    @GET("outbound-promotions")
    Observable<List<OutboundPromotion>> getAllActiveOutboundPromotions();

    @GET("outbound-promotions/preview")
    Observable<List<OutboundPromotion>> getAllPreviewPromotions();

    @GET("channels/{channelId}/threads/archived/private")
    Observable<ThreadListing> getAllPrivateArchivedThreads(@Path2("channelId") long channelId, @Query2("before") String before);

    @GET("channels/{channelId}/threads/archived/public")
    Observable<ThreadListing> getAllPublicArchivedThreads(@Path2("channelId") long channelId, @Query2("before") String before);

    @GET("oauth2/applications/{applicationId}/assets")
    Observable<List<ApplicationAsset>> getApplicationAssets(@Path2("applicationId") long applicationId);

    @GET("applications/{botId}/commands")
    Observable<List<ApplicationCommand>> getApplicationCommands(@Path2("botId") long botId);

    @GET("applications/public")
    Observable<List<Application>> getApplications(@Query2("application_ids") long appIds);

    @GET("guilds/{guildId}/audit-logs")
    Observable<ModelAuditLog> getAuditLogs(@Path2("guildId") long guildId, @Query2("limit") int limit, @Query2("before") Long before, @Query2("user_id") Long userId, @Query2("action_type") Integer actionType);

    @POST("users/@me/mfa/codes")
    Observable<GetBackupCodesResponse> getBackupCodes(@Body GetBackupCodesRequestBody body);

    @POST("auth/verify/view-backup-codes-challenge")
    Observable<GetBackupCodesSendVerificationKeyResponse> getBackupCodesSendVerificationKey(@Body GetBackupCodesSendVerificationKeyRequestBody body);

    @POST("users/@me/mfa/codes-verification")
    Observable<GetBackupCodesResponse> getBackupCodesVerification(@Body GetBackupCodesVerificationRequestBody body);

    @GET("guilds/{guildId}/bans")
    Observable<List<ModelBan>> getBans(@Path2("guildId") long guildId);

    @GET("private/bug-reports")
    Observable<BugReportConfig> getBugReportConfig();

    @GET("channels/{channelId}")
    Observable<Channel> getChannel(@Path2("channelId") long channelId);

    @GET("channels/{channelId}/follower-stats")
    Observable<ModelChannelFollowerStatsDto> getChannelFollowerStats(@Path2("channelId") long channelId);

    @GET("channels/{channelId}/messages")
    Observable<List<Message>> getChannelMessages(@Path2("channelId") long channelId, @Query2("before") Long before, @Query2("after") Long after, @Query2("limit") Integer limit);

    @GET("channels/{channelId}/messages")
    Observable<List<Message>> getChannelMessagesAround(@Path2("channelId") long channelId, @Query2("limit") int limit, @Query2("around") long around);

    @GET("channels/{channelId}/pins")
    Observable<List<Message>> getChannelPins(@Path2("channelId") long channelId);

    @GET("users/@me/outbound-promotions/codes")
    Observable<List<ClaimedOutboundPromotion>> getClaimedOutboundPromotions();

    @GET("users/@me/connections/{platformType}/{accountId}/access-token")
    Observable<ModelConnectionAccessToken> getConnectionAccessToken(@Path2("platformType") String platformType, @Path2("accountId") String accountId);

    @GET("connections/{connection}/callback-continuation/{pinNumber}")
    Observable<ModelConnectionState> getConnectionState(@Path2("connection") String connection, @Path2("pinNumber") String pinNumber);

    @GET("users/@me/connections")
    Observable<List<ConnectedAccount>> getConnections();

    @GET("users/@me/consent")
    Observable<ModelUserConsents2> getConsents();

    @GET("guilds/{guildId}/creator-monetization/requirements")
    Observable<CreatorMonetizationEligibilityRequirements> getCreatorMonetizationEligibilityRequirements(@Path2("guildId") long guildId);

    @GET("channels/{channelId}/directory-entries")
    Observable<List<DirectoryEntryGuild>> getDirectoryEntries(@Path2("channelId") long channelId);

    @GET("guilds/{guildId}/directory-entries/broadcast")
    Observable<GuildScheduledEventBroadcast> getDirectoryEntryBroadcastInfo(@Path2("guildId") long guildId, @Query2("entity_id") Long entityId, @Query2("type") int type);

    @GET("channels/{channelId}/directory-entries")
    Observable<List<DirectoryEntryGuild2>> getDirectoryGuildScheduledEvents(@Path2("channelId") long channelId, @Query2("type") int type);

    @GET("emojis/{emojiId}/guild")
    Observable<Guild> getEmojiGuild(@Path2("emojiId") long emojiId);

    @GET("channels/{channelId}/directory-entries/counts")
    Observable<Map<Integer, Integer>> getEntryCounts(@Path2("channelId") long channelId);

    @GET("experiments")
    Observable<UnauthenticatedUserExperimentsDto> getExperiments();

    @POST("channels/{channelId}/post-data")
    Observable<ForumPostFirstMessages> getForumPostData(@Path2("channelId") long channelId, @Body RestAPIParams.GetForumPostData body);

    @GET("friend-suggestions")
    Observable<List<FriendSuggestion>> getFriendSuggestions();

    @GET("gifs/search")
    Observable<List<GifDto>> getGifSearchResults(@Query2("q") String query, @Query2("provider") String provider, @Query2("locale") String locale, @Query2("media_format") String mediaFormat, @Query2("limit") int limit);

    @GET("gifs/suggest")
    Observable<List<String>> getGifSuggestedSearchTerms(@Query2("provider") String provider, @Query2("q") String query, @Query2("locale") String locale, @Query2("limit") int limit);

    @GET("gifs/trending-search")
    Observable<List<String>> getGifTrendingSearchTerms(@Query2("provider") String provider, @Query2("locale") String locale, @Query2("limit") int limit);

    @GET("users/@me/entitlements/gifts")
    Observable<List<ModelEntitlement>> getGifts();

    @GET("guilds/{guildId}/applications")
    Observable<List<Application>> getGuildApplications(@Path2("guildId") long guildId, @Query2("include_team") boolean includeTeam);

    @GET("guilds/{guildId}/emojis")
    Observable<List<ModelEmojiGuild>> getGuildEmojis(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/integrations")
    Observable<List<ModelGuildIntegration>> getGuildIntegrations(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/invites")
    Observable<List<ModelInvite>> getGuildInvites(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/member-verification")
    Observable<ModelMemberVerificationForm> getGuildMemberVerificationForm(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/preview")
    Observable<GuildPreview> getGuildPreview(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/roles/member-counts")
    Observable<Map<Long, Integer>> getGuildRoleMemberCounts(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/roles/{roleId}/member-ids")
    Observable<List<Long>> getGuildRoleMemberIds(@Path2("guildId") long guildId, @Path2("roleId") long roleId);

    @GET("guilds/{guildId}/role-subscriptions/trials")
    Observable<List<GuildRoleSubscriptionTierFreeTrial>> getGuildRoleSubscriptionFreeTrials(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/role-subscriptions/group-listings/{groupListingId}")
    Observable<GuildRoleSubscriptionGroupListing> getGuildRoleSubscriptionGroupListing(@Path2("guildId") long guildId, @Path2("groupListingId") long groupListingId);

    @GET("guilds/{guildId}/role-subscriptions/group-listings")
    Observable<List<GuildRoleSubscriptionGroupListing>> getGuildRoleSubscriptionGroupListings(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/scheduled-events/{eventId}")
    Observable<GuildScheduledEvent> getGuildScheduledEvent(@Path2("guildId") long guildId, @Path2("eventId") long eventId);

    @GET("guilds/{guildId}/scheduled-events/{eventId}/users")
    Observable<List<ApiGuildScheduledEventUser>> getGuildScheduledEventUsers(@Path2("guildId") long guildId, @Path2("eventId") long eventId, @Query2("limit") int limit, @Query2("with_member") boolean withMember, @Query2("upgrade_response_type") boolean upgradeResponseType);

    @GET("guilds/{guildId}/scheduled-events")
    Observable<List<GuildScheduledEvent>> getGuildScheduledEvents(@Path2("guildId") long guildId, @Query2("with_user_count") boolean withUserCount);

    @GET("guilds/templates/{guildTemplateCode}")
    Observable<ModelGuildTemplate> getGuildTemplateCode(@Path2("guildTemplateCode") String guildTemplateCode);

    @GET("guilds/{guildId}/regions")
    Observable<List<ModelVoiceRegion>> getGuildVoiceRegions(@Path2("guildId") long guildId);

    @GET("guilds/{guildId}/welcome-screen")
    Observable<GuildWelcomeScreen> getGuildWelcomeScreen(@Path2("guildId") long guildId);

    @GET("users/@me/harvest")
    Observable<ModelUserConsents3> getHarvestStatus();

    @GET("channels/{channelId}/messages/{messageId}/interaction-data")
    Observable<ApplicationCommandData> getInteractionData(@Path2("channelId") long channelId, @Path2("messageId") long messageId);

    @GET("invites/{code}")
    Observable<Response<ModelInvite>> getInviteCode(@Path2(ModelAuditLogEntry.CHANGE_KEY_CODE) String code, @Query2("with_counts") boolean withCounts, @Query2("guild_scheduled_event_id") Long guildScheduledEventId);

    @POST("users/@me/billing/invoices/preview")
    Observable<ModelInvoicePreview> getInvoicePreview(@Body RestAPIParams.InvoicePreviewBody invoicePreviewBody);

    @GET("users/@me/library")
    Observable<List<ModelLibraryApplication>> getLibrary();

    @GET("auth/location-metadata")
    Observable<ModelLocationMetadata> getLocationMetadata();

    @GET("users/@me/scheduled-events")
    Observable<List<GuildScheduledEventMeUser>> getMeGuildScheduledEvents(@Query2("guild_ids") long guildIds);

    @GET("users/@me/mentions")
    Observable<List<Message>> getMentions(@Query2("limit") int limit, @Query2("roles") boolean roles, @Query2(ModelGuildMemberListUpdate.EVERYONE_ID) boolean everyone, @Query2(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID) Long guildId, @Query2("before") Long before);

    @GET("users/@me/applications/{applicationId}/entitlements")
    Observable<List<ModelEntitlement>> getMyEntitlements(@Path2("applicationId") long applicationId, @Query2("exclude_consumed") boolean excludeConsumed);

    @GET("channels/{channelId}/users/@me/threads/archived/private")
    Observable<ThreadListing> getMyPrivateArchivedThreads(@Path2("channelId") long channelId, @Query2("before") Long before);

    @GET("oauth2/tokens")
    Observable<List<ModelOAuth2Token>> getOAuthTokens();

    @GET("oauth2/authorize")
    Observable<RestAPIParams.OAuth2Authorize.ResponseGet> getOauth2Authorize(@Query2("client_id") String clientId, @Query2("state") String state, @Query2("response_type") String responseType, @Query2("redirect_uri") String redirectUrl, @Query2("prompt") String prompt, @Query2("scope") String scope, @Query2(ModelAuditLogEntry.CHANGE_KEY_PERMISSIONS) String permissions);

    @GET("oauth2/samsung/authorize")
    Observable<Void> getOauth2SamsungAuthorize(@Query2("client_id") String clientId, @Query2("state") String state, @Query2("response_type") String responseType, @Query2("redirect_uri") String redirectUrl, @Query2("prompt") String prompt, @Query2("scope") String scope);

    @GET("applications/{applicationId}/payment-payout-groups")
    Observable<List<PayoutGroup>> getPaymentPayoutGroups(@Path2("applicationId") long applicationId);

    @GET("users/@me/billing/payment-sources")
    Observable<List<ModelPaymentSource3>> getPaymentSources();

    @GET("store/price-tiers")
    Observable<List<Integer>> getPriceTiers(@Query2("price_tier_type") int priceTierType);

    @GET("guilds/{guildId}/prune")
    Observable<PruneCountResponse> getPruneCount(@Path2("guildId") long guildId, @Query2("days") int days);

    @GET("channels/{channelId}/messages/{messageId}/reactions/{emoji}")
    Observable<List<User>> getReactionUsers(@Path2("channelId") long channelId, @Path2("messageId") long messageId, @Path2(encoded = GoogleSmartLockManager.SET_DISCORD_ACCOUNT_DETAILS, value = "emoji") String emoji, @Query2("limit") Integer limit);

    @GET("stage-instances")
    Observable<Response<List<RecommendedStageInstance>>> getRecommendedStageInstances();

    @GET("users/{userId}/relationships")
    Observable<List<ModelUserRelationship>> getRelationships(@Path2("userId") long userId);

    @GET("reporting/menu/{reportType}")
    Observable<MenuAPIResponse> getReportMenu(@Path2("reportType") String reportType);

    @GET("tracks/{id}")
    Observable<ModelSpotifyTrack> getSpotifyTrack(@Path2(ModelAuditLogEntry.CHANGE_KEY_ID) String id2);

    @GET("stage-instances/extra")
    Observable<List<RecommendedStageInstance>> getStageInstancesForChannels(@Query2("channel_ids") Set<Long> channelIds);

    @GET("stickers/{stickerId}")
    Observable<Sticker> getSticker(@Path2("stickerId") long stickerId);

    @GET("stickers/{stickerId}/guild")
    Observable<Guild> getStickerGuild(@Path2("stickerId") long stickerId);

    @GET("sticker-packs/{packId}")
    Observable<ModelStickerPack> getStickerPack(@Path2("packId") long packId);

    @GET("sticker-packs")
    Observable<ModelStickerStoreDirectory> getStickerPacks();

    @GET("streams/{streamKey}/preview")
    Observable<ModelApplicationStreamPreview> getStreamPreview(@Path2("streamKey") String streamKey, @Query2("version") long version);

    @GET("users/@me/guilds/premium/subscription-slots")
    Observable<List<ModelGuildBoostSlot>> getSubscriptionSlots();

    @GET("users/@me/billing/subscriptions")
    Observable<List<ModelSubscription>> getSubscriptions();

    @GET("gifs/trending")
    Observable<TrendingGifCategoriesResponseDto> getTrendingGifCategories(@Query2("provider") String provider, @Query2("locale") String locale, @Query2("media_format") String mediaFormat);

    @GET("gifs/trending-gifs")
    Observable<List<GifDto>> getTrendingGifCategory(@Query2("provider") String provider, @Query2("locale") String locale, @Query2("media_format") String mediaFormat, @Query2("limit") int limit);

    @GET("users/@me/affinities/users")
    Observable<ModelUserAffinities> getUserAffinities();

    @GET("users/@me/join-request-guilds")
    Observable<List<Guild>> getUserJoinRequestGuilds();

    @GET("users/@me/notes/{userId}")
    Observable<ModelUserNote> getUserNote(@Path2("userId") long userId);

    @GET("users/@me/survey")
    Observable<Response<UserSurvey3>> getUserSurvey();

    @GET("guilds/{guildId}/vanity-url")
    Observable<VanityUrlResponse> getVanityUrl(@Path2("guildId") long guildId);

    @DELETE("friend-suggestions/{userId}")
    Observable<Void> ignoreFriendSuggestion(@Path2("userId") long userId);

    @PUT("guilds/{guildId}/members/@me")
    Observable<Guild> joinGuild(@Path2("guildId") long guildId, @Query2("lurker") boolean isLurker, @Query2("session_id") String sessionId, @Query2("directory_channel_id") Long directoryChannelId, @Body RestAPIParams.InviteCode body, @Header3("X-Context-Properties") String context);

    @POST("integrations/{integrationId}/join")
    Observable<Void> joinGuildFromIntegration(@Path2("integrationId") String integrationId);

    @POST("hub-waitlist/signup")
    Observable<WaitlistSignup> joinHubWaitlist(@Body RestAPIParams.HubWaitlist body);

    @POST("channels/{channelId}/thread-members/@me")
    Observable<Void> joinThread(@Path2("channelId") long channelId, @Query2(ModelAuditLogEntry.CHANGE_KEY_LOCATION) String location, @Body RestAPIParams.EmptyBody body);

    @DELETE("guilds/{guildId}/members/{userId}")
    Observable<Void> kickGuildMember(@Path2("guildId") long guildId, @Path2("userId") long userId, @Header3("X-Audit-Log-Reason") String reason);

    @DELETE("users/@me/guilds/{guildId}")
    Observable<Void> leaveGuild(@Path2("guildId") long guildId);

    @HTTP(hasBody = GoogleSmartLockManager.SET_DISCORD_ACCOUNT_DETAILS, method = "DELETE", path = "users/@me/guilds/{guildId}")
    Observable<Void> leaveGuild(@Path2("guildId") long guildId, @Body RestAPIParams.LeaveGuildBody leaveGuildBody);

    @DELETE("channels/{channelId}/thread-members/@me")
    Observable<Void> leaveThread(@Path2("channelId") long channelId, @Query2(ModelAuditLogEntry.CHANGE_KEY_LOCATION) String location);

    @POST("auth/logout")
    Observable<Response<Void>> logout(@Body RestAPIParams.UserDevices body);

    @PATCH("channels/{channelId}/directory-entry/{guildId}")
    Observable<DirectoryEntryGuild> modifyServerInHub(@Path2("channelId") long channelId, @Path2("guildId") long guildId, @Body RestAPIParams.AddServerBody body);

    @PATCH("guilds/{guildId}/emojis/{emojiId}")
    Observable<ModelEmojiGuild> patchGuildEmoji(@Path2("guildId") long guildId, @Path2("emojiId") long emojiId, @Body RestAPIParams.PatchGuildEmoji body);

    @PATCH("users/@me")
    Observable<User> patchUser(@Body PatchUserBody patchUserBody);

    @PATCH("users/@me")
    Observable<User> patchUser(@Body RestAPIParams.UserInfo userInfo);

    @POST("phone-verifications/resend")
    Observable<Void> phoneVerificationsResend(@Body RestAPIParams.VerificationCodeResend body);

    @POST("phone-verifications/verify")
    Observable<Response<ModelPhoneVerificationToken>> phoneVerificationsVerify(@Body RestAPIParams.VerificationCode body);

    @POST("auth/fingerprint")
    Observable<FingerprintResponse> postAuthFingerprint(@Body RestAPIParams.EmptyBody body);

    @POST("auth/login")
    Observable<Response<ModelLoginResult>> postAuthLogin(@Body RestAPIParams.AuthLogin body);

    @POST("auth/register")
    Observable<Response<RegisterResponse>> postAuthRegister(@Body RestAPIParams.AuthRegister body);

    @POST("auth/register/phone")
    Observable<Response<Void>> postAuthRegisterPhone(@Body RestAPIParams.AuthRegisterPhone body);

    @POST("auth/verify/resend")
    Observable<Response<Void>> postAuthVerifyResend(@Body RestAPIParams.EmptyBody body);

    @POST("channels/{channelId}/invites")
    Observable<ModelInvite> postChannelInvite(@Path2("channelId") long channelId, @Body RestAPIParams.Invite body);

    @POST("channels/{channelId}/messages/{messageId}/ack")
    Observable<Void> postChannelMessagesAck(@Path2("channelId") long channelId, @Path2("messageId") Long messageId, @Body RestAPIParams.ChannelMessagesAck body);

    @POST("guilds/{guildId}/emojis")
    Observable<ModelEmojiGuild> postGuildEmoji(@Path2("guildId") long guildId, @Body RestAPIParams.PostGuildEmoji body);

    @POST("guilds/{guildId}/ack/{ackType}/{ackedId}")
    Observable<Void> postGuildFeatureAck(@Path2("guildId") long channelId, @Path2("ackType") int ackType, @Path2("ackedId") long ackedId, @Body RestAPIParams.GuildFeatureAck body);

    @POST("invites/{code}")
    Observable<ModelInvite> postInviteCode(@Path2(ModelAuditLogEntry.CHANGE_KEY_CODE) String code, @Body RestAPIParams.InviteCode body, @Header3("X-Context-Properties") String context);

    @POST("auth/mfa/totp")
    Observable<Response<ModelLoginResult>> postMFACode(@Body RestAPIParams.MFALogin body);

    @POST("oauth2/authorize")
    Observable<RestAPIParams.OAuth2Authorize.ResponsePost> postOauth2Authorize(@Query2("client_id") String clientId, @Query2("state") String state, @Query2("response_type") String responseType, @Query2("redirect_uri") String redirectUrl, @Query2("prompt") String prompt, @Query2("scope") String scope, @Query2(ModelAuditLogEntry.CHANGE_KEY_PERMISSIONS) String permissions, @Query2("code_challenge") String codeChallenge, @Query2("code_challenge_method") String codeChallengeMethod, @Body Map<String, String> body);

    @POST("users/@me/remote-auth/cancel")
    Observable<Void> postRemoteAuthCancel(@Body RestAPIParams.RemoteAuthCancel body);

    @POST("users/@me/remote-auth/finish")
    Observable<Void> postRemoteAuthFinish(@Body RestAPIParams.RemoteAuthFinish body);

    @POST("users/@me/remote-auth")
    Observable<ModelRemoteAuthHandshake> postRemoteAuthInitialize(@Body RestAPIParams.RemoteAuthInitialize body);

    @POST("streams/{streamKey}/preview")
    Observable<Void> postStreamPreview(@Path2("streamKey") String streamKey, @Body RestAPIParams.Thumbnail thumbnail);

    @POST("guilds/{guildId}/prune")
    Observable<Void> pruneMembers(@Path2("guildId") long guildId, @Body RestAPIParams.PruneGuild body);

    @DELETE("channels/{channelId}/messages/{messageId}/reactions")
    Observable<Void> removeAllReactions(@Path2("channelId") long channelId, @Path2("messageId") long messageId);

    @DELETE("channels/{channelId}/recipients/{recipientId}")
    Observable<Void> removeChannelRecipient(@Path2("channelId") long channelId, @Path2("recipientId") long recipientId);

    @DELETE("channels/{channelId}/messages/{messageId}/reactions/{reaction}/{userId}")
    Observable<Void> removeReaction(@Path2("channelId") long channelId, @Path2("messageId") long messageId, @Path2(encoded = GoogleSmartLockManager.SET_DISCORD_ACCOUNT_DETAILS, value = "reaction") String reaction, @Path2("userId") long userId);

    @DELETE("users/@me/relationships/{userId}")
    Observable<Void> removeRelationship(@Path2("userId") long userId, @Header3("X-Context-Properties") String context);

    @DELETE("channels/{channelId}/messages/{messageId}/reactions/{reaction}/@me")
    Observable<Void> removeSelfReaction(@Path2("channelId") long channelId, @Path2("messageId") long messageId, @Path2(encoded = GoogleSmartLockManager.SET_DISCORD_ACCOUNT_DETAILS, value = "reaction") String reaction);

    @DELETE("channels/{channelId}/directory-entry/{guildId}")
    Observable<Response<DirectoryEntryGuild>> removeServerFromHub(@Path2("channelId") long channelId, @Path2("guildId") long guildId);

    @PATCH("guilds/{guildId}/channels")
    Observable<Void> reorderChannels(@Path2("guildId") long guildId, @Body List<RestAPIParams.ChannelPosition> body);

    @POST("report")
    Observable<Unit> report(@Body RestAPIParams.Report body);

    @GET("report")
    Observable<List<ReportReason>> report(@Query2(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID) Long channelId, @Query2(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID) Long guildId, @Query2("message_id") Long messageId, @Query2("user_id") Long userId);

    @POST("users/@me/harvest")
    Observable<ModelUserConsents3> requestHarvest();

    @POST("guilds/{guildId}/requests/@me")
    Observable<ModelMemberVerificationFormResponse> resetGuildJoinRequest(@Path2("guildId") long guildId);

    @GET("entitlements/gift-codes/{code}")
    Observable<ModelGift> resolveGiftCode(@Path2(ModelAuditLogEntry.CHANGE_KEY_CODE) String code, @Query2("with_application") boolean withApplication, @Query2("with_subscription_plan") boolean withSubscription);

    @GET("users/@me/entitlements/gift-codes")
    Observable<List<ModelGift>> resolveSkuIdGift(@Query2("sku_id") long skuId, @Query2("subscription_plan_id") Long subscriptionPlanId);

    @DELETE("users/@me/entitlements/gift-codes/{code}")
    Observable<Void> revokeGiftCode(@Path2(ModelAuditLogEntry.CHANGE_KEY_CODE) String code);

    @DELETE("invites/{inviteCode}")
    Observable<ModelInvite> revokeInvite(@Path2("inviteCode") String inviteCode);

    @POST("channels/{channelId}/call/ring")
    Observable<Void> ring(@Path2("channelId") long channelId, @Body RestAPIParams.Ring body, @Header3("X-Context-Properties") String context);

    @POST("science")
    Observable<Void> science(@Body Science body);

    @GET("channels/{channelId}/messages/search")
    Observable<ModelSearchResponse> searchChannelMessages(@Path2("channelId") long channelId, @Query2("max_id") Long oldestMessageId, @Query2("author_id") List<String> authorIds, @Query2("mentions") List<String> mentionsIds, @Query2("has") List<String> has, @Query2("content") List<String> content, @Query2("attempts") Integer attempts, @Query2("include_nsfw") Boolean includeNsfw);

    @GET("guilds/{guildId}/messages/search")
    Observable<ModelSearchResponse> searchGuildMessages(@Path2("guildId") long guildId, @Query2("max_id") Long oldestMessageId, @Query2("author_id") List<String> authorIds, @Query2("mentions") List<String> mentionsIds, @Query2(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID) List<String> inChannelIds, @Query2("has") List<String> has, @Query2("content") List<String> content, @Query2("attempts") Integer attempts, @Query2("include_nsfw") Boolean includeNsfw);

    @GET("channels/{channelId}/directory-entries/search")
    Observable<List<DirectoryEntryGuild>> searchServers(@Path2("channelId") long channelId, @Query2("query") String query);

    @POST("interactions")
    @Multipart
    Observable<Void> sendApplicationCommand(@Part2("payload_json") PayloadJSON<RestAPIParams.ApplicationCommand> payloadJson, @Part2 MultipartBody.Part[] files);

    @POST("interactions")
    Observable<Void> sendApplicationCommand(@Body RestAPIParams.ApplicationCommand body);

    @POST("private/bug-reports")
    @Multipart
    Observable<Unit> sendBugReport(@Part2(ModelAuditLogEntry.CHANGE_KEY_NAME) String name, @Part2(ModelAuditLogEntry.CHANGE_KEY_DESCRIPTION) String description, @Part2("priority") int priority, @Part2("asana_inbox_id") Long asanaInboxId, @Part2 MultipartBody.Part screenshot);

    @POST("interactions")
    Observable<Void> sendComponentInteraction(@Body RestAPIParams.ComponentInteraction body);

    @POST("channels/{channelId}/greet")
    Observable<Message> sendGreetMessage(@Path2("channelId") long channelId, @Body RestAPIParams.GreetMessage body);

    @POST("channels/{channelId}/messages")
    @Multipart
    Observable<Message> sendMessage(@Path2("channelId") long channelId, @Part2("payload_json") PayloadJSON<RestAPIParams.Message> payloadJson, @Part2 MultipartBody.Part[] files);

    @POST("channels/{channelId}/messages")
    Observable<Message> sendMessage(@Path2("channelId") long channelId, @Body RestAPIParams.Message message);

    @POST("interactions")
    Observable<Void> sendModalInteraction(@Body RestAPIParams.ModalInteraction body);

    @POST("users/@me/relationships")
    Observable<Void> sendRelationshipRequest(@Body RestAPIParams.UserRelationship.Add relationship, @Header3("X-Context-Properties") String context);

    @POST("users/@me/consent")
    Observable<Void> setConsents(@Body RestAPIParams.Consents body);

    @POST("guilds/{guildId}/mfa")
    Observable<Void> setMfaLevel(@Path2("guildId") long guildId, @Body RestAPIParams.GuildMFA body);

    @POST("channels/{channelId}/typing")
    Observable<ModelTypingResponse> setUserTyping(@Path2("channelId") long channelId, @Body RestAPIParams.EmptyBody body);

    @POST("stage-instances")
    Observable<StageInstance> startStageInstance(@Body RestAPIParams.StartStageInstanceBody body);

    @POST("channels/{channelId}/call/stop-ringing")
    Observable<Void> stopRinging(@Path2("channelId") long channelId, @Body RestAPIParams.Ring body, @Header3("X-Context-Properties") String context);

    @POST("connections/{connection}/callback")
    Observable<Void> submitConnectionState(@Path2("connection") String connection, @Body RestAPIParams.ConnectionState state);

    @POST("reporting/{reportType}")
    Observable<Unit> submitReport(@Path2("reportType") String reportType, @Body ReportSubmissionBody body);

    @PUT("guilds/{guildId}/premium/subscriptions")
    Observable<List<ModelAppliedGuildBoost>> subscribeToGuild(@Path2("guildId") long guildId, @Body RestAPIParams.GuildBoosting guildBoosting);

    @POST("guilds/{guildId}/integrations/{integrationId}/sync")
    Observable<Void> syncIntegration(@Path2("guildId") long guildId, @Path2("integrationId") long integrationId);

    @PATCH("guilds/{guildId}")
    Observable<Void> transferGuildOwnership(@Path2("guildId") long guildId, @Body RestAPIParams.TransferGuildOwnership transferGuildOwnership);

    @DELETE("guilds/{guildId}/bans/{userId}")
    Observable<Void> unbanUser(@Path2("guildId") long guildId, @Path2("userId") long userId);

    @POST("users/@me/guilds/premium/subscription-slots/{subscriptionSlotId}/uncancel")
    Observable<ModelGuildBoostSlot> uncancelSubscriptionSlot(@Path2("subscriptionSlotId") long slotId);

    @DELETE("guilds/{guildId}/premium/subscriptions/{subscriptionId}")
    Observable<Void> unsubscribeToGuild(@Path2("guildId") long guildId, @Path2("subscriptionId") long subscriptionId);

    @PATCH("users/@me/connections/{connection}/{connectionId}")
    Observable<Response<ConnectedAccount>> updateConnection(@Path2("connection") String connection, @Path2("connectionId") String connectionId, @Body RestAPIParams.ConnectedAccount connectedAccount);

    @PATCH("users/@me/connections/{connection}/{connectionId}")
    Observable<Response<ConnectedAccount>> updateConnectionName(@Path2("connection") String connection, @Path2("connectionId") String connectionId, @Body RestAPIParams.ConnectedAccountNameOnly connectedAccountName);

    @PATCH("guilds/{guildId}")
    Observable<Guild> updateGuild(@Path2("guildId") long guildId, @Body RestAPIParams.UpdateGuild body);

    @PATCH("guilds/{guildId}/integrations/{integrationId}")
    Observable<Void> updateGuildIntegration(@Path2("guildId") long guildId, @Path2("integrationId") long integrationId, @Body RestAPIParams.GuildIntegration body);

    @PATCH("guilds/{guildId}/role-subscriptions/group-listings/{groupListingId}")
    Observable<GuildRoleSubscriptionGroupListing> updateGuildRoleSubscriptionGroupListing(@Path2("guildId") long guildId, @Path2("groupListingId") long groupListingId, @Body RestAPIParams.UpdateGuildRoleSubscriptionGroupListing body);

    @PATCH("guilds/{guildId}/role-subscriptions/subscription-listings/{listingId}/trial")
    Observable<GuildRoleSubscriptionTierFreeTrial> updateGuildRoleSubscriptionTierFreeTrial(@Path2("guildId") long guildId, @Path2("listingId") long listingId, @Body RestAPIParams.UpdateGuildRoleSubscriptionTierFreeTrial body);

    @PATCH("guilds/{guildId}/role-subscriptions/group-listings/{groupListingId}/subscription-listings/{listingId}")
    Observable<GuildRoleSubscriptionTierListing> updateGuildRoleSubscriptionTierListing(@Path2("guildId") long guildId, @Path2("groupListingId") long groupListingId, @Path2("listingId") long tierListingId, @Body RestAPIParams.UpdateGuildRoleSubscriptionTierListing body);

    @PATCH("guilds/{guildId}/scheduled-events/{eventId}")
    Observable<Unit> updateGuildScheduledEvent(@Path2("guildId") long guildId, @Path2("eventId") long eventId, @Body RestAPIParams.UpdateGuildScheduledEventBody body);

    @PATCH("guilds/{guildId}/members/@me")
    Observable<GuildMember> updateMeGuildMember(@Path2("guildId") long guildId, @Body PatchGuildMemberBody body);

    @PATCH("guilds/{guildId}/voice-states/@me")
    Observable<Void> updateMyVoiceStates(@Path2("guildId") long guildId, @Body RestAPIParams.ChannelVoiceStateUpdate body);

    @PATCH("users/@me/billing/payment-sources/{paymentSourceId}")
    Observable<Void> updatePaymentSource(@Path2("paymentSourceId") String paymentSourceId, @Body ModelPaymentSource2 PatchPaymentSourceRaw);

    @PUT("channels/{channelId}/permissions/{targetId}")
    Observable<Void> updatePermissionOverwrites(@Path2("channelId") long channelId, @Path2("targetId") long targetId, @Body RestAPIParams.ChannelPermissionOverwrites body);

    @PATCH("users/@me/guilds/@me/settings")
    Observable<ModelNotificationSettings> updatePrivateChannelSettings(@Body RestAPIParams.UserGuildSettings userGuildSettings);

    @PATCH("guilds/{guildId}/roles/{roleId}")
    Observable<Void> updateRole(@Path2("guildId") long guildId, @Path2("roleId") long roleId, @Body RestAPIParams.Role body);

    @PATCH("stage-instances/{channelId}")
    Observable<StageInstance> updateStageInstance(@Path2("channelId") long channelId, @Body RestAPIParams.UpdateStageInstanceBody body);

    @PATCH("users/@me/billing/subscriptions/{subscriptionId}")
    Observable<Void> updateSubscription(@Path2("subscriptionId") String subscriptionId, @Body RestAPIParams.UpdateSubscription updateSubscription);

    @PATCH("channels/{channelId}/thread-members/@me/settings")
    Observable<ThreadMember> updateThreadMemberSettings(@Path2("channelId") long channelId, @Body RestAPIParams.ThreadMemberSettings body);

    @PATCH("users/@me/guilds/{guildId}/settings")
    Observable<ModelNotificationSettings> updateUserGuildSettings(@Path2("guildId") long guildId, @Body RestAPIParams.UserGuildSettings userGuildSettings);

    @PUT("users/@me/notes/{userId}")
    Observable<Void> updateUserNotes(@Path2("userId") long userId, @Body RestAPIParams.UserNoteUpdate userNoteUpdate);

    @PATCH("users/@me/settings")
    Observable<ModelUserSettings> updateUserSettings(@Body RestAPIParams.UserSettings userSettings);

    @PATCH("users/@me/settings")
    Observable<ModelUserSettings> updateUserSettingsCustomStatus(@Body RestAPIParams.UserSettingsCustomStatus userSettingsCustomStatus);

    @PATCH("guilds/{guildId}/voice-states/{userId}")
    Observable<Void> updateUserVoiceStates(@Path2("guildId") long guildId, @Path2("userId") long userId, @Body RestAPIParams.ChannelVoiceStateUpdate body);

    @PATCH("guilds/{guildId}/vanity-url")
    Observable<VanityUrlResponse> updateVanityUrl(@Path2("guildId") long guildId, @Body RestAPIParams.VanityUrl body);

    @PUT("users/@me/connections/contacts/@me/external-friend-list-entries")
    Observable<Response<BulkFriendSuggestions>> uploadContacts(@Body RestAPIParams.UploadContacts uploadContacts);

    @POST("debug-logs/4/{filename}")
    Observable<Void> uploadLog(@Path2("filename") String filename, @Body String content);

    @POST("debug-logs/multi/4")
    @Multipart
    Observable<Void> uploadLogs(@Part2 MultipartBody.Part[] files);

    @GET("users/{userId}/sessions/{sessionId}/activities/{applicationId}/{actionType}")
    Observable<ActivityActionConfirmation> userActivityAction(@Path2("userId") long userId, @Path2("applicationId") long application, @Path2("sessionId") String sessionId, @Path2("actionType") Integer actionType, @Query2(ModelAuditLogEntry.CHANGE_KEY_CHANNEL_ID) Long channelId, @Query2("message_id") Long messageId);

    @POST("users/@me/phone")
    Observable<Void> userAddPhone(@Body RestAPIParams.Phone body);

    @POST("users/@me/phone/verify")
    Observable<Void> userAddPhoneNoPassword(@Body RestAPIParams.VerificationCodeOnly body);

    @PATCH("users/@me/agreements")
    Observable<Void> userAgreements(@Body RestAPIParams.UserAgreements body);

    @POST("users/@me/captcha/verify")
    Observable<Void> userCaptchaVerify(@Body RestAPIParams.CaptchaCode body);

    @POST("users/@me/channels")
    Observable<Channel> userCreateChannel(@Body RestAPIParams.CreateChannel body);

    @POST("users/@me/devices")
    Observable<Void> userCreateDevice(@Body RestAPIParams.UserDevices body);

    @PUT("users/@me/email")
    Observable<Void> userEmail();

    @POST("users/@me/email/verify-code")
    Observable<ModelEmailChangeConfirm> userEmailVerifyCode(@Body RestAPIParams.UserEmailConfirmCode body);

    @GET("users/{userId}")
    Observable<User> userGet(@Path2("userId") long userId);

    @HTTP(hasBody = GoogleSmartLockManager.SET_DISCORD_ACCOUNT_DETAILS, method = "DELETE", path = "users/@me/phone")
    Observable<Void> userPhoneDelete(@Body RestAPIParams.DeletePhone body);

    @POST("users/@me/phone")
    Observable<Void> userPhoneWithToken(@Body RestAPIParams.VerificationPhoneCode body);

    @GET("users/{userId}/profile")
    Observable<UserProfile> userProfileGet(@Path2("userId") long userId, @Query2("with_mutual_guilds") boolean withMutualGuilds, @Query2(ModelAuditLogEntry.CHANGE_KEY_GUILD_ID) Long guildId);

    @POST("guilds/automations/email-domain-lookup")
    Observable<Response<EmailVerification>> verifyEmail(@Body RestAPIParams.VerifyEmail body);

    @POST("guilds/automations/email-domain-lookup/verify-code")
    Observable<Response<EmailVerification2>> verifyEmailCode(@Body RestAPIParams.VerifyEmailCode body);

    @POST("google-play/verify-purchase-token")
    Observable<RestAPIParams.VerifyPurchaseResponse> verifyPurchaseToken(@Body RestAPIParams.VerifyPurchaseTokenBody verifyPurchaseBody);
}
